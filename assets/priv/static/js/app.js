/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./css/app.scss":
/*!**********************!*\
  !*** ./css/app.scss ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("eval(\"// extracted by mini-css-extract-plugin//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9jc3MvYXBwLnNjc3M/ZDVlNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL2Nzcy9hcHAuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./css/app.scss\\n\");\n\n//# sourceURL=webpack:///./css/app.scss?");

/***/ }),

/***/ "./js/app.js":
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"\\n\\n__webpack_require__(/*! phoenix_html */ \\\"./node_modules/phoenix_html/priv/static/phoenix_html.js\\\");\\n\\n__webpack_require__(/*! ../css/app.scss */ \\\"./css/app.scss\\\");\\n\\n__webpack_require__(/*! ../node_modules/bootstrap */ \\\"./node_modules/bootstrap/dist/js/bootstrap.js\\\");\\n\\n__webpack_require__(/*! ../node_modules/jquery-touchswipe */ \\\"./node_modules/jquery-touchswipe/jquery.touchSwipe.min.js\\\");\\n\\n__webpack_require__(/*! ../node_modules/ekko-lightbox */ \\\"./node_modules/ekko-lightbox/dist/ekko-lightbox.min.js\\\");\\n\\n__webpack_require__(/*! ../vendor/bootstrap-select-1.13.0-beta/js/bootstrap-select */ \\\"./vendor/bootstrap-select-1.13.0-beta/js/bootstrap-select.js\\\");\\n\\n__webpack_require__(/*! ../vendor/slim/js/slim.kickstart.min */ \\\"./vendor/slim/js/slim.kickstart.min.js\\\");\\n\\nvar _loader = __webpack_require__(/*! ./views/loader */ \\\"./js/views/loader.js\\\");\\n\\nvar _loader2 = _interopRequireDefault(_loader);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n// Custom js to run code per page\\n\\n// import \\\"../vendor/custom_scroller/jquery.mCustomScrollbar.concat.min\\\";\\n// imports touchswipe effects\\nwindow.__socket = __webpack_require__(/*! phoenix */ \\\"./node_modules/phoenix/priv/static/phoenix.js\\\").Socket; // Fix for webpack with drab\\n\\n// imports Boostrap js functions\\n\\n// import socket from \\\"./socket\\\"\\n\\nfunction handleDOMContentLoaded() {\\n  var viewName = document.getElementsByTagName('body')[0].dataset.jsViewName;\\n  var ViewClass = (0, _loader2.default)(viewName);\\n  var view = new ViewClass();\\n  view.mount();\\n  window.currentView = view;\\n}\\n\\nfunction handleDocumentUnload() {\\n  window.currentView.unmount();\\n}\\n\\nwindow.addEventListener('DOMContentLoaded', handleDOMContentLoaded, false);\\nwindow.addEventListener('unload', handleDocumentUnload, false);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9hcHAuanM/NzQ3MyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJfX3NvY2tldCIsInJlcXVpcmUiLCJTb2NrZXQiLCJoYW5kbGVET01Db250ZW50TG9hZGVkIiwidmlld05hbWUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZGF0YXNldCIsImpzVmlld05hbWUiLCJWaWV3Q2xhc3MiLCJ2aWV3IiwibW91bnQiLCJjdXJyZW50VmlldyIsImhhbmRsZURvY3VtZW50VW5sb2FkIiwidW5tb3VudCIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBR0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBRUE7Ozs7OztBQUFnRDs7QUFIaEQ7QUFIc0Q7QUFPdERBLE9BQU9DLFFBQVAsR0FBa0IsbUJBQUFDLENBQVEsOERBQVIsRUFBbUJDLE1BQXJDLEMsQ0FBZ0Q7O0FBUk07O0FBSnREOztBQWNBLFNBQVNDLHNCQUFULEdBQWtDO0FBQ2hDLE1BQU1DLFdBQVdDLFNBQVNDLG9CQUFULENBQThCLE1BQTlCLEVBQXNDLENBQXRDLEVBQXlDQyxPQUF6QyxDQUFpREMsVUFBbEU7QUFDQSxNQUFNQyxZQUFZLHNCQUFTTCxRQUFULENBQWxCO0FBQ0EsTUFBTU0sT0FBTyxJQUFJRCxTQUFKLEVBQWI7QUFDQUMsT0FBS0MsS0FBTDtBQUNBWixTQUFPYSxXQUFQLEdBQXFCRixJQUFyQjtBQUNEOztBQUVELFNBQVNHLG9CQUFULEdBQWdDO0FBQzlCZCxTQUFPYSxXQUFQLENBQW1CRSxPQUFuQjtBQUNEOztBQUVEZixPQUFPZ0IsZ0JBQVAsQ0FBd0Isa0JBQXhCLEVBQTRDWixzQkFBNUMsRUFBb0UsS0FBcEU7QUFDQUosT0FBT2dCLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDRixvQkFBbEMsRUFBd0QsS0FBeEQiLCJmaWxlIjoiLi9qcy9hcHAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCJwaG9lbml4X2h0bWxcIjtcbi8vIGltcG9ydCBzb2NrZXQgZnJvbSBcIi4vc29ja2V0XCJcblxuaW1wb3J0IFwiLi4vY3NzL2FwcC5zY3NzXCI7XG5cbmltcG9ydCAnLi4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcCc7ICAgICAgICAgICAgICAgICAgIC8vIGltcG9ydHMgQm9vc3RyYXAganMgZnVuY3Rpb25zXG5pbXBvcnQgJy4uL25vZGVfbW9kdWxlcy9qcXVlcnktdG91Y2hzd2lwZSc7ICAgICAgICAgICAvLyBpbXBvcnRzIHRvdWNoc3dpcGUgZWZmZWN0c1xuaW1wb3J0ICcuLi9ub2RlX21vZHVsZXMvZWtrby1saWdodGJveCc7XG5pbXBvcnQgXCIuLi92ZW5kb3IvYm9vdHN0cmFwLXNlbGVjdC0xLjEzLjAtYmV0YS9qcy9ib290c3RyYXAtc2VsZWN0XCI7XG4vLyBpbXBvcnQgXCIuLi92ZW5kb3IvY3VzdG9tX3Njcm9sbGVyL2pxdWVyeS5tQ3VzdG9tU2Nyb2xsYmFyLmNvbmNhdC5taW5cIjtcbmltcG9ydCBcIi4uL3ZlbmRvci9zbGltL2pzL3NsaW0ua2lja3N0YXJ0Lm1pblwiO1xuXG5pbXBvcnQgbG9hZFZpZXcgZnJvbSAnLi92aWV3cy9sb2FkZXInOyAgICAgICAgICAvLyBDdXN0b20ganMgdG8gcnVuIGNvZGUgcGVyIHBhZ2VcbndpbmRvdy5fX3NvY2tldCA9IHJlcXVpcmUoXCJwaG9lbml4XCIpLlNvY2tldDsgICAgLy8gRml4IGZvciB3ZWJwYWNrIHdpdGggZHJhYlxuXG5mdW5jdGlvbiBoYW5kbGVET01Db250ZW50TG9hZGVkKCkge1xuICBjb25zdCB2aWV3TmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uZGF0YXNldC5qc1ZpZXdOYW1lO1xuICBjb25zdCBWaWV3Q2xhc3MgPSBsb2FkVmlldyh2aWV3TmFtZSk7XG4gIGNvbnN0IHZpZXcgPSBuZXcgVmlld0NsYXNzKCk7XG4gIHZpZXcubW91bnQoKTtcbiAgd2luZG93LmN1cnJlbnRWaWV3ID0gdmlldztcbn1cblxuZnVuY3Rpb24gaGFuZGxlRG9jdW1lbnRVbmxvYWQoKSB7XG4gIHdpbmRvdy5jdXJyZW50Vmlldy51bm1vdW50KCk7XG59XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaGFuZGxlRE9NQ29udGVudExvYWRlZCwgZmFsc2UpO1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VubG9hZCcsIGhhbmRsZURvY3VtZW50VW5sb2FkLCBmYWxzZSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./js/app.js\\n\");\n\n//# sourceURL=webpack:///./js/app.js?");

/***/ }),

/***/ "./js/views/loader.js":
/*!****************************!*\
  !*** ./js/views/loader.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = loadView;\\n\\nvar _main = __webpack_require__(/*! ./main */ \\\"./js/views/main.js\\\");\\n\\nvar _main2 = _interopRequireDefault(_main);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n// import PublicPlayerView from './public/player';\\n\\nvar views = {\\n  // PublicPlayerView\\n};\\n\\nfunction loadView(viewName) {\\n  return views[viewName] || _main2.default;\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy92aWV3cy9sb2FkZXIuanM/NDA1NCJdLCJuYW1lcyI6WyJsb2FkVmlldyIsInZpZXdzIiwidmlld05hbWUiLCJNYWluVmlldyJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBT3dCQSxROztBQVB4Qjs7Ozs7O0FBQ0E7O0FBRUEsSUFBTUMsUUFBUTtBQUNaO0FBRFksQ0FBZDs7QUFJZSxTQUFTRCxRQUFULENBQWtCRSxRQUFsQixFQUE0QjtBQUN6QyxTQUFPRCxNQUFNQyxRQUFOLEtBQW1CQyxjQUExQjtBQUNEIiwiZmlsZSI6Ii4vanMvdmlld3MvbG9hZGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1haW5WaWV3ICAgIGZyb20gJy4vbWFpbic7XG4vLyBpbXBvcnQgUHVibGljUGxheWVyVmlldyBmcm9tICcuL3B1YmxpYy9wbGF5ZXInO1xuXG5jb25zdCB2aWV3cyA9IHtcbiAgLy8gUHVibGljUGxheWVyVmlld1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9hZFZpZXcodmlld05hbWUpIHtcbiAgcmV0dXJuIHZpZXdzW3ZpZXdOYW1lXSB8fCBNYWluVmlldztcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./js/views/loader.js\\n\");\n\n//# sourceURL=webpack:///./js/views/loader.js?");

/***/ }),

/***/ "./js/views/main.js":
/*!**************************!*\
  !*** ./js/views/main.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"/* WEBPACK VAR INJECTION */(function($, global) {\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _knayiMyscript = __webpack_require__(/*! knayi-myscript */ \\\"./node_modules/knayi-myscript/dist/knayi-myscript.es.js\\\");\\n\\nvar _knayiMyscript2 = _interopRequireDefault(_knayiMyscript);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar MainView = function () {\\n  function MainView() {\\n    _classCallCheck(this, MainView);\\n  }\\n\\n  _createClass(MainView, [{\\n    key: 'mount',\\n    value: function mount() {\\n      // This will be executed when the document loads...\\n      console.log('MainView mounted');\\n      console.log(_knayiMyscript2.default.fontDetect('မဂၤလာပါ'));\\n      $(document).ready(function () {\\n        // Assign global variable to support functions\\n        var global = (1, eval)('this');\\n        init_custom_actions();\\n      });\\n    }\\n  }, {\\n    key: 'unmount',\\n    value: function unmount() {\\n      // This will be executed when the document unloads...\\n      console.log('MainView unmounted');\\n    }\\n  }]);\\n\\n  return MainView;\\n}();\\n\\n/* ------------- GLOBAL METHODS  --------------------------------------------------- */\\n\\n\\nexports.default = MainView;\\nglobal.validateMyanmarMobileNumber = function (str) {\\n  return (/^([09]{1})([0-9]{10})$/.test(str)\\n  );\\n};\\nglobal.validateEmail = function (str) {\\n  var re = /^(([^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\\\"]+(\\\\.[^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\\\"]+)*)|(\\\".+\\\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$/;\\n  return re.test(str);\\n};\\nglobal.validatePrice = function (str) {\\n  return (/^([1-9]{1})([0-9]{1,9})?$/.test(str)\\n  );\\n};\\nglobal.reset_announce_form_field = function () {\\n  // Triggered if a wrong phone number is processed to the form\\n  console.log(\\\"wrong phone number : form reseted\\\");\\n  $('.collapsible_form').collapse('hide');\\n  $('#announce_phone_number').val('').focus().removeClass(\\\"field-success\\\");\\n  $('#announce_email').val('');\\n  $('#announce_price').val('');\\n  $('#announce_user_id').val('');\\n};\\nglobal.validate_phone_number_pop_field = function (user_id, nickname, email, password, viber, nb_announces) {\\n  // Good phone number is processed to the form and user has been found in database\\n  console.log(\\\"Good phone number : form processed with pop\\\");\\n  $('#announce_phone_number').addClass(\\\"field-success\\\");\\n  $('.collapsible_form').collapse('show');\\n  $('#announce_user_id').val(user_id);\\n  $('#announce_nickname').val(nickname).focus();\\n  $('#announce_email').val(email);\\n  if (password == \\\"\\\") {\\n    $('#field-password').hide();\\n  } else {\\n    $('#field-password').show();\\n  }\\n  if (viber == \\\"true\\\") {\\n    $('#field-viber').show();\\n    $('#btn-viber').hide();\\n    if (nb_announces > 0) {\\n      $('#btn_unlink_number').attr('disabled', 'disabled');\\n    } else {\\n      $('#btn_unlink_number').removeAttr('disabled');\\n    }\\n  } else {\\n    $('#field-viber').hide();\\n    $('#btn-viber').show();\\n  }\\n};\\nglobal.remove_viber_btn_after_unlink = function () {\\n  $('#field-viber').hide();\\n  $('#btn-viber').show();\\n};\\n\\nglobal.scrollToAnchor = function (aid) {\\n  // var aTag = $(\\\"a[name='\\\"+ aid +\\\"']\\\");\\n  var aTag = $(\\\"[name='\\\" + aid + \\\"']\\\");\\n  $('html,body').animate({ scrollTop: aTag.offset().top }, 'slow');\\n};\\n\\n/* ------------- DOCUMENT LOAD  --------------------------------------------------- */\\n\\nvar init_custom_actions = function init_custom_actions() {\\n\\n  // HEADER\\n  // Trigger search row in the header\\n  $('.family-selector').on('click', function () {\\n    var family_id = $(this).attr('data-target');\\n    $(\\\".category-selector\\\").not('#searchFamily_' + family_id).addClass('d-none');\\n    $(\\\".triangle\\\").not('#triangle_' + family_id).addClass('d-none');\\n    $('#searchFamily_' + family_id).toggleClass(\\\"d-none\\\");\\n    $('#triangle_' + family_id).toggleClass(\\\"d-none\\\");\\n  });\\n  // Close the search row when something else is clicked\\n  $('#main').on('click', function () {\\n    $(\\\"#searchBar\\\").collapse('hide');\\n    $(\\\".category-selector\\\").addClass('d-none');\\n    $(\\\".triangle\\\").addClass('d-none');\\n  });\\n  // Reinit the searchbar when it is collapsed\\n  $('#searchBar').on('hidden.bs.collapse', function (e) {\\n    $(\\\".category-selector\\\").addClass('d-none');\\n    $(\\\".triangle\\\").addClass('d-none');\\n  });\\n\\n  // SLIDEBAR\\n  // Set up CustomScroller - http://manos.malihu.gr/jquery-custom-content-scroller/\\n  // $(\\\"#sidebar\\\").mCustomScrollbar({\\n  //   theme: \\\"minimal\\\"\\n  // });\\n  // Opens the slidebar\\n  $('#sidebarCollapse').on('click', function () {\\n    $('.collapse-level1').collapse('hide');\\n    $('.collapse-level2').collapse('hide');\\n    $(\\\"#searchBar\\\").collapse('hide');\\n    $(\\\".category-selector\\\").addClass('d-none');\\n    $('#navbarDismiss').show();\\n    $('#sidebar').addClass('active');\\n    $('.overlay').addClass('active');\\n    $('.collapse.in').toggleClass('in');\\n    $('a[aria-expanded=true]').attr('aria-expanded', 'false');\\n  });\\n  // Close the sidebar\\n  $('#navbarDismiss, .overlay').on('click', function () {\\n    $('#sidebar').removeClass('active');\\n    $('.overlay').removeClass('active');\\n    $('#navbarDismiss').hide();\\n    $('.collapse-slide').collapse('hide');\\n    $('#searchBar').collapse('hide');\\n  });\\n  // Manage slidebar collapses\\n  $('.collapse-level1').on('show.bs.collapse', function (e) {\\n    $('.collapse-level1').collapse('hide');\\n    $('.collapse-level2').collapse('hide');\\n  });\\n  $('.collapse-level2').on('show.bs.collapse', function (e) {\\n    e.stopPropagation();\\n    $('.collapse-level2').collapse('hide');\\n  });\\n\\n  // Manage conditions collapses\\n  $('#conditions').on('show.bs.collapse', function (e) {\\n    $('.collapse').collapse('hide');\\n  });\\n\\n  // Manage about collapses\\n  $('#about').on('show.bs.collapse', function (e) {\\n    $('.collapse').collapse('hide');\\n  });\\n\\n  // Set up the lightbox - http://ashleydw.github.io/lightbox/#no-wrapping\\n  $(document).on('click', '[data-toggle=\\\"lightbox\\\"]', function (event) {\\n    event.preventDefault();\\n    $(this).ekkoLightbox();\\n  });\\n\\n  // Correct behaviour on the multiselect items\\n  $('.submenu-item-hover').on('click', function (event) {\\n    $(this).mouseenter();\\n    event.stopPropagation();\\n  });\\n\\n  // Click on the see number\\n  $('.btn-show-number').on('click', function () {\\n    var announce_id = $(this).attr('data-announce-id');\\n    var phone_number = $(this).attr('data-phone-number');\\n    $(this).addClass('d-none');\\n    $('#number_' + announce_id).removeClass('d-none');\\n\\n    var $temp = $(\\\"<input>\\\");\\n    $(\\\"body\\\").append($temp);\\n    $temp.val(phone_number).select();\\n    document.execCommand(\\\"copy\\\");\\n    $temp.remove();\\n  });\\n\\n  // Click on a small announce\\n  $('.btn-small-announce').on('click', function () {\\n    $(\\\".small-announce\\\").removeClass('d-none');\\n    $(\\\".big-announce\\\").addClass('d-none');\\n    var announce_id = $(this).attr('data-announce-id');\\n    $('#small_announce_' + announce_id).addClass('d-none');\\n    $('#big_announce_' + announce_id).removeClass('d-none');\\n    scrollToAnchor('big_announce_' + announce_id);\\n  });\\n\\n  // Click on a big announce\\n  $('.btn-big-announce').on('click', function () {\\n    var announce_id = $(this).attr('data-announce-id');\\n    $('#small_announce_' + announce_id).removeClass('d-none');\\n    $('#big_announce_' + announce_id).addClass('d-none');\\n    scrollToAnchor('small_announce_' + announce_id);\\n  });\\n\\n  // Boostrap 4 caroussel 1st elements active selection\\n  $('.carousel-inner').each(function () {\\n    $(this).children(\\\":first\\\").addClass('active');\\n  });\\n  $('.carousel-indicators').each(function () {\\n    $(this).children(\\\":first\\\").addClass('active');\\n  });\\n  $('.carousel').carousel({ interval: false });\\n  $(\\\".carousel-inner\\\").swipe({\\n    swipeLeft: function swipeLeft(event, direction, distance, duration, fingerCount) {\\n      $(this).parent().carousel('next');\\n    },\\n    swipeRight: function swipeRight() {\\n      $(this).parent().carousel('prev');\\n    },\\n    threshold: 75\\n  });\\n\\n  // Currency selector\\n  $('.ddown_change_currency').on('click', function () {\\n    console.log(this.innerHTML);\\n    $('#choosen_currency_text')[0].innerHTML = this.innerHTML;\\n    $('#announce_currency').val(this.innerHTML);\\n  });\\n\\n  // Get the title and check if it looks like Zawgyi\\n  $('#announce_email').on('change', function () {\\n    var email = $(this).val();\\n    if (validateEmail(email) == false) {\\n      console.log(\\\"wrong email\\\");\\n      $(this).val('').focus();\\n    }\\n  });\\n\\n  // Blocked by the not building library\\n  // $('#announce_title').on('change', function() {\\n  //   var title = $(this).val()\\n  //   if (knayi.fontDetect(title) == \\\"zawgyi\\\") {\\n  //     console.log(\\\"zawgyi detected\\\")\\n  //     $('#announce_zawgyi').val('true')\\n  //   } else {\\n  //     console.log(\\\"unicode detected\\\")\\n  //     $('#announce_zawgyi').val('false')\\n  //   }\\n  // })\\n\\n  $('#announce_price').on('change', function () {\\n    var price = $(this).val();\\n    var rounded_price = Math.round(price);\\n    if (isNaN(rounded_price)) {\\n      rounded_price = \\\"\\\";\\n    }\\n    $(this).val(rounded_price).focus();\\n  });\\n};\\n\\n/* ------------- OLD RESSOURCES  --------------------------------------------------- */\\n\\n// let init_navigation = () => {\\n//   $('select').material_select()\\n//   $('.empty_fields').click(function(){\\n//     $('#search_form').clear().submit()\\n//   })\\n// }\\n//\\n// let init_slidebars = () => {\\n//   $('#btn_slidebar_left').sideNav({\\n//       menuWidth: 300, // Default is 300\\n//       edge: 'left', // Choose the horizontal origin\\n//       closeOnClick: true, // Closes side-nav on <a> clicks, useful for Angular/Meteor\\n//       draggable: true // Choose whether you can drag to open on touch screens\\n//     }\\n//   )\\n//   $('#btn_slidebar_right').sideNav({\\n//       menuWidth: 300, // Default is 300\\n//       edge: 'right', // Choose the horizontal origin\\n//       closeOnClick: true, // Closes side-nav on <a> clicks, useful for Angular/Meteor\\n//       draggable: true // Choose whether you can drag to open on touch screens\\n//     }\\n//   )\\n//   console.log(\\\"Sidebars mounted\\\")\\n// }\\n// let destroy_slidebars= () => {\\n//   $('#btn_slidebar_left').sideNav('destroy')\\n//   $('#btn_slidebar_right').sideNav('destroy')\\n//   console.log(\\\"Sidebars destroyed\\\")\\n// }\\n//\\n// let init_toast= () => {\\n//   $(document).on('click', '#toast-container .toast', function() {\\n//     $(this).fadeOut(function(){\\n//       // hide the toast bu dont remove it since Materialize will do it later\\n//       // See in fhash function\\n//     })\\n//   })\\n// }\\n//\\n// let init_dropdown = () => {\\n//   $(\\\".dropdown-button\\\").dropdown(\\n//     { hover: true }\\n//   );\\n// }\\n//\\n// let init_flash = () => {\\n//   $('.flash_msg').hide()\\n//   $('.flash_msg').on('touchstart click', function() {\\n//     $(this).fadeOut( \\\"slow\\\", function() {\\n//       // console.log(\\\"clicked\\\")\\n//     });\\n//   });\\n//   setTimeout(function(){\\n//     $('.flash_msg').fadeIn(1000)\\n//     console.log(\\\"Flash fired In\\\");\\n//   }, 1000);\\n//   setTimeout(function(){\\n//     $('.flash_msg').fadeOut(800)\\n//     //console.log(\\\"Flash fired Out\\\");\\n//   }, 5000)\\n//   // console.log(\\\"Flash fired\\\");\\n// }\\n//\\n// let init_mobile_chrome_vh_fix = () => {\\n//   var vhFix = new VHChromeFix([\\n//     {\\n//       selector: '.player',\\n//       vh: 100\\n//     },\\n//     {\\n//       selector: '.Foxes',\\n//       vh: 50\\n//     }\\n//   ]);\\n// }\\n\\n\\n// global.choose_random = (list) => {\\n//   return list[Math.floor(Math.random()*list.length)]\\n// }\\n//\\n// // Clear search fields\\n// jQuery.fn.clear = function(){\\n//     var $form = $(this)\\n//     $form.find('input:text, input:password, input:file, textarea').val('')\\n//     $form.find('select option:selected').removeAttr('selected')\\n//     $form.find('input:checkbox, input:radio').removeAttr('checked')\\n//     return this\\n// };\\n//\\n// global.update_progress_bar = (bar_id, cards_list) => {\\n//   var total = cards_list.length\\n//   var level1_share = cards_list.filter(card => card.status == 1).length / total * 100\\n//   var level2_share = cards_list.filter(card => card.status == 2).length / total * 100\\n//   var level3_share = cards_list.filter(card => card.status == 3).length / total * 100\\n//   var level0_share = 100 - level1_share - level2_share - level3_share\\n//   // console.log(total)\\n//   // console.log([level0_share, level1_share, level2_share, level3_share])\\n//   // console.log(\\\"level0_share : \\\" + level0_share + \\\", level1_share : \\\" + level1_share + \\\", level2_share : \\\" + level2_share)\\n//   // console.log(bar_id)\\n//   $(`#${bar_id}`).find('.level0').css('width', level0_share + '%')\\n//   $(`#${bar_id}`).find('.level1').css('width', level1_share + '%')\\n//   $(`#${bar_id}`).find('.level2').css('width', level2_share + '%')\\n//   $(`#${bar_id}`).find('.level3').css('width', level3_share + '%')\\n//   // The bar is ordered : next div is the previous level...\\n//   // `#${bar_id} > .progress-item`\\n//   $(`#${bar_id} > .progress-item`).each(function(){\\n//     if ($(this).next(\\\".progress-item\\\").width() > 0) {\\n//       $(this).removeClass(\\\"right_corner\\\")\\n//     } else {\\n//       $(this).addClass(\\\"right_corner\\\")\\n//     }\\n//     if ($(this).prev(\\\".progress-item\\\").width() > 0) {\\n//       $(this).removeClass(\\\"left_corner\\\")\\n//     } else {\\n//       $(this).addClass(\\\"left_corner\\\")\\n//     }\\n//   });\\n// }\\n//\\n\\n// $('.btn_get_number').on('click', function() {\\n//   console.log(this.id)\\n//   this.addClass(\\\"d-none\\\")\\n// })\\n// $('.link_big_announce').on('click', function() {\\n//   // this.\\n// })\\n\\n// $('#announce_phone_number').on('change', function() {\\n//   var number = $(this).val()\\n//   if (validateMyanmarMobileNumber(number) == false) {\\n//     console.log(\\\"wrong phone number\\\")\\n//     $(this).val('').focus().removeClass(\\\"field-success\\\")\\n//     $('.collapsible_form').collapse('hide')\\n//   } else {\\n//     $(this).addClass(\\\"field-success\\\")\\n//     $('.collapsible_form').collapse('show')\\n//   }\\n// })\\n//\\n// $('#btn_check_number').on('click', function() {\\n//   var number = $('#announce_phone_number').val()\\n//   if (validateMyanmarMobileNumber(number) == false) {\\n//     console.log(\\\"wrong phone number\\\")\\n//     $('#announce_phone_number').val('').focus().removeClass(\\\"field-success\\\")\\n//     $('.collapsible_form').collapse('hide')\\n//   } else {\\n//     $('#announce_phone_number').addClass(\\\"field-success\\\")\\n//     $('.collapsible_form').collapse('show')\\n//   }\\n// })\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \\\"./node_modules/jquery/dist/jquery.js\\\"), __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \\\"./node_modules/webpack/buildin/global.js\\\")))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./js/views/main.js\\n\");\n\n//# sourceURL=webpack:///./js/views/main.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"\\n\\nexports.byteLength = byteLength;\\nexports.toByteArray = toByteArray;\\nexports.fromByteArray = fromByteArray;\\n\\nvar lookup = [];\\nvar revLookup = [];\\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\\n\\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\nfor (var i = 0, len = code.length; i < len; ++i) {\\n  lookup[i] = code[i];\\n  revLookup[code.charCodeAt(i)] = i;\\n}\\n\\n// Support decoding URL-safe base64 strings, as Node.js does.\\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\\nrevLookup['-'.charCodeAt(0)] = 62;\\nrevLookup['_'.charCodeAt(0)] = 63;\\n\\nfunction getLens(b64) {\\n  var len = b64.length;\\n\\n  if (len % 4 > 0) {\\n    throw new Error('Invalid string. Length must be a multiple of 4');\\n  }\\n\\n  // Trim off extra bytes after placeholder bytes are found\\n  // See: https://github.com/beatgammit/base64-js/issues/42\\n  var validLen = b64.indexOf('=');\\n  if (validLen === -1) validLen = len;\\n\\n  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\\n\\n  return [validLen, placeHoldersLen];\\n}\\n\\n// base64 is 4/3 + up to two characters of the original data\\nfunction byteLength(b64) {\\n  var lens = getLens(b64);\\n  var validLen = lens[0];\\n  var placeHoldersLen = lens[1];\\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\\n}\\n\\nfunction _byteLength(b64, validLen, placeHoldersLen) {\\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\\n}\\n\\nfunction toByteArray(b64) {\\n  var tmp;\\n  var lens = getLens(b64);\\n  var validLen = lens[0];\\n  var placeHoldersLen = lens[1];\\n\\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\\n\\n  var curByte = 0;\\n\\n  // if there are placeholders, only get up to the last complete 4 chars\\n  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\\n\\n  for (var i = 0; i < len; i += 4) {\\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\\n    arr[curByte++] = tmp >> 16 & 0xFF;\\n    arr[curByte++] = tmp >> 8 & 0xFF;\\n    arr[curByte++] = tmp & 0xFF;\\n  }\\n\\n  if (placeHoldersLen === 2) {\\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\\n    arr[curByte++] = tmp & 0xFF;\\n  }\\n\\n  if (placeHoldersLen === 1) {\\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\\n    arr[curByte++] = tmp >> 8 & 0xFF;\\n    arr[curByte++] = tmp & 0xFF;\\n  }\\n\\n  return arr;\\n}\\n\\nfunction tripletToBase64(num) {\\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\\n}\\n\\nfunction encodeChunk(uint8, start, end) {\\n  var tmp;\\n  var output = [];\\n  for (var i = start; i < end; i += 3) {\\n    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\\n    output.push(tripletToBase64(tmp));\\n  }\\n  return output.join('');\\n}\\n\\nfunction fromByteArray(uint8) {\\n  var tmp;\\n  var len = uint8.length;\\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\\n  var parts = [];\\n  var maxChunkLength = 16383; // must be multiple of 3\\n\\n  // go through the array every three bytes, we'll deal with trailing stuff later\\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\\n  }\\n\\n  // pad the end with zeros, but make sure to not forget the extra bytes\\n  if (extraBytes === 1) {\\n    tmp = uint8[len - 1];\\n    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\\n  } else if (extraBytes === 2) {\\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\\n    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\\n  }\\n\\n  return parts.join('');\\n}//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\\n\");\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/bootstrap/dist/js/bootstrap.js":
/*!*****************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\\n\\nvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n/*!\\n  * Bootstrap v4.1.3 (https://getbootstrap.com/)\\n  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n  */\\n(function (global, factory) {\\n  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, __webpack_require__(/*! jquery */ \\\"./node_modules/jquery/dist/jquery.js\\\"), __webpack_require__(/*! popper.js */ \\\"./node_modules/popper.js/dist/esm/popper.js\\\")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! jquery */ \\\"./node_modules/jquery/dist/jquery.js\\\"), __webpack_require__(/*! popper.js */ \\\"./node_modules/popper.js/dist/esm/popper.js\\\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\\n})(undefined, function (exports, $, Popper) {\\n  'use strict';\\n\\n  $ = $ && $.hasOwnProperty('default') ? $['default'] : $;\\n  Popper = Popper && Popper.hasOwnProperty('default') ? Popper['default'] : Popper;\\n\\n  function _defineProperties(target, props) {\\n    for (var i = 0; i < props.length; i++) {\\n      var descriptor = props[i];\\n      descriptor.enumerable = descriptor.enumerable || false;\\n      descriptor.configurable = true;\\n      if (\\\"value\\\" in descriptor) descriptor.writable = true;\\n      Object.defineProperty(target, descriptor.key, descriptor);\\n    }\\n  }\\n\\n  function _createClass(Constructor, protoProps, staticProps) {\\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\\n    if (staticProps) _defineProperties(Constructor, staticProps);\\n    return Constructor;\\n  }\\n\\n  function _defineProperty(obj, key, value) {\\n    if (key in obj) {\\n      Object.defineProperty(obj, key, {\\n        value: value,\\n        enumerable: true,\\n        configurable: true,\\n        writable: true\\n      });\\n    } else {\\n      obj[key] = value;\\n    }\\n\\n    return obj;\\n  }\\n\\n  function _objectSpread(target) {\\n    for (var i = 1; i < arguments.length; i++) {\\n      var source = arguments[i] != null ? arguments[i] : {};\\n      var ownKeys = Object.keys(source);\\n\\n      if (typeof Object.getOwnPropertySymbols === 'function') {\\n        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\\n        }));\\n      }\\n\\n      ownKeys.forEach(function (key) {\\n        _defineProperty(target, key, source[key]);\\n      });\\n    }\\n\\n    return target;\\n  }\\n\\n  function _inheritsLoose(subClass, superClass) {\\n    subClass.prototype = Object.create(superClass.prototype);\\n    subClass.prototype.constructor = subClass;\\n    subClass.__proto__ = superClass;\\n  }\\n\\n  /**\\n   * --------------------------------------------------------------------------\\n   * Bootstrap (v4.1.3): util.js\\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n   * --------------------------------------------------------------------------\\n   */\\n\\n  var Util = function ($$$1) {\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Private TransitionEnd Helpers\\n     * ------------------------------------------------------------------------\\n     */\\n    var TRANSITION_END = 'transitionend';\\n    var MAX_UID = 1000000;\\n    var MILLISECONDS_MULTIPLIER = 1000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)\\n\\n    function toType(obj) {\\n      return {}.toString.call(obj).match(/\\\\s([a-z]+)/i)[1].toLowerCase();\\n    }\\n\\n    function getSpecialTransitionEndEvent() {\\n      return {\\n        bindType: TRANSITION_END,\\n        delegateType: TRANSITION_END,\\n        handle: function handle(event) {\\n          if ($$$1(event.target).is(this)) {\\n            return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params\\n          }\\n\\n          return undefined; // eslint-disable-line no-undefined\\n        }\\n      };\\n    }\\n\\n    function transitionEndEmulator(duration) {\\n      var _this = this;\\n\\n      var called = false;\\n      $$$1(this).one(Util.TRANSITION_END, function () {\\n        called = true;\\n      });\\n      setTimeout(function () {\\n        if (!called) {\\n          Util.triggerTransitionEnd(_this);\\n        }\\n      }, duration);\\n      return this;\\n    }\\n\\n    function setTransitionEndSupport() {\\n      $$$1.fn.emulateTransitionEnd = transitionEndEmulator;\\n      $$$1.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();\\n    }\\n    /**\\n     * --------------------------------------------------------------------------\\n     * Public Util Api\\n     * --------------------------------------------------------------------------\\n     */\\n\\n    var Util = {\\n      TRANSITION_END: 'bsTransitionEnd',\\n      getUID: function getUID(prefix) {\\n        do {\\n          // eslint-disable-next-line no-bitwise\\n          prefix += ~~(Math.random() * MAX_UID); // \\\"~~\\\" acts like a faster Math.floor() here\\n        } while (document.getElementById(prefix));\\n\\n        return prefix;\\n      },\\n      getSelectorFromElement: function getSelectorFromElement(element) {\\n        var selector = element.getAttribute('data-target');\\n\\n        if (!selector || selector === '#') {\\n          selector = element.getAttribute('href') || '';\\n        }\\n\\n        try {\\n          return document.querySelector(selector) ? selector : null;\\n        } catch (err) {\\n          return null;\\n        }\\n      },\\n      getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {\\n        if (!element) {\\n          return 0;\\n        } // Get transition-duration of the element\\n\\n\\n        var transitionDuration = $$$1(element).css('transition-duration');\\n        var floatTransitionDuration = parseFloat(transitionDuration); // Return 0 if element or transition duration is not found\\n\\n        if (!floatTransitionDuration) {\\n          return 0;\\n        } // If multiple durations are defined, take the first\\n\\n\\n        transitionDuration = transitionDuration.split(',')[0];\\n        return parseFloat(transitionDuration) * MILLISECONDS_MULTIPLIER;\\n      },\\n      reflow: function reflow(element) {\\n        return element.offsetHeight;\\n      },\\n      triggerTransitionEnd: function triggerTransitionEnd(element) {\\n        $$$1(element).trigger(TRANSITION_END);\\n      },\\n      // TODO: Remove in v5\\n      supportsTransitionEnd: function supportsTransitionEnd() {\\n        return Boolean(TRANSITION_END);\\n      },\\n      isElement: function isElement(obj) {\\n        return (obj[0] || obj).nodeType;\\n      },\\n      typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {\\n        for (var property in configTypes) {\\n          if (Object.prototype.hasOwnProperty.call(configTypes, property)) {\\n            var expectedTypes = configTypes[property];\\n            var value = config[property];\\n            var valueType = value && Util.isElement(value) ? 'element' : toType(value);\\n\\n            if (!new RegExp(expectedTypes).test(valueType)) {\\n              throw new Error(componentName.toUpperCase() + \\\": \\\" + (\\\"Option \\\\\\\"\\\" + property + \\\"\\\\\\\" provided type \\\\\\\"\\\" + valueType + \\\"\\\\\\\" \\\") + (\\\"but expected type \\\\\\\"\\\" + expectedTypes + \\\"\\\\\\\".\\\"));\\n            }\\n          }\\n        }\\n      }\\n    };\\n    setTransitionEndSupport();\\n    return Util;\\n  }($);\\n\\n  /**\\n   * --------------------------------------------------------------------------\\n   * Bootstrap (v4.1.3): alert.js\\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n   * --------------------------------------------------------------------------\\n   */\\n\\n  var Alert = function ($$$1) {\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Constants\\n     * ------------------------------------------------------------------------\\n     */\\n    var NAME = 'alert';\\n    var VERSION = '4.1.3';\\n    var DATA_KEY = 'bs.alert';\\n    var EVENT_KEY = \\\".\\\" + DATA_KEY;\\n    var DATA_API_KEY = '.data-api';\\n    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];\\n    var Selector = {\\n      DISMISS: '[data-dismiss=\\\"alert\\\"]'\\n    };\\n    var Event = {\\n      CLOSE: \\\"close\\\" + EVENT_KEY,\\n      CLOSED: \\\"closed\\\" + EVENT_KEY,\\n      CLICK_DATA_API: \\\"click\\\" + EVENT_KEY + DATA_API_KEY\\n    };\\n    var ClassName = {\\n      ALERT: 'alert',\\n      FADE: 'fade',\\n      SHOW: 'show'\\n      /**\\n       * ------------------------------------------------------------------------\\n       * Class Definition\\n       * ------------------------------------------------------------------------\\n       */\\n\\n    };\\n\\n    var Alert =\\n    /*#__PURE__*/\\n    function () {\\n      function Alert(element) {\\n        this._element = element;\\n      } // Getters\\n\\n\\n      var _proto = Alert.prototype;\\n\\n      // Public\\n      _proto.close = function close(element) {\\n        var rootElement = this._element;\\n\\n        if (element) {\\n          rootElement = this._getRootElement(element);\\n        }\\n\\n        var customEvent = this._triggerCloseEvent(rootElement);\\n\\n        if (customEvent.isDefaultPrevented()) {\\n          return;\\n        }\\n\\n        this._removeElement(rootElement);\\n      };\\n\\n      _proto.dispose = function dispose() {\\n        $$$1.removeData(this._element, DATA_KEY);\\n        this._element = null;\\n      }; // Private\\n\\n\\n      _proto._getRootElement = function _getRootElement(element) {\\n        var selector = Util.getSelectorFromElement(element);\\n        var parent = false;\\n\\n        if (selector) {\\n          parent = document.querySelector(selector);\\n        }\\n\\n        if (!parent) {\\n          parent = $$$1(element).closest(\\\".\\\" + ClassName.ALERT)[0];\\n        }\\n\\n        return parent;\\n      };\\n\\n      _proto._triggerCloseEvent = function _triggerCloseEvent(element) {\\n        var closeEvent = $$$1.Event(Event.CLOSE);\\n        $$$1(element).trigger(closeEvent);\\n        return closeEvent;\\n      };\\n\\n      _proto._removeElement = function _removeElement(element) {\\n        var _this = this;\\n\\n        $$$1(element).removeClass(ClassName.SHOW);\\n\\n        if (!$$$1(element).hasClass(ClassName.FADE)) {\\n          this._destroyElement(element);\\n\\n          return;\\n        }\\n\\n        var transitionDuration = Util.getTransitionDurationFromElement(element);\\n        $$$1(element).one(Util.TRANSITION_END, function (event) {\\n          return _this._destroyElement(element, event);\\n        }).emulateTransitionEnd(transitionDuration);\\n      };\\n\\n      _proto._destroyElement = function _destroyElement(element) {\\n        $$$1(element).detach().trigger(Event.CLOSED).remove();\\n      }; // Static\\n\\n\\n      Alert._jQueryInterface = function _jQueryInterface(config) {\\n        return this.each(function () {\\n          var $element = $$$1(this);\\n          var data = $element.data(DATA_KEY);\\n\\n          if (!data) {\\n            data = new Alert(this);\\n            $element.data(DATA_KEY, data);\\n          }\\n\\n          if (config === 'close') {\\n            data[config](this);\\n          }\\n        });\\n      };\\n\\n      Alert._handleDismiss = function _handleDismiss(alertInstance) {\\n        return function (event) {\\n          if (event) {\\n            event.preventDefault();\\n          }\\n\\n          alertInstance.close(this);\\n        };\\n      };\\n\\n      _createClass(Alert, null, [{\\n        key: \\\"VERSION\\\",\\n        get: function get() {\\n          return VERSION;\\n        }\\n      }]);\\n\\n      return Alert;\\n    }();\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Data Api implementation\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));\\n    /**\\n     * ------------------------------------------------------------------------\\n     * jQuery\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1.fn[NAME] = Alert._jQueryInterface;\\n    $$$1.fn[NAME].Constructor = Alert;\\n\\n    $$$1.fn[NAME].noConflict = function () {\\n      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;\\n      return Alert._jQueryInterface;\\n    };\\n\\n    return Alert;\\n  }($);\\n\\n  /**\\n   * --------------------------------------------------------------------------\\n   * Bootstrap (v4.1.3): button.js\\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n   * --------------------------------------------------------------------------\\n   */\\n\\n  var Button = function ($$$1) {\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Constants\\n     * ------------------------------------------------------------------------\\n     */\\n    var NAME = 'button';\\n    var VERSION = '4.1.3';\\n    var DATA_KEY = 'bs.button';\\n    var EVENT_KEY = \\\".\\\" + DATA_KEY;\\n    var DATA_API_KEY = '.data-api';\\n    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];\\n    var ClassName = {\\n      ACTIVE: 'active',\\n      BUTTON: 'btn',\\n      FOCUS: 'focus'\\n    };\\n    var Selector = {\\n      DATA_TOGGLE_CARROT: '[data-toggle^=\\\"button\\\"]',\\n      DATA_TOGGLE: '[data-toggle=\\\"buttons\\\"]',\\n      INPUT: 'input',\\n      ACTIVE: '.active',\\n      BUTTON: '.btn'\\n    };\\n    var Event = {\\n      CLICK_DATA_API: \\\"click\\\" + EVENT_KEY + DATA_API_KEY,\\n      FOCUS_BLUR_DATA_API: \\\"focus\\\" + EVENT_KEY + DATA_API_KEY + \\\" \\\" + (\\\"blur\\\" + EVENT_KEY + DATA_API_KEY)\\n      /**\\n       * ------------------------------------------------------------------------\\n       * Class Definition\\n       * ------------------------------------------------------------------------\\n       */\\n\\n    };\\n\\n    var Button =\\n    /*#__PURE__*/\\n    function () {\\n      function Button(element) {\\n        this._element = element;\\n      } // Getters\\n\\n\\n      var _proto = Button.prototype;\\n\\n      // Public\\n      _proto.toggle = function toggle() {\\n        var triggerChangeEvent = true;\\n        var addAriaPressed = true;\\n        var rootElement = $$$1(this._element).closest(Selector.DATA_TOGGLE)[0];\\n\\n        if (rootElement) {\\n          var input = this._element.querySelector(Selector.INPUT);\\n\\n          if (input) {\\n            if (input.type === 'radio') {\\n              if (input.checked && this._element.classList.contains(ClassName.ACTIVE)) {\\n                triggerChangeEvent = false;\\n              } else {\\n                var activeElement = rootElement.querySelector(Selector.ACTIVE);\\n\\n                if (activeElement) {\\n                  $$$1(activeElement).removeClass(ClassName.ACTIVE);\\n                }\\n              }\\n            }\\n\\n            if (triggerChangeEvent) {\\n              if (input.hasAttribute('disabled') || rootElement.hasAttribute('disabled') || input.classList.contains('disabled') || rootElement.classList.contains('disabled')) {\\n                return;\\n              }\\n\\n              input.checked = !this._element.classList.contains(ClassName.ACTIVE);\\n              $$$1(input).trigger('change');\\n            }\\n\\n            input.focus();\\n            addAriaPressed = false;\\n          }\\n        }\\n\\n        if (addAriaPressed) {\\n          this._element.setAttribute('aria-pressed', !this._element.classList.contains(ClassName.ACTIVE));\\n        }\\n\\n        if (triggerChangeEvent) {\\n          $$$1(this._element).toggleClass(ClassName.ACTIVE);\\n        }\\n      };\\n\\n      _proto.dispose = function dispose() {\\n        $$$1.removeData(this._element, DATA_KEY);\\n        this._element = null;\\n      }; // Static\\n\\n\\n      Button._jQueryInterface = function _jQueryInterface(config) {\\n        return this.each(function () {\\n          var data = $$$1(this).data(DATA_KEY);\\n\\n          if (!data) {\\n            data = new Button(this);\\n            $$$1(this).data(DATA_KEY, data);\\n          }\\n\\n          if (config === 'toggle') {\\n            data[config]();\\n          }\\n        });\\n      };\\n\\n      _createClass(Button, null, [{\\n        key: \\\"VERSION\\\",\\n        get: function get() {\\n          return VERSION;\\n        }\\n      }]);\\n\\n      return Button;\\n    }();\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Data Api implementation\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {\\n      event.preventDefault();\\n      var button = event.target;\\n\\n      if (!$$$1(button).hasClass(ClassName.BUTTON)) {\\n        button = $$$1(button).closest(Selector.BUTTON);\\n      }\\n\\n      Button._jQueryInterface.call($$$1(button), 'toggle');\\n    }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {\\n      var button = $$$1(event.target).closest(Selector.BUTTON)[0];\\n      $$$1(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));\\n    });\\n    /**\\n     * ------------------------------------------------------------------------\\n     * jQuery\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1.fn[NAME] = Button._jQueryInterface;\\n    $$$1.fn[NAME].Constructor = Button;\\n\\n    $$$1.fn[NAME].noConflict = function () {\\n      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;\\n      return Button._jQueryInterface;\\n    };\\n\\n    return Button;\\n  }($);\\n\\n  /**\\n   * --------------------------------------------------------------------------\\n   * Bootstrap (v4.1.3): carousel.js\\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n   * --------------------------------------------------------------------------\\n   */\\n\\n  var Carousel = function ($$$1) {\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Constants\\n     * ------------------------------------------------------------------------\\n     */\\n    var NAME = 'carousel';\\n    var VERSION = '4.1.3';\\n    var DATA_KEY = 'bs.carousel';\\n    var EVENT_KEY = \\\".\\\" + DATA_KEY;\\n    var DATA_API_KEY = '.data-api';\\n    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];\\n    var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key\\n\\n    var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key\\n\\n    var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\\n\\n    var Default = {\\n      interval: 5000,\\n      keyboard: true,\\n      slide: false,\\n      pause: 'hover',\\n      wrap: true\\n    };\\n    var DefaultType = {\\n      interval: '(number|boolean)',\\n      keyboard: 'boolean',\\n      slide: '(boolean|string)',\\n      pause: '(string|boolean)',\\n      wrap: 'boolean'\\n    };\\n    var Direction = {\\n      NEXT: 'next',\\n      PREV: 'prev',\\n      LEFT: 'left',\\n      RIGHT: 'right'\\n    };\\n    var Event = {\\n      SLIDE: \\\"slide\\\" + EVENT_KEY,\\n      SLID: \\\"slid\\\" + EVENT_KEY,\\n      KEYDOWN: \\\"keydown\\\" + EVENT_KEY,\\n      MOUSEENTER: \\\"mouseenter\\\" + EVENT_KEY,\\n      MOUSELEAVE: \\\"mouseleave\\\" + EVENT_KEY,\\n      TOUCHEND: \\\"touchend\\\" + EVENT_KEY,\\n      LOAD_DATA_API: \\\"load\\\" + EVENT_KEY + DATA_API_KEY,\\n      CLICK_DATA_API: \\\"click\\\" + EVENT_KEY + DATA_API_KEY\\n    };\\n    var ClassName = {\\n      CAROUSEL: 'carousel',\\n      ACTIVE: 'active',\\n      SLIDE: 'slide',\\n      RIGHT: 'carousel-item-right',\\n      LEFT: 'carousel-item-left',\\n      NEXT: 'carousel-item-next',\\n      PREV: 'carousel-item-prev',\\n      ITEM: 'carousel-item'\\n    };\\n    var Selector = {\\n      ACTIVE: '.active',\\n      ACTIVE_ITEM: '.active.carousel-item',\\n      ITEM: '.carousel-item',\\n      NEXT_PREV: '.carousel-item-next, .carousel-item-prev',\\n      INDICATORS: '.carousel-indicators',\\n      DATA_SLIDE: '[data-slide], [data-slide-to]',\\n      DATA_RIDE: '[data-ride=\\\"carousel\\\"]'\\n      /**\\n       * ------------------------------------------------------------------------\\n       * Class Definition\\n       * ------------------------------------------------------------------------\\n       */\\n\\n    };\\n\\n    var Carousel =\\n    /*#__PURE__*/\\n    function () {\\n      function Carousel(element, config) {\\n        this._items = null;\\n        this._interval = null;\\n        this._activeElement = null;\\n        this._isPaused = false;\\n        this._isSliding = false;\\n        this.touchTimeout = null;\\n        this._config = this._getConfig(config);\\n        this._element = $$$1(element)[0];\\n        this._indicatorsElement = this._element.querySelector(Selector.INDICATORS);\\n\\n        this._addEventListeners();\\n      } // Getters\\n\\n\\n      var _proto = Carousel.prototype;\\n\\n      // Public\\n      _proto.next = function next() {\\n        if (!this._isSliding) {\\n          this._slide(Direction.NEXT);\\n        }\\n      };\\n\\n      _proto.nextWhenVisible = function nextWhenVisible() {\\n        // Don't call next when the page isn't visible\\n        // or the carousel or its parent isn't visible\\n        if (!document.hidden && $$$1(this._element).is(':visible') && $$$1(this._element).css('visibility') !== 'hidden') {\\n          this.next();\\n        }\\n      };\\n\\n      _proto.prev = function prev() {\\n        if (!this._isSliding) {\\n          this._slide(Direction.PREV);\\n        }\\n      };\\n\\n      _proto.pause = function pause(event) {\\n        if (!event) {\\n          this._isPaused = true;\\n        }\\n\\n        if (this._element.querySelector(Selector.NEXT_PREV)) {\\n          Util.triggerTransitionEnd(this._element);\\n          this.cycle(true);\\n        }\\n\\n        clearInterval(this._interval);\\n        this._interval = null;\\n      };\\n\\n      _proto.cycle = function cycle(event) {\\n        if (!event) {\\n          this._isPaused = false;\\n        }\\n\\n        if (this._interval) {\\n          clearInterval(this._interval);\\n          this._interval = null;\\n        }\\n\\n        if (this._config.interval && !this._isPaused) {\\n          this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);\\n        }\\n      };\\n\\n      _proto.to = function to(index) {\\n        var _this = this;\\n\\n        this._activeElement = this._element.querySelector(Selector.ACTIVE_ITEM);\\n\\n        var activeIndex = this._getItemIndex(this._activeElement);\\n\\n        if (index > this._items.length - 1 || index < 0) {\\n          return;\\n        }\\n\\n        if (this._isSliding) {\\n          $$$1(this._element).one(Event.SLID, function () {\\n            return _this.to(index);\\n          });\\n          return;\\n        }\\n\\n        if (activeIndex === index) {\\n          this.pause();\\n          this.cycle();\\n          return;\\n        }\\n\\n        var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;\\n\\n        this._slide(direction, this._items[index]);\\n      };\\n\\n      _proto.dispose = function dispose() {\\n        $$$1(this._element).off(EVENT_KEY);\\n        $$$1.removeData(this._element, DATA_KEY);\\n        this._items = null;\\n        this._config = null;\\n        this._element = null;\\n        this._interval = null;\\n        this._isPaused = null;\\n        this._isSliding = null;\\n        this._activeElement = null;\\n        this._indicatorsElement = null;\\n      }; // Private\\n\\n\\n      _proto._getConfig = function _getConfig(config) {\\n        config = _objectSpread({}, Default, config);\\n        Util.typeCheckConfig(NAME, config, DefaultType);\\n        return config;\\n      };\\n\\n      _proto._addEventListeners = function _addEventListeners() {\\n        var _this2 = this;\\n\\n        if (this._config.keyboard) {\\n          $$$1(this._element).on(Event.KEYDOWN, function (event) {\\n            return _this2._keydown(event);\\n          });\\n        }\\n\\n        if (this._config.pause === 'hover') {\\n          $$$1(this._element).on(Event.MOUSEENTER, function (event) {\\n            return _this2.pause(event);\\n          }).on(Event.MOUSELEAVE, function (event) {\\n            return _this2.cycle(event);\\n          });\\n\\n          if ('ontouchstart' in document.documentElement) {\\n            // If it's a touch-enabled device, mouseenter/leave are fired as\\n            // part of the mouse compatibility events on first tap - the carousel\\n            // would stop cycling until user tapped out of it;\\n            // here, we listen for touchend, explicitly pause the carousel\\n            // (as if it's the second time we tap on it, mouseenter compat event\\n            // is NOT fired) and after a timeout (to allow for mouse compatibility\\n            // events to fire) we explicitly restart cycling\\n            $$$1(this._element).on(Event.TOUCHEND, function () {\\n              _this2.pause();\\n\\n              if (_this2.touchTimeout) {\\n                clearTimeout(_this2.touchTimeout);\\n              }\\n\\n              _this2.touchTimeout = setTimeout(function (event) {\\n                return _this2.cycle(event);\\n              }, TOUCHEVENT_COMPAT_WAIT + _this2._config.interval);\\n            });\\n          }\\n        }\\n      };\\n\\n      _proto._keydown = function _keydown(event) {\\n        if (/input|textarea/i.test(event.target.tagName)) {\\n          return;\\n        }\\n\\n        switch (event.which) {\\n          case ARROW_LEFT_KEYCODE:\\n            event.preventDefault();\\n            this.prev();\\n            break;\\n\\n          case ARROW_RIGHT_KEYCODE:\\n            event.preventDefault();\\n            this.next();\\n            break;\\n\\n          default:\\n        }\\n      };\\n\\n      _proto._getItemIndex = function _getItemIndex(element) {\\n        this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(Selector.ITEM)) : [];\\n        return this._items.indexOf(element);\\n      };\\n\\n      _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {\\n        var isNextDirection = direction === Direction.NEXT;\\n        var isPrevDirection = direction === Direction.PREV;\\n\\n        var activeIndex = this._getItemIndex(activeElement);\\n\\n        var lastItemIndex = this._items.length - 1;\\n        var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;\\n\\n        if (isGoingToWrap && !this._config.wrap) {\\n          return activeElement;\\n        }\\n\\n        var delta = direction === Direction.PREV ? -1 : 1;\\n        var itemIndex = (activeIndex + delta) % this._items.length;\\n        return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];\\n      };\\n\\n      _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {\\n        var targetIndex = this._getItemIndex(relatedTarget);\\n\\n        var fromIndex = this._getItemIndex(this._element.querySelector(Selector.ACTIVE_ITEM));\\n\\n        var slideEvent = $$$1.Event(Event.SLIDE, {\\n          relatedTarget: relatedTarget,\\n          direction: eventDirectionName,\\n          from: fromIndex,\\n          to: targetIndex\\n        });\\n        $$$1(this._element).trigger(slideEvent);\\n        return slideEvent;\\n      };\\n\\n      _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {\\n        if (this._indicatorsElement) {\\n          var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(Selector.ACTIVE));\\n          $$$1(indicators).removeClass(ClassName.ACTIVE);\\n\\n          var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];\\n\\n          if (nextIndicator) {\\n            $$$1(nextIndicator).addClass(ClassName.ACTIVE);\\n          }\\n        }\\n      };\\n\\n      _proto._slide = function _slide(direction, element) {\\n        var _this3 = this;\\n\\n        var activeElement = this._element.querySelector(Selector.ACTIVE_ITEM);\\n\\n        var activeElementIndex = this._getItemIndex(activeElement);\\n\\n        var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);\\n\\n        var nextElementIndex = this._getItemIndex(nextElement);\\n\\n        var isCycling = Boolean(this._interval);\\n        var directionalClassName;\\n        var orderClassName;\\n        var eventDirectionName;\\n\\n        if (direction === Direction.NEXT) {\\n          directionalClassName = ClassName.LEFT;\\n          orderClassName = ClassName.NEXT;\\n          eventDirectionName = Direction.LEFT;\\n        } else {\\n          directionalClassName = ClassName.RIGHT;\\n          orderClassName = ClassName.PREV;\\n          eventDirectionName = Direction.RIGHT;\\n        }\\n\\n        if (nextElement && $$$1(nextElement).hasClass(ClassName.ACTIVE)) {\\n          this._isSliding = false;\\n          return;\\n        }\\n\\n        var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);\\n\\n        if (slideEvent.isDefaultPrevented()) {\\n          return;\\n        }\\n\\n        if (!activeElement || !nextElement) {\\n          // Some weirdness is happening, so we bail\\n          return;\\n        }\\n\\n        this._isSliding = true;\\n\\n        if (isCycling) {\\n          this.pause();\\n        }\\n\\n        this._setActiveIndicatorElement(nextElement);\\n\\n        var slidEvent = $$$1.Event(Event.SLID, {\\n          relatedTarget: nextElement,\\n          direction: eventDirectionName,\\n          from: activeElementIndex,\\n          to: nextElementIndex\\n        });\\n\\n        if ($$$1(this._element).hasClass(ClassName.SLIDE)) {\\n          $$$1(nextElement).addClass(orderClassName);\\n          Util.reflow(nextElement);\\n          $$$1(activeElement).addClass(directionalClassName);\\n          $$$1(nextElement).addClass(directionalClassName);\\n          var transitionDuration = Util.getTransitionDurationFromElement(activeElement);\\n          $$$1(activeElement).one(Util.TRANSITION_END, function () {\\n            $$$1(nextElement).removeClass(directionalClassName + \\\" \\\" + orderClassName).addClass(ClassName.ACTIVE);\\n            $$$1(activeElement).removeClass(ClassName.ACTIVE + \\\" \\\" + orderClassName + \\\" \\\" + directionalClassName);\\n            _this3._isSliding = false;\\n            setTimeout(function () {\\n              return $$$1(_this3._element).trigger(slidEvent);\\n            }, 0);\\n          }).emulateTransitionEnd(transitionDuration);\\n        } else {\\n          $$$1(activeElement).removeClass(ClassName.ACTIVE);\\n          $$$1(nextElement).addClass(ClassName.ACTIVE);\\n          this._isSliding = false;\\n          $$$1(this._element).trigger(slidEvent);\\n        }\\n\\n        if (isCycling) {\\n          this.cycle();\\n        }\\n      }; // Static\\n\\n\\n      Carousel._jQueryInterface = function _jQueryInterface(config) {\\n        return this.each(function () {\\n          var data = $$$1(this).data(DATA_KEY);\\n\\n          var _config = _objectSpread({}, Default, $$$1(this).data());\\n\\n          if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {\\n            _config = _objectSpread({}, _config, config);\\n          }\\n\\n          var action = typeof config === 'string' ? config : _config.slide;\\n\\n          if (!data) {\\n            data = new Carousel(this, _config);\\n            $$$1(this).data(DATA_KEY, data);\\n          }\\n\\n          if (typeof config === 'number') {\\n            data.to(config);\\n          } else if (typeof action === 'string') {\\n            if (typeof data[action] === 'undefined') {\\n              throw new TypeError(\\\"No method named \\\\\\\"\\\" + action + \\\"\\\\\\\"\\\");\\n            }\\n\\n            data[action]();\\n          } else if (_config.interval) {\\n            data.pause();\\n            data.cycle();\\n          }\\n        });\\n      };\\n\\n      Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {\\n        var selector = Util.getSelectorFromElement(this);\\n\\n        if (!selector) {\\n          return;\\n        }\\n\\n        var target = $$$1(selector)[0];\\n\\n        if (!target || !$$$1(target).hasClass(ClassName.CAROUSEL)) {\\n          return;\\n        }\\n\\n        var config = _objectSpread({}, $$$1(target).data(), $$$1(this).data());\\n\\n        var slideIndex = this.getAttribute('data-slide-to');\\n\\n        if (slideIndex) {\\n          config.interval = false;\\n        }\\n\\n        Carousel._jQueryInterface.call($$$1(target), config);\\n\\n        if (slideIndex) {\\n          $$$1(target).data(DATA_KEY).to(slideIndex);\\n        }\\n\\n        event.preventDefault();\\n      };\\n\\n      _createClass(Carousel, null, [{\\n        key: \\\"VERSION\\\",\\n        get: function get() {\\n          return VERSION;\\n        }\\n      }, {\\n        key: \\\"Default\\\",\\n        get: function get() {\\n          return Default;\\n        }\\n      }]);\\n\\n      return Carousel;\\n    }();\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Data Api implementation\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);\\n    $$$1(window).on(Event.LOAD_DATA_API, function () {\\n      var carousels = [].slice.call(document.querySelectorAll(Selector.DATA_RIDE));\\n\\n      for (var i = 0, len = carousels.length; i < len; i++) {\\n        var $carousel = $$$1(carousels[i]);\\n\\n        Carousel._jQueryInterface.call($carousel, $carousel.data());\\n      }\\n    });\\n    /**\\n     * ------------------------------------------------------------------------\\n     * jQuery\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1.fn[NAME] = Carousel._jQueryInterface;\\n    $$$1.fn[NAME].Constructor = Carousel;\\n\\n    $$$1.fn[NAME].noConflict = function () {\\n      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;\\n      return Carousel._jQueryInterface;\\n    };\\n\\n    return Carousel;\\n  }($);\\n\\n  /**\\n   * --------------------------------------------------------------------------\\n   * Bootstrap (v4.1.3): collapse.js\\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n   * --------------------------------------------------------------------------\\n   */\\n\\n  var Collapse = function ($$$1) {\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Constants\\n     * ------------------------------------------------------------------------\\n     */\\n    var NAME = 'collapse';\\n    var VERSION = '4.1.3';\\n    var DATA_KEY = 'bs.collapse';\\n    var EVENT_KEY = \\\".\\\" + DATA_KEY;\\n    var DATA_API_KEY = '.data-api';\\n    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];\\n    var Default = {\\n      toggle: true,\\n      parent: ''\\n    };\\n    var DefaultType = {\\n      toggle: 'boolean',\\n      parent: '(string|element)'\\n    };\\n    var Event = {\\n      SHOW: \\\"show\\\" + EVENT_KEY,\\n      SHOWN: \\\"shown\\\" + EVENT_KEY,\\n      HIDE: \\\"hide\\\" + EVENT_KEY,\\n      HIDDEN: \\\"hidden\\\" + EVENT_KEY,\\n      CLICK_DATA_API: \\\"click\\\" + EVENT_KEY + DATA_API_KEY\\n    };\\n    var ClassName = {\\n      SHOW: 'show',\\n      COLLAPSE: 'collapse',\\n      COLLAPSING: 'collapsing',\\n      COLLAPSED: 'collapsed'\\n    };\\n    var Dimension = {\\n      WIDTH: 'width',\\n      HEIGHT: 'height'\\n    };\\n    var Selector = {\\n      ACTIVES: '.show, .collapsing',\\n      DATA_TOGGLE: '[data-toggle=\\\"collapse\\\"]'\\n      /**\\n       * ------------------------------------------------------------------------\\n       * Class Definition\\n       * ------------------------------------------------------------------------\\n       */\\n\\n    };\\n\\n    var Collapse =\\n    /*#__PURE__*/\\n    function () {\\n      function Collapse(element, config) {\\n        this._isTransitioning = false;\\n        this._element = element;\\n        this._config = this._getConfig(config);\\n        this._triggerArray = $$$1.makeArray(document.querySelectorAll(\\\"[data-toggle=\\\\\\\"collapse\\\\\\\"][href=\\\\\\\"#\\\" + element.id + \\\"\\\\\\\"],\\\" + (\\\"[data-toggle=\\\\\\\"collapse\\\\\\\"][data-target=\\\\\\\"#\\\" + element.id + \\\"\\\\\\\"]\\\")));\\n        var toggleList = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE));\\n\\n        for (var i = 0, len = toggleList.length; i < len; i++) {\\n          var elem = toggleList[i];\\n          var selector = Util.getSelectorFromElement(elem);\\n          var filterElement = [].slice.call(document.querySelectorAll(selector)).filter(function (foundElem) {\\n            return foundElem === element;\\n          });\\n\\n          if (selector !== null && filterElement.length > 0) {\\n            this._selector = selector;\\n\\n            this._triggerArray.push(elem);\\n          }\\n        }\\n\\n        this._parent = this._config.parent ? this._getParent() : null;\\n\\n        if (!this._config.parent) {\\n          this._addAriaAndCollapsedClass(this._element, this._triggerArray);\\n        }\\n\\n        if (this._config.toggle) {\\n          this.toggle();\\n        }\\n      } // Getters\\n\\n\\n      var _proto = Collapse.prototype;\\n\\n      // Public\\n      _proto.toggle = function toggle() {\\n        if ($$$1(this._element).hasClass(ClassName.SHOW)) {\\n          this.hide();\\n        } else {\\n          this.show();\\n        }\\n      };\\n\\n      _proto.show = function show() {\\n        var _this = this;\\n\\n        if (this._isTransitioning || $$$1(this._element).hasClass(ClassName.SHOW)) {\\n          return;\\n        }\\n\\n        var actives;\\n        var activesData;\\n\\n        if (this._parent) {\\n          actives = [].slice.call(this._parent.querySelectorAll(Selector.ACTIVES)).filter(function (elem) {\\n            return elem.getAttribute('data-parent') === _this._config.parent;\\n          });\\n\\n          if (actives.length === 0) {\\n            actives = null;\\n          }\\n        }\\n\\n        if (actives) {\\n          activesData = $$$1(actives).not(this._selector).data(DATA_KEY);\\n\\n          if (activesData && activesData._isTransitioning) {\\n            return;\\n          }\\n        }\\n\\n        var startEvent = $$$1.Event(Event.SHOW);\\n        $$$1(this._element).trigger(startEvent);\\n\\n        if (startEvent.isDefaultPrevented()) {\\n          return;\\n        }\\n\\n        if (actives) {\\n          Collapse._jQueryInterface.call($$$1(actives).not(this._selector), 'hide');\\n\\n          if (!activesData) {\\n            $$$1(actives).data(DATA_KEY, null);\\n          }\\n        }\\n\\n        var dimension = this._getDimension();\\n\\n        $$$1(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);\\n        this._element.style[dimension] = 0;\\n\\n        if (this._triggerArray.length) {\\n          $$$1(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);\\n        }\\n\\n        this.setTransitioning(true);\\n\\n        var complete = function complete() {\\n          $$$1(_this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);\\n          _this._element.style[dimension] = '';\\n\\n          _this.setTransitioning(false);\\n\\n          $$$1(_this._element).trigger(Event.SHOWN);\\n        };\\n\\n        var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\\n        var scrollSize = \\\"scroll\\\" + capitalizedDimension;\\n        var transitionDuration = Util.getTransitionDurationFromElement(this._element);\\n        $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\\n        this._element.style[dimension] = this._element[scrollSize] + \\\"px\\\";\\n      };\\n\\n      _proto.hide = function hide() {\\n        var _this2 = this;\\n\\n        if (this._isTransitioning || !$$$1(this._element).hasClass(ClassName.SHOW)) {\\n          return;\\n        }\\n\\n        var startEvent = $$$1.Event(Event.HIDE);\\n        $$$1(this._element).trigger(startEvent);\\n\\n        if (startEvent.isDefaultPrevented()) {\\n          return;\\n        }\\n\\n        var dimension = this._getDimension();\\n\\n        this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + \\\"px\\\";\\n        Util.reflow(this._element);\\n        $$$1(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);\\n        var triggerArrayLength = this._triggerArray.length;\\n\\n        if (triggerArrayLength > 0) {\\n          for (var i = 0; i < triggerArrayLength; i++) {\\n            var trigger = this._triggerArray[i];\\n            var selector = Util.getSelectorFromElement(trigger);\\n\\n            if (selector !== null) {\\n              var $elem = $$$1([].slice.call(document.querySelectorAll(selector)));\\n\\n              if (!$elem.hasClass(ClassName.SHOW)) {\\n                $$$1(trigger).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);\\n              }\\n            }\\n          }\\n        }\\n\\n        this.setTransitioning(true);\\n\\n        var complete = function complete() {\\n          _this2.setTransitioning(false);\\n\\n          $$$1(_this2._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);\\n        };\\n\\n        this._element.style[dimension] = '';\\n        var transitionDuration = Util.getTransitionDurationFromElement(this._element);\\n        $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\\n      };\\n\\n      _proto.setTransitioning = function setTransitioning(isTransitioning) {\\n        this._isTransitioning = isTransitioning;\\n      };\\n\\n      _proto.dispose = function dispose() {\\n        $$$1.removeData(this._element, DATA_KEY);\\n        this._config = null;\\n        this._parent = null;\\n        this._element = null;\\n        this._triggerArray = null;\\n        this._isTransitioning = null;\\n      }; // Private\\n\\n\\n      _proto._getConfig = function _getConfig(config) {\\n        config = _objectSpread({}, Default, config);\\n        config.toggle = Boolean(config.toggle); // Coerce string values\\n\\n        Util.typeCheckConfig(NAME, config, DefaultType);\\n        return config;\\n      };\\n\\n      _proto._getDimension = function _getDimension() {\\n        var hasWidth = $$$1(this._element).hasClass(Dimension.WIDTH);\\n        return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;\\n      };\\n\\n      _proto._getParent = function _getParent() {\\n        var _this3 = this;\\n\\n        var parent = null;\\n\\n        if (Util.isElement(this._config.parent)) {\\n          parent = this._config.parent; // It's a jQuery object\\n\\n          if (typeof this._config.parent.jquery !== 'undefined') {\\n            parent = this._config.parent[0];\\n          }\\n        } else {\\n          parent = document.querySelector(this._config.parent);\\n        }\\n\\n        var selector = \\\"[data-toggle=\\\\\\\"collapse\\\\\\\"][data-parent=\\\\\\\"\\\" + this._config.parent + \\\"\\\\\\\"]\\\";\\n        var children = [].slice.call(parent.querySelectorAll(selector));\\n        $$$1(children).each(function (i, element) {\\n          _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);\\n        });\\n        return parent;\\n      };\\n\\n      _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {\\n        if (element) {\\n          var isOpen = $$$1(element).hasClass(ClassName.SHOW);\\n\\n          if (triggerArray.length) {\\n            $$$1(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);\\n          }\\n        }\\n      }; // Static\\n\\n\\n      Collapse._getTargetFromElement = function _getTargetFromElement(element) {\\n        var selector = Util.getSelectorFromElement(element);\\n        return selector ? document.querySelector(selector) : null;\\n      };\\n\\n      Collapse._jQueryInterface = function _jQueryInterface(config) {\\n        return this.each(function () {\\n          var $this = $$$1(this);\\n          var data = $this.data(DATA_KEY);\\n\\n          var _config = _objectSpread({}, Default, $this.data(), (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config ? config : {});\\n\\n          if (!data && _config.toggle && /show|hide/.test(config)) {\\n            _config.toggle = false;\\n          }\\n\\n          if (!data) {\\n            data = new Collapse(this, _config);\\n            $this.data(DATA_KEY, data);\\n          }\\n\\n          if (typeof config === 'string') {\\n            if (typeof data[config] === 'undefined') {\\n              throw new TypeError(\\\"No method named \\\\\\\"\\\" + config + \\\"\\\\\\\"\\\");\\n            }\\n\\n            data[config]();\\n          }\\n        });\\n      };\\n\\n      _createClass(Collapse, null, [{\\n        key: \\\"VERSION\\\",\\n        get: function get() {\\n          return VERSION;\\n        }\\n      }, {\\n        key: \\\"Default\\\",\\n        get: function get() {\\n          return Default;\\n        }\\n      }]);\\n\\n      return Collapse;\\n    }();\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Data Api implementation\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\\n      // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\\n      if (event.currentTarget.tagName === 'A') {\\n        event.preventDefault();\\n      }\\n\\n      var $trigger = $$$1(this);\\n      var selector = Util.getSelectorFromElement(this);\\n      var selectors = [].slice.call(document.querySelectorAll(selector));\\n      $$$1(selectors).each(function () {\\n        var $target = $$$1(this);\\n        var data = $target.data(DATA_KEY);\\n        var config = data ? 'toggle' : $trigger.data();\\n\\n        Collapse._jQueryInterface.call($target, config);\\n      });\\n    });\\n    /**\\n     * ------------------------------------------------------------------------\\n     * jQuery\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1.fn[NAME] = Collapse._jQueryInterface;\\n    $$$1.fn[NAME].Constructor = Collapse;\\n\\n    $$$1.fn[NAME].noConflict = function () {\\n      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;\\n      return Collapse._jQueryInterface;\\n    };\\n\\n    return Collapse;\\n  }($);\\n\\n  /**\\n   * --------------------------------------------------------------------------\\n   * Bootstrap (v4.1.3): dropdown.js\\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n   * --------------------------------------------------------------------------\\n   */\\n\\n  var Dropdown = function ($$$1) {\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Constants\\n     * ------------------------------------------------------------------------\\n     */\\n    var NAME = 'dropdown';\\n    var VERSION = '4.1.3';\\n    var DATA_KEY = 'bs.dropdown';\\n    var EVENT_KEY = \\\".\\\" + DATA_KEY;\\n    var DATA_API_KEY = '.data-api';\\n    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];\\n    var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key\\n\\n    var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key\\n\\n    var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key\\n\\n    var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key\\n\\n    var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key\\n\\n    var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)\\n\\n    var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + \\\"|\\\" + ARROW_DOWN_KEYCODE + \\\"|\\\" + ESCAPE_KEYCODE);\\n    var Event = {\\n      HIDE: \\\"hide\\\" + EVENT_KEY,\\n      HIDDEN: \\\"hidden\\\" + EVENT_KEY,\\n      SHOW: \\\"show\\\" + EVENT_KEY,\\n      SHOWN: \\\"shown\\\" + EVENT_KEY,\\n      CLICK: \\\"click\\\" + EVENT_KEY,\\n      CLICK_DATA_API: \\\"click\\\" + EVENT_KEY + DATA_API_KEY,\\n      KEYDOWN_DATA_API: \\\"keydown\\\" + EVENT_KEY + DATA_API_KEY,\\n      KEYUP_DATA_API: \\\"keyup\\\" + EVENT_KEY + DATA_API_KEY\\n    };\\n    var ClassName = {\\n      DISABLED: 'disabled',\\n      SHOW: 'show',\\n      DROPUP: 'dropup',\\n      DROPRIGHT: 'dropright',\\n      DROPLEFT: 'dropleft',\\n      MENURIGHT: 'dropdown-menu-right',\\n      MENULEFT: 'dropdown-menu-left',\\n      POSITION_STATIC: 'position-static'\\n    };\\n    var Selector = {\\n      DATA_TOGGLE: '[data-toggle=\\\"dropdown\\\"]',\\n      FORM_CHILD: '.dropdown form',\\n      MENU: '.dropdown-menu',\\n      NAVBAR_NAV: '.navbar-nav',\\n      VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'\\n    };\\n    var AttachmentMap = {\\n      TOP: 'top-start',\\n      TOPEND: 'top-end',\\n      BOTTOM: 'bottom-start',\\n      BOTTOMEND: 'bottom-end',\\n      RIGHT: 'right-start',\\n      RIGHTEND: 'right-end',\\n      LEFT: 'left-start',\\n      LEFTEND: 'left-end'\\n    };\\n    var Default = {\\n      offset: 0,\\n      flip: true,\\n      boundary: 'scrollParent',\\n      reference: 'toggle',\\n      display: 'dynamic'\\n    };\\n    var DefaultType = {\\n      offset: '(number|string|function)',\\n      flip: 'boolean',\\n      boundary: '(string|element)',\\n      reference: '(string|element)',\\n      display: 'string'\\n      /**\\n       * ------------------------------------------------------------------------\\n       * Class Definition\\n       * ------------------------------------------------------------------------\\n       */\\n\\n    };\\n\\n    var Dropdown =\\n    /*#__PURE__*/\\n    function () {\\n      function Dropdown(element, config) {\\n        this._element = element;\\n        this._popper = null;\\n        this._config = this._getConfig(config);\\n        this._menu = this._getMenuElement();\\n        this._inNavbar = this._detectNavbar();\\n\\n        this._addEventListeners();\\n      } // Getters\\n\\n\\n      var _proto = Dropdown.prototype;\\n\\n      // Public\\n      _proto.toggle = function toggle() {\\n        if (this._element.disabled || $$$1(this._element).hasClass(ClassName.DISABLED)) {\\n          return;\\n        }\\n\\n        var parent = Dropdown._getParentFromElement(this._element);\\n\\n        var isActive = $$$1(this._menu).hasClass(ClassName.SHOW);\\n\\n        Dropdown._clearMenus();\\n\\n        if (isActive) {\\n          return;\\n        }\\n\\n        var relatedTarget = {\\n          relatedTarget: this._element\\n        };\\n        var showEvent = $$$1.Event(Event.SHOW, relatedTarget);\\n        $$$1(parent).trigger(showEvent);\\n\\n        if (showEvent.isDefaultPrevented()) {\\n          return;\\n        } // Disable totally Popper.js for Dropdown in Navbar\\n\\n\\n        if (!this._inNavbar) {\\n          /**\\n           * Check for Popper dependency\\n           * Popper - https://popper.js.org\\n           */\\n          if (typeof Popper === 'undefined') {\\n            throw new TypeError('Bootstrap dropdown require Popper.js (https://popper.js.org)');\\n          }\\n\\n          var referenceElement = this._element;\\n\\n          if (this._config.reference === 'parent') {\\n            referenceElement = parent;\\n          } else if (Util.isElement(this._config.reference)) {\\n            referenceElement = this._config.reference; // Check if it's jQuery element\\n\\n            if (typeof this._config.reference.jquery !== 'undefined') {\\n              referenceElement = this._config.reference[0];\\n            }\\n          } // If boundary is not `scrollParent`, then set position to `static`\\n          // to allow the menu to \\\"escape\\\" the scroll parent's boundaries\\n          // https://github.com/twbs/bootstrap/issues/24251\\n\\n\\n          if (this._config.boundary !== 'scrollParent') {\\n            $$$1(parent).addClass(ClassName.POSITION_STATIC);\\n          }\\n\\n          this._popper = new Popper(referenceElement, this._menu, this._getPopperConfig());\\n        } // If this is a touch-enabled device we add extra\\n        // empty mouseover listeners to the body's immediate children;\\n        // only needed because of broken event delegation on iOS\\n        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\\n\\n\\n        if ('ontouchstart' in document.documentElement && $$$1(parent).closest(Selector.NAVBAR_NAV).length === 0) {\\n          $$$1(document.body).children().on('mouseover', null, $$$1.noop);\\n        }\\n\\n        this._element.focus();\\n\\n        this._element.setAttribute('aria-expanded', true);\\n\\n        $$$1(this._menu).toggleClass(ClassName.SHOW);\\n        $$$1(parent).toggleClass(ClassName.SHOW).trigger($$$1.Event(Event.SHOWN, relatedTarget));\\n      };\\n\\n      _proto.dispose = function dispose() {\\n        $$$1.removeData(this._element, DATA_KEY);\\n        $$$1(this._element).off(EVENT_KEY);\\n        this._element = null;\\n        this._menu = null;\\n\\n        if (this._popper !== null) {\\n          this._popper.destroy();\\n\\n          this._popper = null;\\n        }\\n      };\\n\\n      _proto.update = function update() {\\n        this._inNavbar = this._detectNavbar();\\n\\n        if (this._popper !== null) {\\n          this._popper.scheduleUpdate();\\n        }\\n      }; // Private\\n\\n\\n      _proto._addEventListeners = function _addEventListeners() {\\n        var _this = this;\\n\\n        $$$1(this._element).on(Event.CLICK, function (event) {\\n          event.preventDefault();\\n          event.stopPropagation();\\n\\n          _this.toggle();\\n        });\\n      };\\n\\n      _proto._getConfig = function _getConfig(config) {\\n        config = _objectSpread({}, this.constructor.Default, $$$1(this._element).data(), config);\\n        Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);\\n        return config;\\n      };\\n\\n      _proto._getMenuElement = function _getMenuElement() {\\n        if (!this._menu) {\\n          var parent = Dropdown._getParentFromElement(this._element);\\n\\n          if (parent) {\\n            this._menu = parent.querySelector(Selector.MENU);\\n          }\\n        }\\n\\n        return this._menu;\\n      };\\n\\n      _proto._getPlacement = function _getPlacement() {\\n        var $parentDropdown = $$$1(this._element.parentNode);\\n        var placement = AttachmentMap.BOTTOM; // Handle dropup\\n\\n        if ($parentDropdown.hasClass(ClassName.DROPUP)) {\\n          placement = AttachmentMap.TOP;\\n\\n          if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {\\n            placement = AttachmentMap.TOPEND;\\n          }\\n        } else if ($parentDropdown.hasClass(ClassName.DROPRIGHT)) {\\n          placement = AttachmentMap.RIGHT;\\n        } else if ($parentDropdown.hasClass(ClassName.DROPLEFT)) {\\n          placement = AttachmentMap.LEFT;\\n        } else if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {\\n          placement = AttachmentMap.BOTTOMEND;\\n        }\\n\\n        return placement;\\n      };\\n\\n      _proto._detectNavbar = function _detectNavbar() {\\n        return $$$1(this._element).closest('.navbar').length > 0;\\n      };\\n\\n      _proto._getPopperConfig = function _getPopperConfig() {\\n        var _this2 = this;\\n\\n        var offsetConf = {};\\n\\n        if (typeof this._config.offset === 'function') {\\n          offsetConf.fn = function (data) {\\n            data.offsets = _objectSpread({}, data.offsets, _this2._config.offset(data.offsets) || {});\\n            return data;\\n          };\\n        } else {\\n          offsetConf.offset = this._config.offset;\\n        }\\n\\n        var popperConfig = {\\n          placement: this._getPlacement(),\\n          modifiers: {\\n            offset: offsetConf,\\n            flip: {\\n              enabled: this._config.flip\\n            },\\n            preventOverflow: {\\n              boundariesElement: this._config.boundary\\n            } // Disable Popper.js if we have a static display\\n\\n          } };\\n\\n        if (this._config.display === 'static') {\\n          popperConfig.modifiers.applyStyle = {\\n            enabled: false\\n          };\\n        }\\n\\n        return popperConfig;\\n      }; // Static\\n\\n\\n      Dropdown._jQueryInterface = function _jQueryInterface(config) {\\n        return this.each(function () {\\n          var data = $$$1(this).data(DATA_KEY);\\n\\n          var _config = (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' ? config : null;\\n\\n          if (!data) {\\n            data = new Dropdown(this, _config);\\n            $$$1(this).data(DATA_KEY, data);\\n          }\\n\\n          if (typeof config === 'string') {\\n            if (typeof data[config] === 'undefined') {\\n              throw new TypeError(\\\"No method named \\\\\\\"\\\" + config + \\\"\\\\\\\"\\\");\\n            }\\n\\n            data[config]();\\n          }\\n        });\\n      };\\n\\n      Dropdown._clearMenus = function _clearMenus(event) {\\n        if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {\\n          return;\\n        }\\n\\n        var toggles = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE));\\n\\n        for (var i = 0, len = toggles.length; i < len; i++) {\\n          var parent = Dropdown._getParentFromElement(toggles[i]);\\n\\n          var context = $$$1(toggles[i]).data(DATA_KEY);\\n          var relatedTarget = {\\n            relatedTarget: toggles[i]\\n          };\\n\\n          if (event && event.type === 'click') {\\n            relatedTarget.clickEvent = event;\\n          }\\n\\n          if (!context) {\\n            continue;\\n          }\\n\\n          var dropdownMenu = context._menu;\\n\\n          if (!$$$1(parent).hasClass(ClassName.SHOW)) {\\n            continue;\\n          }\\n\\n          if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $$$1.contains(parent, event.target)) {\\n            continue;\\n          }\\n\\n          var hideEvent = $$$1.Event(Event.HIDE, relatedTarget);\\n          $$$1(parent).trigger(hideEvent);\\n\\n          if (hideEvent.isDefaultPrevented()) {\\n            continue;\\n          } // If this is a touch-enabled device we remove the extra\\n          // empty mouseover listeners we added for iOS support\\n\\n\\n          if ('ontouchstart' in document.documentElement) {\\n            $$$1(document.body).children().off('mouseover', null, $$$1.noop);\\n          }\\n\\n          toggles[i].setAttribute('aria-expanded', 'false');\\n          $$$1(dropdownMenu).removeClass(ClassName.SHOW);\\n          $$$1(parent).removeClass(ClassName.SHOW).trigger($$$1.Event(Event.HIDDEN, relatedTarget));\\n        }\\n      };\\n\\n      Dropdown._getParentFromElement = function _getParentFromElement(element) {\\n        var parent;\\n        var selector = Util.getSelectorFromElement(element);\\n\\n        if (selector) {\\n          parent = document.querySelector(selector);\\n        }\\n\\n        return parent || element.parentNode;\\n      }; // eslint-disable-next-line complexity\\n\\n\\n      Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {\\n        // If not input/textarea:\\n        //  - And not a key in REGEXP_KEYDOWN => not a dropdown command\\n        // If input/textarea:\\n        //  - If space key => not a dropdown command\\n        //  - If key is other than escape\\n        //    - If key is not up or down => not a dropdown command\\n        //    - If trigger inside the menu => not a dropdown command\\n        if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $$$1(event.target).closest(Selector.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {\\n          return;\\n        }\\n\\n        event.preventDefault();\\n        event.stopPropagation();\\n\\n        if (this.disabled || $$$1(this).hasClass(ClassName.DISABLED)) {\\n          return;\\n        }\\n\\n        var parent = Dropdown._getParentFromElement(this);\\n\\n        var isActive = $$$1(parent).hasClass(ClassName.SHOW);\\n\\n        if (!isActive && (event.which !== ESCAPE_KEYCODE || event.which !== SPACE_KEYCODE) || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {\\n          if (event.which === ESCAPE_KEYCODE) {\\n            var toggle = parent.querySelector(Selector.DATA_TOGGLE);\\n            $$$1(toggle).trigger('focus');\\n          }\\n\\n          $$$1(this).trigger('click');\\n          return;\\n        }\\n\\n        var items = [].slice.call(parent.querySelectorAll(Selector.VISIBLE_ITEMS));\\n\\n        if (items.length === 0) {\\n          return;\\n        }\\n\\n        var index = items.indexOf(event.target);\\n\\n        if (event.which === ARROW_UP_KEYCODE && index > 0) {\\n          // Up\\n          index--;\\n        }\\n\\n        if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {\\n          // Down\\n          index++;\\n        }\\n\\n        if (index < 0) {\\n          index = 0;\\n        }\\n\\n        items[index].focus();\\n      };\\n\\n      _createClass(Dropdown, null, [{\\n        key: \\\"VERSION\\\",\\n        get: function get() {\\n          return VERSION;\\n        }\\n      }, {\\n        key: \\\"Default\\\",\\n        get: function get() {\\n          return Default;\\n        }\\n      }, {\\n        key: \\\"DefaultType\\\",\\n        get: function get() {\\n          return DefaultType;\\n        }\\n      }]);\\n\\n      return Dropdown;\\n    }();\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Data Api implementation\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + \\\" \\\" + Event.KEYUP_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\\n      event.preventDefault();\\n      event.stopPropagation();\\n\\n      Dropdown._jQueryInterface.call($$$1(this), 'toggle');\\n    }).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function (e) {\\n      e.stopPropagation();\\n    });\\n    /**\\n     * ------------------------------------------------------------------------\\n     * jQuery\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1.fn[NAME] = Dropdown._jQueryInterface;\\n    $$$1.fn[NAME].Constructor = Dropdown;\\n\\n    $$$1.fn[NAME].noConflict = function () {\\n      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;\\n      return Dropdown._jQueryInterface;\\n    };\\n\\n    return Dropdown;\\n  }($, Popper);\\n\\n  /**\\n   * --------------------------------------------------------------------------\\n   * Bootstrap (v4.1.3): modal.js\\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n   * --------------------------------------------------------------------------\\n   */\\n\\n  var Modal = function ($$$1) {\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Constants\\n     * ------------------------------------------------------------------------\\n     */\\n    var NAME = 'modal';\\n    var VERSION = '4.1.3';\\n    var DATA_KEY = 'bs.modal';\\n    var EVENT_KEY = \\\".\\\" + DATA_KEY;\\n    var DATA_API_KEY = '.data-api';\\n    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];\\n    var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key\\n\\n    var Default = {\\n      backdrop: true,\\n      keyboard: true,\\n      focus: true,\\n      show: true\\n    };\\n    var DefaultType = {\\n      backdrop: '(boolean|string)',\\n      keyboard: 'boolean',\\n      focus: 'boolean',\\n      show: 'boolean'\\n    };\\n    var Event = {\\n      HIDE: \\\"hide\\\" + EVENT_KEY,\\n      HIDDEN: \\\"hidden\\\" + EVENT_KEY,\\n      SHOW: \\\"show\\\" + EVENT_KEY,\\n      SHOWN: \\\"shown\\\" + EVENT_KEY,\\n      FOCUSIN: \\\"focusin\\\" + EVENT_KEY,\\n      RESIZE: \\\"resize\\\" + EVENT_KEY,\\n      CLICK_DISMISS: \\\"click.dismiss\\\" + EVENT_KEY,\\n      KEYDOWN_DISMISS: \\\"keydown.dismiss\\\" + EVENT_KEY,\\n      MOUSEUP_DISMISS: \\\"mouseup.dismiss\\\" + EVENT_KEY,\\n      MOUSEDOWN_DISMISS: \\\"mousedown.dismiss\\\" + EVENT_KEY,\\n      CLICK_DATA_API: \\\"click\\\" + EVENT_KEY + DATA_API_KEY\\n    };\\n    var ClassName = {\\n      SCROLLBAR_MEASURER: 'modal-scrollbar-measure',\\n      BACKDROP: 'modal-backdrop',\\n      OPEN: 'modal-open',\\n      FADE: 'fade',\\n      SHOW: 'show'\\n    };\\n    var Selector = {\\n      DIALOG: '.modal-dialog',\\n      DATA_TOGGLE: '[data-toggle=\\\"modal\\\"]',\\n      DATA_DISMISS: '[data-dismiss=\\\"modal\\\"]',\\n      FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\\n      STICKY_CONTENT: '.sticky-top'\\n      /**\\n       * ------------------------------------------------------------------------\\n       * Class Definition\\n       * ------------------------------------------------------------------------\\n       */\\n\\n    };\\n\\n    var Modal =\\n    /*#__PURE__*/\\n    function () {\\n      function Modal(element, config) {\\n        this._config = this._getConfig(config);\\n        this._element = element;\\n        this._dialog = element.querySelector(Selector.DIALOG);\\n        this._backdrop = null;\\n        this._isShown = false;\\n        this._isBodyOverflowing = false;\\n        this._ignoreBackdropClick = false;\\n        this._scrollbarWidth = 0;\\n      } // Getters\\n\\n\\n      var _proto = Modal.prototype;\\n\\n      // Public\\n      _proto.toggle = function toggle(relatedTarget) {\\n        return this._isShown ? this.hide() : this.show(relatedTarget);\\n      };\\n\\n      _proto.show = function show(relatedTarget) {\\n        var _this = this;\\n\\n        if (this._isTransitioning || this._isShown) {\\n          return;\\n        }\\n\\n        if ($$$1(this._element).hasClass(ClassName.FADE)) {\\n          this._isTransitioning = true;\\n        }\\n\\n        var showEvent = $$$1.Event(Event.SHOW, {\\n          relatedTarget: relatedTarget\\n        });\\n        $$$1(this._element).trigger(showEvent);\\n\\n        if (this._isShown || showEvent.isDefaultPrevented()) {\\n          return;\\n        }\\n\\n        this._isShown = true;\\n\\n        this._checkScrollbar();\\n\\n        this._setScrollbar();\\n\\n        this._adjustDialog();\\n\\n        $$$1(document.body).addClass(ClassName.OPEN);\\n\\n        this._setEscapeEvent();\\n\\n        this._setResizeEvent();\\n\\n        $$$1(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function (event) {\\n          return _this.hide(event);\\n        });\\n        $$$1(this._dialog).on(Event.MOUSEDOWN_DISMISS, function () {\\n          $$$1(_this._element).one(Event.MOUSEUP_DISMISS, function (event) {\\n            if ($$$1(event.target).is(_this._element)) {\\n              _this._ignoreBackdropClick = true;\\n            }\\n          });\\n        });\\n\\n        this._showBackdrop(function () {\\n          return _this._showElement(relatedTarget);\\n        });\\n      };\\n\\n      _proto.hide = function hide(event) {\\n        var _this2 = this;\\n\\n        if (event) {\\n          event.preventDefault();\\n        }\\n\\n        if (this._isTransitioning || !this._isShown) {\\n          return;\\n        }\\n\\n        var hideEvent = $$$1.Event(Event.HIDE);\\n        $$$1(this._element).trigger(hideEvent);\\n\\n        if (!this._isShown || hideEvent.isDefaultPrevented()) {\\n          return;\\n        }\\n\\n        this._isShown = false;\\n        var transition = $$$1(this._element).hasClass(ClassName.FADE);\\n\\n        if (transition) {\\n          this._isTransitioning = true;\\n        }\\n\\n        this._setEscapeEvent();\\n\\n        this._setResizeEvent();\\n\\n        $$$1(document).off(Event.FOCUSIN);\\n        $$$1(this._element).removeClass(ClassName.SHOW);\\n        $$$1(this._element).off(Event.CLICK_DISMISS);\\n        $$$1(this._dialog).off(Event.MOUSEDOWN_DISMISS);\\n\\n        if (transition) {\\n          var transitionDuration = Util.getTransitionDurationFromElement(this._element);\\n          $$$1(this._element).one(Util.TRANSITION_END, function (event) {\\n            return _this2._hideModal(event);\\n          }).emulateTransitionEnd(transitionDuration);\\n        } else {\\n          this._hideModal();\\n        }\\n      };\\n\\n      _proto.dispose = function dispose() {\\n        $$$1.removeData(this._element, DATA_KEY);\\n        $$$1(window, document, this._element, this._backdrop).off(EVENT_KEY);\\n        this._config = null;\\n        this._element = null;\\n        this._dialog = null;\\n        this._backdrop = null;\\n        this._isShown = null;\\n        this._isBodyOverflowing = null;\\n        this._ignoreBackdropClick = null;\\n        this._scrollbarWidth = null;\\n      };\\n\\n      _proto.handleUpdate = function handleUpdate() {\\n        this._adjustDialog();\\n      }; // Private\\n\\n\\n      _proto._getConfig = function _getConfig(config) {\\n        config = _objectSpread({}, Default, config);\\n        Util.typeCheckConfig(NAME, config, DefaultType);\\n        return config;\\n      };\\n\\n      _proto._showElement = function _showElement(relatedTarget) {\\n        var _this3 = this;\\n\\n        var transition = $$$1(this._element).hasClass(ClassName.FADE);\\n\\n        if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\\n          // Don't move modal's DOM position\\n          document.body.appendChild(this._element);\\n        }\\n\\n        this._element.style.display = 'block';\\n\\n        this._element.removeAttribute('aria-hidden');\\n\\n        this._element.scrollTop = 0;\\n\\n        if (transition) {\\n          Util.reflow(this._element);\\n        }\\n\\n        $$$1(this._element).addClass(ClassName.SHOW);\\n\\n        if (this._config.focus) {\\n          this._enforceFocus();\\n        }\\n\\n        var shownEvent = $$$1.Event(Event.SHOWN, {\\n          relatedTarget: relatedTarget\\n        });\\n\\n        var transitionComplete = function transitionComplete() {\\n          if (_this3._config.focus) {\\n            _this3._element.focus();\\n          }\\n\\n          _this3._isTransitioning = false;\\n          $$$1(_this3._element).trigger(shownEvent);\\n        };\\n\\n        if (transition) {\\n          var transitionDuration = Util.getTransitionDurationFromElement(this._element);\\n          $$$1(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);\\n        } else {\\n          transitionComplete();\\n        }\\n      };\\n\\n      _proto._enforceFocus = function _enforceFocus() {\\n        var _this4 = this;\\n\\n        $$$1(document).off(Event.FOCUSIN) // Guard against infinite focus loop\\n        .on(Event.FOCUSIN, function (event) {\\n          if (document !== event.target && _this4._element !== event.target && $$$1(_this4._element).has(event.target).length === 0) {\\n            _this4._element.focus();\\n          }\\n        });\\n      };\\n\\n      _proto._setEscapeEvent = function _setEscapeEvent() {\\n        var _this5 = this;\\n\\n        if (this._isShown && this._config.keyboard) {\\n          $$$1(this._element).on(Event.KEYDOWN_DISMISS, function (event) {\\n            if (event.which === ESCAPE_KEYCODE) {\\n              event.preventDefault();\\n\\n              _this5.hide();\\n            }\\n          });\\n        } else if (!this._isShown) {\\n          $$$1(this._element).off(Event.KEYDOWN_DISMISS);\\n        }\\n      };\\n\\n      _proto._setResizeEvent = function _setResizeEvent() {\\n        var _this6 = this;\\n\\n        if (this._isShown) {\\n          $$$1(window).on(Event.RESIZE, function (event) {\\n            return _this6.handleUpdate(event);\\n          });\\n        } else {\\n          $$$1(window).off(Event.RESIZE);\\n        }\\n      };\\n\\n      _proto._hideModal = function _hideModal() {\\n        var _this7 = this;\\n\\n        this._element.style.display = 'none';\\n\\n        this._element.setAttribute('aria-hidden', true);\\n\\n        this._isTransitioning = false;\\n\\n        this._showBackdrop(function () {\\n          $$$1(document.body).removeClass(ClassName.OPEN);\\n\\n          _this7._resetAdjustments();\\n\\n          _this7._resetScrollbar();\\n\\n          $$$1(_this7._element).trigger(Event.HIDDEN);\\n        });\\n      };\\n\\n      _proto._removeBackdrop = function _removeBackdrop() {\\n        if (this._backdrop) {\\n          $$$1(this._backdrop).remove();\\n          this._backdrop = null;\\n        }\\n      };\\n\\n      _proto._showBackdrop = function _showBackdrop(callback) {\\n        var _this8 = this;\\n\\n        var animate = $$$1(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';\\n\\n        if (this._isShown && this._config.backdrop) {\\n          this._backdrop = document.createElement('div');\\n          this._backdrop.className = ClassName.BACKDROP;\\n\\n          if (animate) {\\n            this._backdrop.classList.add(animate);\\n          }\\n\\n          $$$1(this._backdrop).appendTo(document.body);\\n          $$$1(this._element).on(Event.CLICK_DISMISS, function (event) {\\n            if (_this8._ignoreBackdropClick) {\\n              _this8._ignoreBackdropClick = false;\\n              return;\\n            }\\n\\n            if (event.target !== event.currentTarget) {\\n              return;\\n            }\\n\\n            if (_this8._config.backdrop === 'static') {\\n              _this8._element.focus();\\n            } else {\\n              _this8.hide();\\n            }\\n          });\\n\\n          if (animate) {\\n            Util.reflow(this._backdrop);\\n          }\\n\\n          $$$1(this._backdrop).addClass(ClassName.SHOW);\\n\\n          if (!callback) {\\n            return;\\n          }\\n\\n          if (!animate) {\\n            callback();\\n            return;\\n          }\\n\\n          var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);\\n          $$$1(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);\\n        } else if (!this._isShown && this._backdrop) {\\n          $$$1(this._backdrop).removeClass(ClassName.SHOW);\\n\\n          var callbackRemove = function callbackRemove() {\\n            _this8._removeBackdrop();\\n\\n            if (callback) {\\n              callback();\\n            }\\n          };\\n\\n          if ($$$1(this._element).hasClass(ClassName.FADE)) {\\n            var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);\\n\\n            $$$1(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);\\n          } else {\\n            callbackRemove();\\n          }\\n        } else if (callback) {\\n          callback();\\n        }\\n      }; // ----------------------------------------------------------------------\\n      // the following methods are used to handle overflowing modals\\n      // todo (fat): these should probably be refactored out of modal.js\\n      // ----------------------------------------------------------------------\\n\\n\\n      _proto._adjustDialog = function _adjustDialog() {\\n        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\\n\\n        if (!this._isBodyOverflowing && isModalOverflowing) {\\n          this._element.style.paddingLeft = this._scrollbarWidth + \\\"px\\\";\\n        }\\n\\n        if (this._isBodyOverflowing && !isModalOverflowing) {\\n          this._element.style.paddingRight = this._scrollbarWidth + \\\"px\\\";\\n        }\\n      };\\n\\n      _proto._resetAdjustments = function _resetAdjustments() {\\n        this._element.style.paddingLeft = '';\\n        this._element.style.paddingRight = '';\\n      };\\n\\n      _proto._checkScrollbar = function _checkScrollbar() {\\n        var rect = document.body.getBoundingClientRect();\\n        this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;\\n        this._scrollbarWidth = this._getScrollbarWidth();\\n      };\\n\\n      _proto._setScrollbar = function _setScrollbar() {\\n        var _this9 = this;\\n\\n        if (this._isBodyOverflowing) {\\n          // Note: DOMNode.style.paddingRight returns the actual value or '' if not set\\n          //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set\\n          var fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT));\\n          var stickyContent = [].slice.call(document.querySelectorAll(Selector.STICKY_CONTENT)); // Adjust fixed content padding\\n\\n          $$$1(fixedContent).each(function (index, element) {\\n            var actualPadding = element.style.paddingRight;\\n            var calculatedPadding = $$$1(element).css('padding-right');\\n            $$$1(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this9._scrollbarWidth + \\\"px\\\");\\n          }); // Adjust sticky content margin\\n\\n          $$$1(stickyContent).each(function (index, element) {\\n            var actualMargin = element.style.marginRight;\\n            var calculatedMargin = $$$1(element).css('margin-right');\\n            $$$1(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this9._scrollbarWidth + \\\"px\\\");\\n          }); // Adjust body padding\\n\\n          var actualPadding = document.body.style.paddingRight;\\n          var calculatedPadding = $$$1(document.body).css('padding-right');\\n          $$$1(document.body).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + \\\"px\\\");\\n        }\\n      };\\n\\n      _proto._resetScrollbar = function _resetScrollbar() {\\n        // Restore fixed content padding\\n        var fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT));\\n        $$$1(fixedContent).each(function (index, element) {\\n          var padding = $$$1(element).data('padding-right');\\n          $$$1(element).removeData('padding-right');\\n          element.style.paddingRight = padding ? padding : '';\\n        }); // Restore sticky content\\n\\n        var elements = [].slice.call(document.querySelectorAll(\\\"\\\" + Selector.STICKY_CONTENT));\\n        $$$1(elements).each(function (index, element) {\\n          var margin = $$$1(element).data('margin-right');\\n\\n          if (typeof margin !== 'undefined') {\\n            $$$1(element).css('margin-right', margin).removeData('margin-right');\\n          }\\n        }); // Restore body padding\\n\\n        var padding = $$$1(document.body).data('padding-right');\\n        $$$1(document.body).removeData('padding-right');\\n        document.body.style.paddingRight = padding ? padding : '';\\n      };\\n\\n      _proto._getScrollbarWidth = function _getScrollbarWidth() {\\n        // thx d.walsh\\n        var scrollDiv = document.createElement('div');\\n        scrollDiv.className = ClassName.SCROLLBAR_MEASURER;\\n        document.body.appendChild(scrollDiv);\\n        var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\\n        document.body.removeChild(scrollDiv);\\n        return scrollbarWidth;\\n      }; // Static\\n\\n\\n      Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {\\n        return this.each(function () {\\n          var data = $$$1(this).data(DATA_KEY);\\n\\n          var _config = _objectSpread({}, Default, $$$1(this).data(), (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config ? config : {});\\n\\n          if (!data) {\\n            data = new Modal(this, _config);\\n            $$$1(this).data(DATA_KEY, data);\\n          }\\n\\n          if (typeof config === 'string') {\\n            if (typeof data[config] === 'undefined') {\\n              throw new TypeError(\\\"No method named \\\\\\\"\\\" + config + \\\"\\\\\\\"\\\");\\n            }\\n\\n            data[config](relatedTarget);\\n          } else if (_config.show) {\\n            data.show(relatedTarget);\\n          }\\n        });\\n      };\\n\\n      _createClass(Modal, null, [{\\n        key: \\\"VERSION\\\",\\n        get: function get() {\\n          return VERSION;\\n        }\\n      }, {\\n        key: \\\"Default\\\",\\n        get: function get() {\\n          return Default;\\n        }\\n      }]);\\n\\n      return Modal;\\n    }();\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Data Api implementation\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\\n      var _this10 = this;\\n\\n      var target;\\n      var selector = Util.getSelectorFromElement(this);\\n\\n      if (selector) {\\n        target = document.querySelector(selector);\\n      }\\n\\n      var config = $$$1(target).data(DATA_KEY) ? 'toggle' : _objectSpread({}, $$$1(target).data(), $$$1(this).data());\\n\\n      if (this.tagName === 'A' || this.tagName === 'AREA') {\\n        event.preventDefault();\\n      }\\n\\n      var $target = $$$1(target).one(Event.SHOW, function (showEvent) {\\n        if (showEvent.isDefaultPrevented()) {\\n          // Only register focus restorer if modal will actually get shown\\n          return;\\n        }\\n\\n        $target.one(Event.HIDDEN, function () {\\n          if ($$$1(_this10).is(':visible')) {\\n            _this10.focus();\\n          }\\n        });\\n      });\\n\\n      Modal._jQueryInterface.call($$$1(target), config, this);\\n    });\\n    /**\\n     * ------------------------------------------------------------------------\\n     * jQuery\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1.fn[NAME] = Modal._jQueryInterface;\\n    $$$1.fn[NAME].Constructor = Modal;\\n\\n    $$$1.fn[NAME].noConflict = function () {\\n      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;\\n      return Modal._jQueryInterface;\\n    };\\n\\n    return Modal;\\n  }($);\\n\\n  /**\\n   * --------------------------------------------------------------------------\\n   * Bootstrap (v4.1.3): tooltip.js\\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n   * --------------------------------------------------------------------------\\n   */\\n\\n  var Tooltip = function ($$$1) {\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Constants\\n     * ------------------------------------------------------------------------\\n     */\\n    var NAME = 'tooltip';\\n    var VERSION = '4.1.3';\\n    var DATA_KEY = 'bs.tooltip';\\n    var EVENT_KEY = \\\".\\\" + DATA_KEY;\\n    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];\\n    var CLASS_PREFIX = 'bs-tooltip';\\n    var BSCLS_PREFIX_REGEX = new RegExp(\\\"(^|\\\\\\\\s)\\\" + CLASS_PREFIX + \\\"\\\\\\\\S+\\\", 'g');\\n    var DefaultType = {\\n      animation: 'boolean',\\n      template: 'string',\\n      title: '(string|element|function)',\\n      trigger: 'string',\\n      delay: '(number|object)',\\n      html: 'boolean',\\n      selector: '(string|boolean)',\\n      placement: '(string|function)',\\n      offset: '(number|string)',\\n      container: '(string|element|boolean)',\\n      fallbackPlacement: '(string|array)',\\n      boundary: '(string|element)'\\n    };\\n    var AttachmentMap = {\\n      AUTO: 'auto',\\n      TOP: 'top',\\n      RIGHT: 'right',\\n      BOTTOM: 'bottom',\\n      LEFT: 'left'\\n    };\\n    var Default = {\\n      animation: true,\\n      template: '<div class=\\\"tooltip\\\" role=\\\"tooltip\\\">' + '<div class=\\\"arrow\\\"></div>' + '<div class=\\\"tooltip-inner\\\"></div></div>',\\n      trigger: 'hover focus',\\n      title: '',\\n      delay: 0,\\n      html: false,\\n      selector: false,\\n      placement: 'top',\\n      offset: 0,\\n      container: false,\\n      fallbackPlacement: 'flip',\\n      boundary: 'scrollParent'\\n    };\\n    var HoverState = {\\n      SHOW: 'show',\\n      OUT: 'out'\\n    };\\n    var Event = {\\n      HIDE: \\\"hide\\\" + EVENT_KEY,\\n      HIDDEN: \\\"hidden\\\" + EVENT_KEY,\\n      SHOW: \\\"show\\\" + EVENT_KEY,\\n      SHOWN: \\\"shown\\\" + EVENT_KEY,\\n      INSERTED: \\\"inserted\\\" + EVENT_KEY,\\n      CLICK: \\\"click\\\" + EVENT_KEY,\\n      FOCUSIN: \\\"focusin\\\" + EVENT_KEY,\\n      FOCUSOUT: \\\"focusout\\\" + EVENT_KEY,\\n      MOUSEENTER: \\\"mouseenter\\\" + EVENT_KEY,\\n      MOUSELEAVE: \\\"mouseleave\\\" + EVENT_KEY\\n    };\\n    var ClassName = {\\n      FADE: 'fade',\\n      SHOW: 'show'\\n    };\\n    var Selector = {\\n      TOOLTIP: '.tooltip',\\n      TOOLTIP_INNER: '.tooltip-inner',\\n      ARROW: '.arrow'\\n    };\\n    var Trigger = {\\n      HOVER: 'hover',\\n      FOCUS: 'focus',\\n      CLICK: 'click',\\n      MANUAL: 'manual'\\n      /**\\n       * ------------------------------------------------------------------------\\n       * Class Definition\\n       * ------------------------------------------------------------------------\\n       */\\n\\n    };\\n\\n    var Tooltip =\\n    /*#__PURE__*/\\n    function () {\\n      function Tooltip(element, config) {\\n        /**\\n         * Check for Popper dependency\\n         * Popper - https://popper.js.org\\n         */\\n        if (typeof Popper === 'undefined') {\\n          throw new TypeError('Bootstrap tooltips require Popper.js (https://popper.js.org)');\\n        } // private\\n\\n\\n        this._isEnabled = true;\\n        this._timeout = 0;\\n        this._hoverState = '';\\n        this._activeTrigger = {};\\n        this._popper = null; // Protected\\n\\n        this.element = element;\\n        this.config = this._getConfig(config);\\n        this.tip = null;\\n\\n        this._setListeners();\\n      } // Getters\\n\\n\\n      var _proto = Tooltip.prototype;\\n\\n      // Public\\n      _proto.enable = function enable() {\\n        this._isEnabled = true;\\n      };\\n\\n      _proto.disable = function disable() {\\n        this._isEnabled = false;\\n      };\\n\\n      _proto.toggleEnabled = function toggleEnabled() {\\n        this._isEnabled = !this._isEnabled;\\n      };\\n\\n      _proto.toggle = function toggle(event) {\\n        if (!this._isEnabled) {\\n          return;\\n        }\\n\\n        if (event) {\\n          var dataKey = this.constructor.DATA_KEY;\\n          var context = $$$1(event.currentTarget).data(dataKey);\\n\\n          if (!context) {\\n            context = new this.constructor(event.currentTarget, this._getDelegateConfig());\\n            $$$1(event.currentTarget).data(dataKey, context);\\n          }\\n\\n          context._activeTrigger.click = !context._activeTrigger.click;\\n\\n          if (context._isWithActiveTrigger()) {\\n            context._enter(null, context);\\n          } else {\\n            context._leave(null, context);\\n          }\\n        } else {\\n          if ($$$1(this.getTipElement()).hasClass(ClassName.SHOW)) {\\n            this._leave(null, this);\\n\\n            return;\\n          }\\n\\n          this._enter(null, this);\\n        }\\n      };\\n\\n      _proto.dispose = function dispose() {\\n        clearTimeout(this._timeout);\\n        $$$1.removeData(this.element, this.constructor.DATA_KEY);\\n        $$$1(this.element).off(this.constructor.EVENT_KEY);\\n        $$$1(this.element).closest('.modal').off('hide.bs.modal');\\n\\n        if (this.tip) {\\n          $$$1(this.tip).remove();\\n        }\\n\\n        this._isEnabled = null;\\n        this._timeout = null;\\n        this._hoverState = null;\\n        this._activeTrigger = null;\\n\\n        if (this._popper !== null) {\\n          this._popper.destroy();\\n        }\\n\\n        this._popper = null;\\n        this.element = null;\\n        this.config = null;\\n        this.tip = null;\\n      };\\n\\n      _proto.show = function show() {\\n        var _this = this;\\n\\n        if ($$$1(this.element).css('display') === 'none') {\\n          throw new Error('Please use show on visible elements');\\n        }\\n\\n        var showEvent = $$$1.Event(this.constructor.Event.SHOW);\\n\\n        if (this.isWithContent() && this._isEnabled) {\\n          $$$1(this.element).trigger(showEvent);\\n          var isInTheDom = $$$1.contains(this.element.ownerDocument.documentElement, this.element);\\n\\n          if (showEvent.isDefaultPrevented() || !isInTheDom) {\\n            return;\\n          }\\n\\n          var tip = this.getTipElement();\\n          var tipId = Util.getUID(this.constructor.NAME);\\n          tip.setAttribute('id', tipId);\\n          this.element.setAttribute('aria-describedby', tipId);\\n          this.setContent();\\n\\n          if (this.config.animation) {\\n            $$$1(tip).addClass(ClassName.FADE);\\n          }\\n\\n          var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;\\n\\n          var attachment = this._getAttachment(placement);\\n\\n          this.addAttachmentClass(attachment);\\n          var container = this.config.container === false ? document.body : $$$1(document).find(this.config.container);\\n          $$$1(tip).data(this.constructor.DATA_KEY, this);\\n\\n          if (!$$$1.contains(this.element.ownerDocument.documentElement, this.tip)) {\\n            $$$1(tip).appendTo(container);\\n          }\\n\\n          $$$1(this.element).trigger(this.constructor.Event.INSERTED);\\n          this._popper = new Popper(this.element, tip, {\\n            placement: attachment,\\n            modifiers: {\\n              offset: {\\n                offset: this.config.offset\\n              },\\n              flip: {\\n                behavior: this.config.fallbackPlacement\\n              },\\n              arrow: {\\n                element: Selector.ARROW\\n              },\\n              preventOverflow: {\\n                boundariesElement: this.config.boundary\\n              }\\n            },\\n            onCreate: function onCreate(data) {\\n              if (data.originalPlacement !== data.placement) {\\n                _this._handlePopperPlacementChange(data);\\n              }\\n            },\\n            onUpdate: function onUpdate(data) {\\n              _this._handlePopperPlacementChange(data);\\n            }\\n          });\\n          $$$1(tip).addClass(ClassName.SHOW); // If this is a touch-enabled device we add extra\\n          // empty mouseover listeners to the body's immediate children;\\n          // only needed because of broken event delegation on iOS\\n          // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\\n\\n          if ('ontouchstart' in document.documentElement) {\\n            $$$1(document.body).children().on('mouseover', null, $$$1.noop);\\n          }\\n\\n          var complete = function complete() {\\n            if (_this.config.animation) {\\n              _this._fixTransition();\\n            }\\n\\n            var prevHoverState = _this._hoverState;\\n            _this._hoverState = null;\\n            $$$1(_this.element).trigger(_this.constructor.Event.SHOWN);\\n\\n            if (prevHoverState === HoverState.OUT) {\\n              _this._leave(null, _this);\\n            }\\n          };\\n\\n          if ($$$1(this.tip).hasClass(ClassName.FADE)) {\\n            var transitionDuration = Util.getTransitionDurationFromElement(this.tip);\\n            $$$1(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\\n          } else {\\n            complete();\\n          }\\n        }\\n      };\\n\\n      _proto.hide = function hide(callback) {\\n        var _this2 = this;\\n\\n        var tip = this.getTipElement();\\n        var hideEvent = $$$1.Event(this.constructor.Event.HIDE);\\n\\n        var complete = function complete() {\\n          if (_this2._hoverState !== HoverState.SHOW && tip.parentNode) {\\n            tip.parentNode.removeChild(tip);\\n          }\\n\\n          _this2._cleanTipClass();\\n\\n          _this2.element.removeAttribute('aria-describedby');\\n\\n          $$$1(_this2.element).trigger(_this2.constructor.Event.HIDDEN);\\n\\n          if (_this2._popper !== null) {\\n            _this2._popper.destroy();\\n          }\\n\\n          if (callback) {\\n            callback();\\n          }\\n        };\\n\\n        $$$1(this.element).trigger(hideEvent);\\n\\n        if (hideEvent.isDefaultPrevented()) {\\n          return;\\n        }\\n\\n        $$$1(tip).removeClass(ClassName.SHOW); // If this is a touch-enabled device we remove the extra\\n        // empty mouseover listeners we added for iOS support\\n\\n        if ('ontouchstart' in document.documentElement) {\\n          $$$1(document.body).children().off('mouseover', null, $$$1.noop);\\n        }\\n\\n        this._activeTrigger[Trigger.CLICK] = false;\\n        this._activeTrigger[Trigger.FOCUS] = false;\\n        this._activeTrigger[Trigger.HOVER] = false;\\n\\n        if ($$$1(this.tip).hasClass(ClassName.FADE)) {\\n          var transitionDuration = Util.getTransitionDurationFromElement(tip);\\n          $$$1(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\\n        } else {\\n          complete();\\n        }\\n\\n        this._hoverState = '';\\n      };\\n\\n      _proto.update = function update() {\\n        if (this._popper !== null) {\\n          this._popper.scheduleUpdate();\\n        }\\n      }; // Protected\\n\\n\\n      _proto.isWithContent = function isWithContent() {\\n        return Boolean(this.getTitle());\\n      };\\n\\n      _proto.addAttachmentClass = function addAttachmentClass(attachment) {\\n        $$$1(this.getTipElement()).addClass(CLASS_PREFIX + \\\"-\\\" + attachment);\\n      };\\n\\n      _proto.getTipElement = function getTipElement() {\\n        this.tip = this.tip || $$$1(this.config.template)[0];\\n        return this.tip;\\n      };\\n\\n      _proto.setContent = function setContent() {\\n        var tip = this.getTipElement();\\n        this.setElementContent($$$1(tip.querySelectorAll(Selector.TOOLTIP_INNER)), this.getTitle());\\n        $$$1(tip).removeClass(ClassName.FADE + \\\" \\\" + ClassName.SHOW);\\n      };\\n\\n      _proto.setElementContent = function setElementContent($element, content) {\\n        var html = this.config.html;\\n\\n        if ((typeof content === 'undefined' ? 'undefined' : _typeof(content)) === 'object' && (content.nodeType || content.jquery)) {\\n          // Content is a DOM node or a jQuery\\n          if (html) {\\n            if (!$$$1(content).parent().is($element)) {\\n              $element.empty().append(content);\\n            }\\n          } else {\\n            $element.text($$$1(content).text());\\n          }\\n        } else {\\n          $element[html ? 'html' : 'text'](content);\\n        }\\n      };\\n\\n      _proto.getTitle = function getTitle() {\\n        var title = this.element.getAttribute('data-original-title');\\n\\n        if (!title) {\\n          title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;\\n        }\\n\\n        return title;\\n      }; // Private\\n\\n\\n      _proto._getAttachment = function _getAttachment(placement) {\\n        return AttachmentMap[placement.toUpperCase()];\\n      };\\n\\n      _proto._setListeners = function _setListeners() {\\n        var _this3 = this;\\n\\n        var triggers = this.config.trigger.split(' ');\\n        triggers.forEach(function (trigger) {\\n          if (trigger === 'click') {\\n            $$$1(_this3.element).on(_this3.constructor.Event.CLICK, _this3.config.selector, function (event) {\\n              return _this3.toggle(event);\\n            });\\n          } else if (trigger !== Trigger.MANUAL) {\\n            var eventIn = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSEENTER : _this3.constructor.Event.FOCUSIN;\\n            var eventOut = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSELEAVE : _this3.constructor.Event.FOCUSOUT;\\n            $$$1(_this3.element).on(eventIn, _this3.config.selector, function (event) {\\n              return _this3._enter(event);\\n            }).on(eventOut, _this3.config.selector, function (event) {\\n              return _this3._leave(event);\\n            });\\n          }\\n\\n          $$$1(_this3.element).closest('.modal').on('hide.bs.modal', function () {\\n            return _this3.hide();\\n          });\\n        });\\n\\n        if (this.config.selector) {\\n          this.config = _objectSpread({}, this.config, {\\n            trigger: 'manual',\\n            selector: ''\\n          });\\n        } else {\\n          this._fixTitle();\\n        }\\n      };\\n\\n      _proto._fixTitle = function _fixTitle() {\\n        var titleType = _typeof(this.element.getAttribute('data-original-title'));\\n\\n        if (this.element.getAttribute('title') || titleType !== 'string') {\\n          this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');\\n          this.element.setAttribute('title', '');\\n        }\\n      };\\n\\n      _proto._enter = function _enter(event, context) {\\n        var dataKey = this.constructor.DATA_KEY;\\n        context = context || $$$1(event.currentTarget).data(dataKey);\\n\\n        if (!context) {\\n          context = new this.constructor(event.currentTarget, this._getDelegateConfig());\\n          $$$1(event.currentTarget).data(dataKey, context);\\n        }\\n\\n        if (event) {\\n          context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;\\n        }\\n\\n        if ($$$1(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {\\n          context._hoverState = HoverState.SHOW;\\n          return;\\n        }\\n\\n        clearTimeout(context._timeout);\\n        context._hoverState = HoverState.SHOW;\\n\\n        if (!context.config.delay || !context.config.delay.show) {\\n          context.show();\\n          return;\\n        }\\n\\n        context._timeout = setTimeout(function () {\\n          if (context._hoverState === HoverState.SHOW) {\\n            context.show();\\n          }\\n        }, context.config.delay.show);\\n      };\\n\\n      _proto._leave = function _leave(event, context) {\\n        var dataKey = this.constructor.DATA_KEY;\\n        context = context || $$$1(event.currentTarget).data(dataKey);\\n\\n        if (!context) {\\n          context = new this.constructor(event.currentTarget, this._getDelegateConfig());\\n          $$$1(event.currentTarget).data(dataKey, context);\\n        }\\n\\n        if (event) {\\n          context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;\\n        }\\n\\n        if (context._isWithActiveTrigger()) {\\n          return;\\n        }\\n\\n        clearTimeout(context._timeout);\\n        context._hoverState = HoverState.OUT;\\n\\n        if (!context.config.delay || !context.config.delay.hide) {\\n          context.hide();\\n          return;\\n        }\\n\\n        context._timeout = setTimeout(function () {\\n          if (context._hoverState === HoverState.OUT) {\\n            context.hide();\\n          }\\n        }, context.config.delay.hide);\\n      };\\n\\n      _proto._isWithActiveTrigger = function _isWithActiveTrigger() {\\n        for (var trigger in this._activeTrigger) {\\n          if (this._activeTrigger[trigger]) {\\n            return true;\\n          }\\n        }\\n\\n        return false;\\n      };\\n\\n      _proto._getConfig = function _getConfig(config) {\\n        config = _objectSpread({}, this.constructor.Default, $$$1(this.element).data(), (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config ? config : {});\\n\\n        if (typeof config.delay === 'number') {\\n          config.delay = {\\n            show: config.delay,\\n            hide: config.delay\\n          };\\n        }\\n\\n        if (typeof config.title === 'number') {\\n          config.title = config.title.toString();\\n        }\\n\\n        if (typeof config.content === 'number') {\\n          config.content = config.content.toString();\\n        }\\n\\n        Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);\\n        return config;\\n      };\\n\\n      _proto._getDelegateConfig = function _getDelegateConfig() {\\n        var config = {};\\n\\n        if (this.config) {\\n          for (var key in this.config) {\\n            if (this.constructor.Default[key] !== this.config[key]) {\\n              config[key] = this.config[key];\\n            }\\n          }\\n        }\\n\\n        return config;\\n      };\\n\\n      _proto._cleanTipClass = function _cleanTipClass() {\\n        var $tip = $$$1(this.getTipElement());\\n        var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);\\n\\n        if (tabClass !== null && tabClass.length) {\\n          $tip.removeClass(tabClass.join(''));\\n        }\\n      };\\n\\n      _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(popperData) {\\n        var popperInstance = popperData.instance;\\n        this.tip = popperInstance.popper;\\n\\n        this._cleanTipClass();\\n\\n        this.addAttachmentClass(this._getAttachment(popperData.placement));\\n      };\\n\\n      _proto._fixTransition = function _fixTransition() {\\n        var tip = this.getTipElement();\\n        var initConfigAnimation = this.config.animation;\\n\\n        if (tip.getAttribute('x-placement') !== null) {\\n          return;\\n        }\\n\\n        $$$1(tip).removeClass(ClassName.FADE);\\n        this.config.animation = false;\\n        this.hide();\\n        this.show();\\n        this.config.animation = initConfigAnimation;\\n      }; // Static\\n\\n\\n      Tooltip._jQueryInterface = function _jQueryInterface(config) {\\n        return this.each(function () {\\n          var data = $$$1(this).data(DATA_KEY);\\n\\n          var _config = (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config;\\n\\n          if (!data && /dispose|hide/.test(config)) {\\n            return;\\n          }\\n\\n          if (!data) {\\n            data = new Tooltip(this, _config);\\n            $$$1(this).data(DATA_KEY, data);\\n          }\\n\\n          if (typeof config === 'string') {\\n            if (typeof data[config] === 'undefined') {\\n              throw new TypeError(\\\"No method named \\\\\\\"\\\" + config + \\\"\\\\\\\"\\\");\\n            }\\n\\n            data[config]();\\n          }\\n        });\\n      };\\n\\n      _createClass(Tooltip, null, [{\\n        key: \\\"VERSION\\\",\\n        get: function get() {\\n          return VERSION;\\n        }\\n      }, {\\n        key: \\\"Default\\\",\\n        get: function get() {\\n          return Default;\\n        }\\n      }, {\\n        key: \\\"NAME\\\",\\n        get: function get() {\\n          return NAME;\\n        }\\n      }, {\\n        key: \\\"DATA_KEY\\\",\\n        get: function get() {\\n          return DATA_KEY;\\n        }\\n      }, {\\n        key: \\\"Event\\\",\\n        get: function get() {\\n          return Event;\\n        }\\n      }, {\\n        key: \\\"EVENT_KEY\\\",\\n        get: function get() {\\n          return EVENT_KEY;\\n        }\\n      }, {\\n        key: \\\"DefaultType\\\",\\n        get: function get() {\\n          return DefaultType;\\n        }\\n      }]);\\n\\n      return Tooltip;\\n    }();\\n    /**\\n     * ------------------------------------------------------------------------\\n     * jQuery\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1.fn[NAME] = Tooltip._jQueryInterface;\\n    $$$1.fn[NAME].Constructor = Tooltip;\\n\\n    $$$1.fn[NAME].noConflict = function () {\\n      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;\\n      return Tooltip._jQueryInterface;\\n    };\\n\\n    return Tooltip;\\n  }($, Popper);\\n\\n  /**\\n   * --------------------------------------------------------------------------\\n   * Bootstrap (v4.1.3): popover.js\\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n   * --------------------------------------------------------------------------\\n   */\\n\\n  var Popover = function ($$$1) {\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Constants\\n     * ------------------------------------------------------------------------\\n     */\\n    var NAME = 'popover';\\n    var VERSION = '4.1.3';\\n    var DATA_KEY = 'bs.popover';\\n    var EVENT_KEY = \\\".\\\" + DATA_KEY;\\n    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];\\n    var CLASS_PREFIX = 'bs-popover';\\n    var BSCLS_PREFIX_REGEX = new RegExp(\\\"(^|\\\\\\\\s)\\\" + CLASS_PREFIX + \\\"\\\\\\\\S+\\\", 'g');\\n\\n    var Default = _objectSpread({}, Tooltip.Default, {\\n      placement: 'right',\\n      trigger: 'click',\\n      content: '',\\n      template: '<div class=\\\"popover\\\" role=\\\"tooltip\\\">' + '<div class=\\\"arrow\\\"></div>' + '<h3 class=\\\"popover-header\\\"></h3>' + '<div class=\\\"popover-body\\\"></div></div>'\\n    });\\n\\n    var DefaultType = _objectSpread({}, Tooltip.DefaultType, {\\n      content: '(string|element|function)'\\n    });\\n\\n    var ClassName = {\\n      FADE: 'fade',\\n      SHOW: 'show'\\n    };\\n    var Selector = {\\n      TITLE: '.popover-header',\\n      CONTENT: '.popover-body'\\n    };\\n    var Event = {\\n      HIDE: \\\"hide\\\" + EVENT_KEY,\\n      HIDDEN: \\\"hidden\\\" + EVENT_KEY,\\n      SHOW: \\\"show\\\" + EVENT_KEY,\\n      SHOWN: \\\"shown\\\" + EVENT_KEY,\\n      INSERTED: \\\"inserted\\\" + EVENT_KEY,\\n      CLICK: \\\"click\\\" + EVENT_KEY,\\n      FOCUSIN: \\\"focusin\\\" + EVENT_KEY,\\n      FOCUSOUT: \\\"focusout\\\" + EVENT_KEY,\\n      MOUSEENTER: \\\"mouseenter\\\" + EVENT_KEY,\\n      MOUSELEAVE: \\\"mouseleave\\\" + EVENT_KEY\\n      /**\\n       * ------------------------------------------------------------------------\\n       * Class Definition\\n       * ------------------------------------------------------------------------\\n       */\\n\\n    };\\n\\n    var Popover =\\n    /*#__PURE__*/\\n    function (_Tooltip) {\\n      _inheritsLoose(Popover, _Tooltip);\\n\\n      function Popover() {\\n        return _Tooltip.apply(this, arguments) || this;\\n      }\\n\\n      var _proto = Popover.prototype;\\n\\n      // Overrides\\n      _proto.isWithContent = function isWithContent() {\\n        return this.getTitle() || this._getContent();\\n      };\\n\\n      _proto.addAttachmentClass = function addAttachmentClass(attachment) {\\n        $$$1(this.getTipElement()).addClass(CLASS_PREFIX + \\\"-\\\" + attachment);\\n      };\\n\\n      _proto.getTipElement = function getTipElement() {\\n        this.tip = this.tip || $$$1(this.config.template)[0];\\n        return this.tip;\\n      };\\n\\n      _proto.setContent = function setContent() {\\n        var $tip = $$$1(this.getTipElement()); // We use append for html objects to maintain js events\\n\\n        this.setElementContent($tip.find(Selector.TITLE), this.getTitle());\\n\\n        var content = this._getContent();\\n\\n        if (typeof content === 'function') {\\n          content = content.call(this.element);\\n        }\\n\\n        this.setElementContent($tip.find(Selector.CONTENT), content);\\n        $tip.removeClass(ClassName.FADE + \\\" \\\" + ClassName.SHOW);\\n      }; // Private\\n\\n\\n      _proto._getContent = function _getContent() {\\n        return this.element.getAttribute('data-content') || this.config.content;\\n      };\\n\\n      _proto._cleanTipClass = function _cleanTipClass() {\\n        var $tip = $$$1(this.getTipElement());\\n        var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);\\n\\n        if (tabClass !== null && tabClass.length > 0) {\\n          $tip.removeClass(tabClass.join(''));\\n        }\\n      }; // Static\\n\\n\\n      Popover._jQueryInterface = function _jQueryInterface(config) {\\n        return this.each(function () {\\n          var data = $$$1(this).data(DATA_KEY);\\n\\n          var _config = (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' ? config : null;\\n\\n          if (!data && /destroy|hide/.test(config)) {\\n            return;\\n          }\\n\\n          if (!data) {\\n            data = new Popover(this, _config);\\n            $$$1(this).data(DATA_KEY, data);\\n          }\\n\\n          if (typeof config === 'string') {\\n            if (typeof data[config] === 'undefined') {\\n              throw new TypeError(\\\"No method named \\\\\\\"\\\" + config + \\\"\\\\\\\"\\\");\\n            }\\n\\n            data[config]();\\n          }\\n        });\\n      };\\n\\n      _createClass(Popover, null, [{\\n        key: \\\"VERSION\\\",\\n        // Getters\\n        get: function get() {\\n          return VERSION;\\n        }\\n      }, {\\n        key: \\\"Default\\\",\\n        get: function get() {\\n          return Default;\\n        }\\n      }, {\\n        key: \\\"NAME\\\",\\n        get: function get() {\\n          return NAME;\\n        }\\n      }, {\\n        key: \\\"DATA_KEY\\\",\\n        get: function get() {\\n          return DATA_KEY;\\n        }\\n      }, {\\n        key: \\\"Event\\\",\\n        get: function get() {\\n          return Event;\\n        }\\n      }, {\\n        key: \\\"EVENT_KEY\\\",\\n        get: function get() {\\n          return EVENT_KEY;\\n        }\\n      }, {\\n        key: \\\"DefaultType\\\",\\n        get: function get() {\\n          return DefaultType;\\n        }\\n      }]);\\n\\n      return Popover;\\n    }(Tooltip);\\n    /**\\n     * ------------------------------------------------------------------------\\n     * jQuery\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1.fn[NAME] = Popover._jQueryInterface;\\n    $$$1.fn[NAME].Constructor = Popover;\\n\\n    $$$1.fn[NAME].noConflict = function () {\\n      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;\\n      return Popover._jQueryInterface;\\n    };\\n\\n    return Popover;\\n  }($);\\n\\n  /**\\n   * --------------------------------------------------------------------------\\n   * Bootstrap (v4.1.3): scrollspy.js\\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n   * --------------------------------------------------------------------------\\n   */\\n\\n  var ScrollSpy = function ($$$1) {\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Constants\\n     * ------------------------------------------------------------------------\\n     */\\n    var NAME = 'scrollspy';\\n    var VERSION = '4.1.3';\\n    var DATA_KEY = 'bs.scrollspy';\\n    var EVENT_KEY = \\\".\\\" + DATA_KEY;\\n    var DATA_API_KEY = '.data-api';\\n    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];\\n    var Default = {\\n      offset: 10,\\n      method: 'auto',\\n      target: ''\\n    };\\n    var DefaultType = {\\n      offset: 'number',\\n      method: 'string',\\n      target: '(string|element)'\\n    };\\n    var Event = {\\n      ACTIVATE: \\\"activate\\\" + EVENT_KEY,\\n      SCROLL: \\\"scroll\\\" + EVENT_KEY,\\n      LOAD_DATA_API: \\\"load\\\" + EVENT_KEY + DATA_API_KEY\\n    };\\n    var ClassName = {\\n      DROPDOWN_ITEM: 'dropdown-item',\\n      DROPDOWN_MENU: 'dropdown-menu',\\n      ACTIVE: 'active'\\n    };\\n    var Selector = {\\n      DATA_SPY: '[data-spy=\\\"scroll\\\"]',\\n      ACTIVE: '.active',\\n      NAV_LIST_GROUP: '.nav, .list-group',\\n      NAV_LINKS: '.nav-link',\\n      NAV_ITEMS: '.nav-item',\\n      LIST_ITEMS: '.list-group-item',\\n      DROPDOWN: '.dropdown',\\n      DROPDOWN_ITEMS: '.dropdown-item',\\n      DROPDOWN_TOGGLE: '.dropdown-toggle'\\n    };\\n    var OffsetMethod = {\\n      OFFSET: 'offset',\\n      POSITION: 'position'\\n      /**\\n       * ------------------------------------------------------------------------\\n       * Class Definition\\n       * ------------------------------------------------------------------------\\n       */\\n\\n    };\\n\\n    var ScrollSpy =\\n    /*#__PURE__*/\\n    function () {\\n      function ScrollSpy(element, config) {\\n        var _this = this;\\n\\n        this._element = element;\\n        this._scrollElement = element.tagName === 'BODY' ? window : element;\\n        this._config = this._getConfig(config);\\n        this._selector = this._config.target + \\\" \\\" + Selector.NAV_LINKS + \\\",\\\" + (this._config.target + \\\" \\\" + Selector.LIST_ITEMS + \\\",\\\") + (this._config.target + \\\" \\\" + Selector.DROPDOWN_ITEMS);\\n        this._offsets = [];\\n        this._targets = [];\\n        this._activeTarget = null;\\n        this._scrollHeight = 0;\\n        $$$1(this._scrollElement).on(Event.SCROLL, function (event) {\\n          return _this._process(event);\\n        });\\n        this.refresh();\\n\\n        this._process();\\n      } // Getters\\n\\n\\n      var _proto = ScrollSpy.prototype;\\n\\n      // Public\\n      _proto.refresh = function refresh() {\\n        var _this2 = this;\\n\\n        var autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;\\n        var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;\\n        var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;\\n        this._offsets = [];\\n        this._targets = [];\\n        this._scrollHeight = this._getScrollHeight();\\n        var targets = [].slice.call(document.querySelectorAll(this._selector));\\n        targets.map(function (element) {\\n          var target;\\n          var targetSelector = Util.getSelectorFromElement(element);\\n\\n          if (targetSelector) {\\n            target = document.querySelector(targetSelector);\\n          }\\n\\n          if (target) {\\n            var targetBCR = target.getBoundingClientRect();\\n\\n            if (targetBCR.width || targetBCR.height) {\\n              // TODO (fat): remove sketch reliance on jQuery position/offset\\n              return [$$$1(target)[offsetMethod]().top + offsetBase, targetSelector];\\n            }\\n          }\\n\\n          return null;\\n        }).filter(function (item) {\\n          return item;\\n        }).sort(function (a, b) {\\n          return a[0] - b[0];\\n        }).forEach(function (item) {\\n          _this2._offsets.push(item[0]);\\n\\n          _this2._targets.push(item[1]);\\n        });\\n      };\\n\\n      _proto.dispose = function dispose() {\\n        $$$1.removeData(this._element, DATA_KEY);\\n        $$$1(this._scrollElement).off(EVENT_KEY);\\n        this._element = null;\\n        this._scrollElement = null;\\n        this._config = null;\\n        this._selector = null;\\n        this._offsets = null;\\n        this._targets = null;\\n        this._activeTarget = null;\\n        this._scrollHeight = null;\\n      }; // Private\\n\\n\\n      _proto._getConfig = function _getConfig(config) {\\n        config = _objectSpread({}, Default, (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config ? config : {});\\n\\n        if (typeof config.target !== 'string') {\\n          var id = $$$1(config.target).attr('id');\\n\\n          if (!id) {\\n            id = Util.getUID(NAME);\\n            $$$1(config.target).attr('id', id);\\n          }\\n\\n          config.target = \\\"#\\\" + id;\\n        }\\n\\n        Util.typeCheckConfig(NAME, config, DefaultType);\\n        return config;\\n      };\\n\\n      _proto._getScrollTop = function _getScrollTop() {\\n        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\\n      };\\n\\n      _proto._getScrollHeight = function _getScrollHeight() {\\n        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\\n      };\\n\\n      _proto._getOffsetHeight = function _getOffsetHeight() {\\n        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\\n      };\\n\\n      _proto._process = function _process() {\\n        var scrollTop = this._getScrollTop() + this._config.offset;\\n\\n        var scrollHeight = this._getScrollHeight();\\n\\n        var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();\\n\\n        if (this._scrollHeight !== scrollHeight) {\\n          this.refresh();\\n        }\\n\\n        if (scrollTop >= maxScroll) {\\n          var target = this._targets[this._targets.length - 1];\\n\\n          if (this._activeTarget !== target) {\\n            this._activate(target);\\n          }\\n\\n          return;\\n        }\\n\\n        if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {\\n          this._activeTarget = null;\\n\\n          this._clear();\\n\\n          return;\\n        }\\n\\n        var offsetLength = this._offsets.length;\\n\\n        for (var i = offsetLength; i--;) {\\n          var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);\\n\\n          if (isActiveTarget) {\\n            this._activate(this._targets[i]);\\n          }\\n        }\\n      };\\n\\n      _proto._activate = function _activate(target) {\\n        this._activeTarget = target;\\n\\n        this._clear();\\n\\n        var queries = this._selector.split(','); // eslint-disable-next-line arrow-body-style\\n\\n\\n        queries = queries.map(function (selector) {\\n          return selector + \\\"[data-target=\\\\\\\"\\\" + target + \\\"\\\\\\\"],\\\" + (selector + \\\"[href=\\\\\\\"\\\" + target + \\\"\\\\\\\"]\\\");\\n        });\\n        var $link = $$$1([].slice.call(document.querySelectorAll(queries.join(','))));\\n\\n        if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {\\n          $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);\\n          $link.addClass(ClassName.ACTIVE);\\n        } else {\\n          // Set triggered link as active\\n          $link.addClass(ClassName.ACTIVE); // Set triggered links parents as active\\n          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\\n\\n          $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_LINKS + \\\", \\\" + Selector.LIST_ITEMS).addClass(ClassName.ACTIVE); // Handle special case when .nav-link is inside .nav-item\\n\\n          $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);\\n        }\\n\\n        $$$1(this._scrollElement).trigger(Event.ACTIVATE, {\\n          relatedTarget: target\\n        });\\n      };\\n\\n      _proto._clear = function _clear() {\\n        var nodes = [].slice.call(document.querySelectorAll(this._selector));\\n        $$$1(nodes).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);\\n      }; // Static\\n\\n\\n      ScrollSpy._jQueryInterface = function _jQueryInterface(config) {\\n        return this.each(function () {\\n          var data = $$$1(this).data(DATA_KEY);\\n\\n          var _config = (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config;\\n\\n          if (!data) {\\n            data = new ScrollSpy(this, _config);\\n            $$$1(this).data(DATA_KEY, data);\\n          }\\n\\n          if (typeof config === 'string') {\\n            if (typeof data[config] === 'undefined') {\\n              throw new TypeError(\\\"No method named \\\\\\\"\\\" + config + \\\"\\\\\\\"\\\");\\n            }\\n\\n            data[config]();\\n          }\\n        });\\n      };\\n\\n      _createClass(ScrollSpy, null, [{\\n        key: \\\"VERSION\\\",\\n        get: function get() {\\n          return VERSION;\\n        }\\n      }, {\\n        key: \\\"Default\\\",\\n        get: function get() {\\n          return Default;\\n        }\\n      }]);\\n\\n      return ScrollSpy;\\n    }();\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Data Api implementation\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1(window).on(Event.LOAD_DATA_API, function () {\\n      var scrollSpys = [].slice.call(document.querySelectorAll(Selector.DATA_SPY));\\n      var scrollSpysLength = scrollSpys.length;\\n\\n      for (var i = scrollSpysLength; i--;) {\\n        var $spy = $$$1(scrollSpys[i]);\\n\\n        ScrollSpy._jQueryInterface.call($spy, $spy.data());\\n      }\\n    });\\n    /**\\n     * ------------------------------------------------------------------------\\n     * jQuery\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1.fn[NAME] = ScrollSpy._jQueryInterface;\\n    $$$1.fn[NAME].Constructor = ScrollSpy;\\n\\n    $$$1.fn[NAME].noConflict = function () {\\n      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;\\n      return ScrollSpy._jQueryInterface;\\n    };\\n\\n    return ScrollSpy;\\n  }($);\\n\\n  /**\\n   * --------------------------------------------------------------------------\\n   * Bootstrap (v4.1.3): tab.js\\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n   * --------------------------------------------------------------------------\\n   */\\n\\n  var Tab = function ($$$1) {\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Constants\\n     * ------------------------------------------------------------------------\\n     */\\n    var NAME = 'tab';\\n    var VERSION = '4.1.3';\\n    var DATA_KEY = 'bs.tab';\\n    var EVENT_KEY = \\\".\\\" + DATA_KEY;\\n    var DATA_API_KEY = '.data-api';\\n    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];\\n    var Event = {\\n      HIDE: \\\"hide\\\" + EVENT_KEY,\\n      HIDDEN: \\\"hidden\\\" + EVENT_KEY,\\n      SHOW: \\\"show\\\" + EVENT_KEY,\\n      SHOWN: \\\"shown\\\" + EVENT_KEY,\\n      CLICK_DATA_API: \\\"click\\\" + EVENT_KEY + DATA_API_KEY\\n    };\\n    var ClassName = {\\n      DROPDOWN_MENU: 'dropdown-menu',\\n      ACTIVE: 'active',\\n      DISABLED: 'disabled',\\n      FADE: 'fade',\\n      SHOW: 'show'\\n    };\\n    var Selector = {\\n      DROPDOWN: '.dropdown',\\n      NAV_LIST_GROUP: '.nav, .list-group',\\n      ACTIVE: '.active',\\n      ACTIVE_UL: '> li > .active',\\n      DATA_TOGGLE: '[data-toggle=\\\"tab\\\"], [data-toggle=\\\"pill\\\"], [data-toggle=\\\"list\\\"]',\\n      DROPDOWN_TOGGLE: '.dropdown-toggle',\\n      DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'\\n      /**\\n       * ------------------------------------------------------------------------\\n       * Class Definition\\n       * ------------------------------------------------------------------------\\n       */\\n\\n    };\\n\\n    var Tab =\\n    /*#__PURE__*/\\n    function () {\\n      function Tab(element) {\\n        this._element = element;\\n      } // Getters\\n\\n\\n      var _proto = Tab.prototype;\\n\\n      // Public\\n      _proto.show = function show() {\\n        var _this = this;\\n\\n        if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $$$1(this._element).hasClass(ClassName.ACTIVE) || $$$1(this._element).hasClass(ClassName.DISABLED)) {\\n          return;\\n        }\\n\\n        var target;\\n        var previous;\\n        var listElement = $$$1(this._element).closest(Selector.NAV_LIST_GROUP)[0];\\n        var selector = Util.getSelectorFromElement(this._element);\\n\\n        if (listElement) {\\n          var itemSelector = listElement.nodeName === 'UL' ? Selector.ACTIVE_UL : Selector.ACTIVE;\\n          previous = $$$1.makeArray($$$1(listElement).find(itemSelector));\\n          previous = previous[previous.length - 1];\\n        }\\n\\n        var hideEvent = $$$1.Event(Event.HIDE, {\\n          relatedTarget: this._element\\n        });\\n        var showEvent = $$$1.Event(Event.SHOW, {\\n          relatedTarget: previous\\n        });\\n\\n        if (previous) {\\n          $$$1(previous).trigger(hideEvent);\\n        }\\n\\n        $$$1(this._element).trigger(showEvent);\\n\\n        if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {\\n          return;\\n        }\\n\\n        if (selector) {\\n          target = document.querySelector(selector);\\n        }\\n\\n        this._activate(this._element, listElement);\\n\\n        var complete = function complete() {\\n          var hiddenEvent = $$$1.Event(Event.HIDDEN, {\\n            relatedTarget: _this._element\\n          });\\n          var shownEvent = $$$1.Event(Event.SHOWN, {\\n            relatedTarget: previous\\n          });\\n          $$$1(previous).trigger(hiddenEvent);\\n          $$$1(_this._element).trigger(shownEvent);\\n        };\\n\\n        if (target) {\\n          this._activate(target, target.parentNode, complete);\\n        } else {\\n          complete();\\n        }\\n      };\\n\\n      _proto.dispose = function dispose() {\\n        $$$1.removeData(this._element, DATA_KEY);\\n        this._element = null;\\n      }; // Private\\n\\n\\n      _proto._activate = function _activate(element, container, callback) {\\n        var _this2 = this;\\n\\n        var activeElements;\\n\\n        if (container.nodeName === 'UL') {\\n          activeElements = $$$1(container).find(Selector.ACTIVE_UL);\\n        } else {\\n          activeElements = $$$1(container).children(Selector.ACTIVE);\\n        }\\n\\n        var active = activeElements[0];\\n        var isTransitioning = callback && active && $$$1(active).hasClass(ClassName.FADE);\\n\\n        var complete = function complete() {\\n          return _this2._transitionComplete(element, active, callback);\\n        };\\n\\n        if (active && isTransitioning) {\\n          var transitionDuration = Util.getTransitionDurationFromElement(active);\\n          $$$1(active).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\\n        } else {\\n          complete();\\n        }\\n      };\\n\\n      _proto._transitionComplete = function _transitionComplete(element, active, callback) {\\n        if (active) {\\n          $$$1(active).removeClass(ClassName.SHOW + \\\" \\\" + ClassName.ACTIVE);\\n          var dropdownChild = $$$1(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];\\n\\n          if (dropdownChild) {\\n            $$$1(dropdownChild).removeClass(ClassName.ACTIVE);\\n          }\\n\\n          if (active.getAttribute('role') === 'tab') {\\n            active.setAttribute('aria-selected', false);\\n          }\\n        }\\n\\n        $$$1(element).addClass(ClassName.ACTIVE);\\n\\n        if (element.getAttribute('role') === 'tab') {\\n          element.setAttribute('aria-selected', true);\\n        }\\n\\n        Util.reflow(element);\\n        $$$1(element).addClass(ClassName.SHOW);\\n\\n        if (element.parentNode && $$$1(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {\\n          var dropdownElement = $$$1(element).closest(Selector.DROPDOWN)[0];\\n\\n          if (dropdownElement) {\\n            var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(Selector.DROPDOWN_TOGGLE));\\n            $$$1(dropdownToggleList).addClass(ClassName.ACTIVE);\\n          }\\n\\n          element.setAttribute('aria-expanded', true);\\n        }\\n\\n        if (callback) {\\n          callback();\\n        }\\n      }; // Static\\n\\n\\n      Tab._jQueryInterface = function _jQueryInterface(config) {\\n        return this.each(function () {\\n          var $this = $$$1(this);\\n          var data = $this.data(DATA_KEY);\\n\\n          if (!data) {\\n            data = new Tab(this);\\n            $this.data(DATA_KEY, data);\\n          }\\n\\n          if (typeof config === 'string') {\\n            if (typeof data[config] === 'undefined') {\\n              throw new TypeError(\\\"No method named \\\\\\\"\\\" + config + \\\"\\\\\\\"\\\");\\n            }\\n\\n            data[config]();\\n          }\\n        });\\n      };\\n\\n      _createClass(Tab, null, [{\\n        key: \\\"VERSION\\\",\\n        get: function get() {\\n          return VERSION;\\n        }\\n      }]);\\n\\n      return Tab;\\n    }();\\n    /**\\n     * ------------------------------------------------------------------------\\n     * Data Api implementation\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\\n      event.preventDefault();\\n\\n      Tab._jQueryInterface.call($$$1(this), 'show');\\n    });\\n    /**\\n     * ------------------------------------------------------------------------\\n     * jQuery\\n     * ------------------------------------------------------------------------\\n     */\\n\\n    $$$1.fn[NAME] = Tab._jQueryInterface;\\n    $$$1.fn[NAME].Constructor = Tab;\\n\\n    $$$1.fn[NAME].noConflict = function () {\\n      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;\\n      return Tab._jQueryInterface;\\n    };\\n\\n    return Tab;\\n  }($);\\n\\n  /**\\n   * --------------------------------------------------------------------------\\n   * Bootstrap (v4.1.3): index.js\\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n   * --------------------------------------------------------------------------\\n   */\\n\\n  (function ($$$1) {\\n    if (typeof $$$1 === 'undefined') {\\n      throw new TypeError('Bootstrap\\\\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\\\\'s JavaScript.');\\n    }\\n\\n    var version = $$$1.fn.jquery.split(' ')[0].split('.');\\n    var minMajor = 1;\\n    var ltMajor = 2;\\n    var minMinor = 9;\\n    var minPatch = 1;\\n    var maxMajor = 4;\\n\\n    if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {\\n      throw new Error('Bootstrap\\\\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');\\n    }\\n  })($);\\n\\n  exports.Util = Util;\\n  exports.Alert = Alert;\\n  exports.Button = Button;\\n  exports.Carousel = Carousel;\\n  exports.Collapse = Collapse;\\n  exports.Dropdown = Dropdown;\\n  exports.Modal = Modal;\\n  exports.Popover = Popover;\\n  exports.Scrollspy = ScrollSpy;\\n  exports.Tab = Tab;\\n  exports.Tooltip = Tooltip;\\n\\n  Object.defineProperty(exports, '__esModule', { value: true });\\n});\\n//# sourceMappingURL=bootstrap.js.map//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/bootstrap/dist/js/bootstrap.js\\n\");\n\n//# sourceURL=webpack:///./node_modules/bootstrap/dist/js/bootstrap.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"/* WEBPACK VAR INJECTION */(function(global) {/*!\\n * The buffer module from node.js, for the browser.\\n *\\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\\n * @license  MIT\\n */\\n/* eslint-disable no-proto */\\n\\n\\n\\nvar base64 = __webpack_require__(/*! base64-js */ \\\"./node_modules/base64-js/index.js\\\");\\nvar ieee754 = __webpack_require__(/*! ieee754 */ \\\"./node_modules/ieee754/index.js\\\");\\nvar isArray = __webpack_require__(/*! isarray */ \\\"./node_modules/isarray/index.js\\\");\\n\\nexports.Buffer = Buffer;\\nexports.SlowBuffer = SlowBuffer;\\nexports.INSPECT_MAX_BYTES = 50;\\n\\n/**\\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\\n *   === true    Use Uint8Array implementation (fastest)\\n *   === false   Use Object implementation (most compatible, even IE6)\\n *\\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\\n * Opera 11.6+, iOS 4.2+.\\n *\\n * Due to various browser bugs, sometimes the Object implementation will be used even\\n * when the browser supports typed arrays.\\n *\\n * Note:\\n *\\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\\n *\\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\\n *\\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\\n *     incorrect length in some situations.\\n\\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\\n * get the Object implementation, which is slower but behaves correctly.\\n */\\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();\\n\\n/*\\n * Export kMaxLength after typed array support is determined.\\n */\\nexports.kMaxLength = kMaxLength();\\n\\nfunction typedArraySupport() {\\n  try {\\n    var arr = new Uint8Array(1);\\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {\\n        return 42;\\n      } };\\n    return arr.foo() === 42 && // typed array instances can be augmented\\n    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\\n    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`\\n  } catch (e) {\\n    return false;\\n  }\\n}\\n\\nfunction kMaxLength() {\\n  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\\n}\\n\\nfunction createBuffer(that, length) {\\n  if (kMaxLength() < length) {\\n    throw new RangeError('Invalid typed array length');\\n  }\\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\\n    // Return an augmented `Uint8Array` instance, for best performance\\n    that = new Uint8Array(length);\\n    that.__proto__ = Buffer.prototype;\\n  } else {\\n    // Fallback: Return an object instance of the Buffer class\\n    if (that === null) {\\n      that = new Buffer(length);\\n    }\\n    that.length = length;\\n  }\\n\\n  return that;\\n}\\n\\n/**\\n * The Buffer constructor returns instances of `Uint8Array` that have their\\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\\n * returns a single octet.\\n *\\n * The `Uint8Array` prototype remains unmodified.\\n */\\n\\nfunction Buffer(arg, encodingOrOffset, length) {\\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\\n    return new Buffer(arg, encodingOrOffset, length);\\n  }\\n\\n  // Common case.\\n  if (typeof arg === 'number') {\\n    if (typeof encodingOrOffset === 'string') {\\n      throw new Error('If encoding is specified then the first argument must be a string');\\n    }\\n    return allocUnsafe(this, arg);\\n  }\\n  return from(this, arg, encodingOrOffset, length);\\n}\\n\\nBuffer.poolSize = 8192; // not used by this implementation\\n\\n// TODO: Legacy, not needed anymore. Remove in next major version.\\nBuffer._augment = function (arr) {\\n  arr.__proto__ = Buffer.prototype;\\n  return arr;\\n};\\n\\nfunction from(that, value, encodingOrOffset, length) {\\n  if (typeof value === 'number') {\\n    throw new TypeError('\\\"value\\\" argument must not be a number');\\n  }\\n\\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\\n    return fromArrayBuffer(that, value, encodingOrOffset, length);\\n  }\\n\\n  if (typeof value === 'string') {\\n    return fromString(that, value, encodingOrOffset);\\n  }\\n\\n  return fromObject(that, value);\\n}\\n\\n/**\\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\\n * if value is a number.\\n * Buffer.from(str[, encoding])\\n * Buffer.from(array)\\n * Buffer.from(buffer)\\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\\n **/\\nBuffer.from = function (value, encodingOrOffset, length) {\\n  return from(null, value, encodingOrOffset, length);\\n};\\n\\nif (Buffer.TYPED_ARRAY_SUPPORT) {\\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\\n  Buffer.__proto__ = Uint8Array;\\n  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {\\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\\n    Object.defineProperty(Buffer, Symbol.species, {\\n      value: null,\\n      configurable: true\\n    });\\n  }\\n}\\n\\nfunction assertSize(size) {\\n  if (typeof size !== 'number') {\\n    throw new TypeError('\\\"size\\\" argument must be a number');\\n  } else if (size < 0) {\\n    throw new RangeError('\\\"size\\\" argument must not be negative');\\n  }\\n}\\n\\nfunction alloc(that, size, fill, encoding) {\\n  assertSize(size);\\n  if (size <= 0) {\\n    return createBuffer(that, size);\\n  }\\n  if (fill !== undefined) {\\n    // Only pay attention to encoding if it's a string. This\\n    // prevents accidentally sending in a number that would\\n    // be interpretted as a start offset.\\n    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\\n  }\\n  return createBuffer(that, size);\\n}\\n\\n/**\\n * Creates a new filled Buffer instance.\\n * alloc(size[, fill[, encoding]])\\n **/\\nBuffer.alloc = function (size, fill, encoding) {\\n  return alloc(null, size, fill, encoding);\\n};\\n\\nfunction allocUnsafe(that, size) {\\n  assertSize(size);\\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\\n    for (var i = 0; i < size; ++i) {\\n      that[i] = 0;\\n    }\\n  }\\n  return that;\\n}\\n\\n/**\\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\\n * */\\nBuffer.allocUnsafe = function (size) {\\n  return allocUnsafe(null, size);\\n};\\n/**\\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\\n */\\nBuffer.allocUnsafeSlow = function (size) {\\n  return allocUnsafe(null, size);\\n};\\n\\nfunction fromString(that, string, encoding) {\\n  if (typeof encoding !== 'string' || encoding === '') {\\n    encoding = 'utf8';\\n  }\\n\\n  if (!Buffer.isEncoding(encoding)) {\\n    throw new TypeError('\\\"encoding\\\" must be a valid string encoding');\\n  }\\n\\n  var length = byteLength(string, encoding) | 0;\\n  that = createBuffer(that, length);\\n\\n  var actual = that.write(string, encoding);\\n\\n  if (actual !== length) {\\n    // Writing a hex string, for example, that contains invalid characters will\\n    // cause everything after the first invalid character to be ignored. (e.g.\\n    // 'abxxcd' will be treated as 'ab')\\n    that = that.slice(0, actual);\\n  }\\n\\n  return that;\\n}\\n\\nfunction fromArrayLike(that, array) {\\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\\n  that = createBuffer(that, length);\\n  for (var i = 0; i < length; i += 1) {\\n    that[i] = array[i] & 255;\\n  }\\n  return that;\\n}\\n\\nfunction fromArrayBuffer(that, array, byteOffset, length) {\\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\\n\\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\\n    throw new RangeError('\\\\'offset\\\\' is out of bounds');\\n  }\\n\\n  if (array.byteLength < byteOffset + (length || 0)) {\\n    throw new RangeError('\\\\'length\\\\' is out of bounds');\\n  }\\n\\n  if (byteOffset === undefined && length === undefined) {\\n    array = new Uint8Array(array);\\n  } else if (length === undefined) {\\n    array = new Uint8Array(array, byteOffset);\\n  } else {\\n    array = new Uint8Array(array, byteOffset, length);\\n  }\\n\\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\\n    // Return an augmented `Uint8Array` instance, for best performance\\n    that = array;\\n    that.__proto__ = Buffer.prototype;\\n  } else {\\n    // Fallback: Return an object instance of the Buffer class\\n    that = fromArrayLike(that, array);\\n  }\\n  return that;\\n}\\n\\nfunction fromObject(that, obj) {\\n  if (Buffer.isBuffer(obj)) {\\n    var len = checked(obj.length) | 0;\\n    that = createBuffer(that, len);\\n\\n    if (that.length === 0) {\\n      return that;\\n    }\\n\\n    obj.copy(that, 0, 0, len);\\n    return that;\\n  }\\n\\n  if (obj) {\\n    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\\n        return createBuffer(that, 0);\\n      }\\n      return fromArrayLike(that, obj);\\n    }\\n\\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\\n      return fromArrayLike(that, obj.data);\\n    }\\n  }\\n\\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\\n}\\n\\nfunction checked(length) {\\n  // Note: cannot use `length < kMaxLength()` here because that fails when\\n  // length is NaN (which is otherwise coerced to zero.)\\n  if (length >= kMaxLength()) {\\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\\n  }\\n  return length | 0;\\n}\\n\\nfunction SlowBuffer(length) {\\n  if (+length != length) {\\n    // eslint-disable-line eqeqeq\\n    length = 0;\\n  }\\n  return Buffer.alloc(+length);\\n}\\n\\nBuffer.isBuffer = function isBuffer(b) {\\n  return !!(b != null && b._isBuffer);\\n};\\n\\nBuffer.compare = function compare(a, b) {\\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\\n    throw new TypeError('Arguments must be Buffers');\\n  }\\n\\n  if (a === b) return 0;\\n\\n  var x = a.length;\\n  var y = b.length;\\n\\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\\n    if (a[i] !== b[i]) {\\n      x = a[i];\\n      y = b[i];\\n      break;\\n    }\\n  }\\n\\n  if (x < y) return -1;\\n  if (y < x) return 1;\\n  return 0;\\n};\\n\\nBuffer.isEncoding = function isEncoding(encoding) {\\n  switch (String(encoding).toLowerCase()) {\\n    case 'hex':\\n    case 'utf8':\\n    case 'utf-8':\\n    case 'ascii':\\n    case 'latin1':\\n    case 'binary':\\n    case 'base64':\\n    case 'ucs2':\\n    case 'ucs-2':\\n    case 'utf16le':\\n    case 'utf-16le':\\n      return true;\\n    default:\\n      return false;\\n  }\\n};\\n\\nBuffer.concat = function concat(list, length) {\\n  if (!isArray(list)) {\\n    throw new TypeError('\\\"list\\\" argument must be an Array of Buffers');\\n  }\\n\\n  if (list.length === 0) {\\n    return Buffer.alloc(0);\\n  }\\n\\n  var i;\\n  if (length === undefined) {\\n    length = 0;\\n    for (i = 0; i < list.length; ++i) {\\n      length += list[i].length;\\n    }\\n  }\\n\\n  var buffer = Buffer.allocUnsafe(length);\\n  var pos = 0;\\n  for (i = 0; i < list.length; ++i) {\\n    var buf = list[i];\\n    if (!Buffer.isBuffer(buf)) {\\n      throw new TypeError('\\\"list\\\" argument must be an Array of Buffers');\\n    }\\n    buf.copy(buffer, pos);\\n    pos += buf.length;\\n  }\\n  return buffer;\\n};\\n\\nfunction byteLength(string, encoding) {\\n  if (Buffer.isBuffer(string)) {\\n    return string.length;\\n  }\\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\\n    return string.byteLength;\\n  }\\n  if (typeof string !== 'string') {\\n    string = '' + string;\\n  }\\n\\n  var len = string.length;\\n  if (len === 0) return 0;\\n\\n  // Use a for loop to avoid recursion\\n  var loweredCase = false;\\n  for (;;) {\\n    switch (encoding) {\\n      case 'ascii':\\n      case 'latin1':\\n      case 'binary':\\n        return len;\\n      case 'utf8':\\n      case 'utf-8':\\n      case undefined:\\n        return utf8ToBytes(string).length;\\n      case 'ucs2':\\n      case 'ucs-2':\\n      case 'utf16le':\\n      case 'utf-16le':\\n        return len * 2;\\n      case 'hex':\\n        return len >>> 1;\\n      case 'base64':\\n        return base64ToBytes(string).length;\\n      default:\\n        if (loweredCase) return utf8ToBytes(string).length; // assume utf8\\n        encoding = ('' + encoding).toLowerCase();\\n        loweredCase = true;\\n    }\\n  }\\n}\\nBuffer.byteLength = byteLength;\\n\\nfunction slowToString(encoding, start, end) {\\n  var loweredCase = false;\\n\\n  // No need to verify that \\\"this.length <= MAX_UINT32\\\" since it's a read-only\\n  // property of a typed array.\\n\\n  // This behaves neither like String nor Uint8Array in that we set start/end\\n  // to their upper/lower bounds if the value passed is out of range.\\n  // undefined is handled specially as per ECMA-262 6th Edition,\\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\\n  if (start === undefined || start < 0) {\\n    start = 0;\\n  }\\n  // Return early if start > this.length. Done here to prevent potential uint32\\n  // coercion fail below.\\n  if (start > this.length) {\\n    return '';\\n  }\\n\\n  if (end === undefined || end > this.length) {\\n    end = this.length;\\n  }\\n\\n  if (end <= 0) {\\n    return '';\\n  }\\n\\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\\n  end >>>= 0;\\n  start >>>= 0;\\n\\n  if (end <= start) {\\n    return '';\\n  }\\n\\n  if (!encoding) encoding = 'utf8';\\n\\n  while (true) {\\n    switch (encoding) {\\n      case 'hex':\\n        return hexSlice(this, start, end);\\n\\n      case 'utf8':\\n      case 'utf-8':\\n        return utf8Slice(this, start, end);\\n\\n      case 'ascii':\\n        return asciiSlice(this, start, end);\\n\\n      case 'latin1':\\n      case 'binary':\\n        return latin1Slice(this, start, end);\\n\\n      case 'base64':\\n        return base64Slice(this, start, end);\\n\\n      case 'ucs2':\\n      case 'ucs-2':\\n      case 'utf16le':\\n      case 'utf-16le':\\n        return utf16leSlice(this, start, end);\\n\\n      default:\\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\\n        encoding = (encoding + '').toLowerCase();\\n        loweredCase = true;\\n    }\\n  }\\n}\\n\\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\\n// Buffer instances.\\nBuffer.prototype._isBuffer = true;\\n\\nfunction swap(b, n, m) {\\n  var i = b[n];\\n  b[n] = b[m];\\n  b[m] = i;\\n}\\n\\nBuffer.prototype.swap16 = function swap16() {\\n  var len = this.length;\\n  if (len % 2 !== 0) {\\n    throw new RangeError('Buffer size must be a multiple of 16-bits');\\n  }\\n  for (var i = 0; i < len; i += 2) {\\n    swap(this, i, i + 1);\\n  }\\n  return this;\\n};\\n\\nBuffer.prototype.swap32 = function swap32() {\\n  var len = this.length;\\n  if (len % 4 !== 0) {\\n    throw new RangeError('Buffer size must be a multiple of 32-bits');\\n  }\\n  for (var i = 0; i < len; i += 4) {\\n    swap(this, i, i + 3);\\n    swap(this, i + 1, i + 2);\\n  }\\n  return this;\\n};\\n\\nBuffer.prototype.swap64 = function swap64() {\\n  var len = this.length;\\n  if (len % 8 !== 0) {\\n    throw new RangeError('Buffer size must be a multiple of 64-bits');\\n  }\\n  for (var i = 0; i < len; i += 8) {\\n    swap(this, i, i + 7);\\n    swap(this, i + 1, i + 6);\\n    swap(this, i + 2, i + 5);\\n    swap(this, i + 3, i + 4);\\n  }\\n  return this;\\n};\\n\\nBuffer.prototype.toString = function toString() {\\n  var length = this.length | 0;\\n  if (length === 0) return '';\\n  if (arguments.length === 0) return utf8Slice(this, 0, length);\\n  return slowToString.apply(this, arguments);\\n};\\n\\nBuffer.prototype.equals = function equals(b) {\\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\\n  if (this === b) return true;\\n  return Buffer.compare(this, b) === 0;\\n};\\n\\nBuffer.prototype.inspect = function inspect() {\\n  var str = '';\\n  var max = exports.INSPECT_MAX_BYTES;\\n  if (this.length > 0) {\\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\\n    if (this.length > max) str += ' ... ';\\n  }\\n  return '<Buffer ' + str + '>';\\n};\\n\\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\\n  if (!Buffer.isBuffer(target)) {\\n    throw new TypeError('Argument must be a Buffer');\\n  }\\n\\n  if (start === undefined) {\\n    start = 0;\\n  }\\n  if (end === undefined) {\\n    end = target ? target.length : 0;\\n  }\\n  if (thisStart === undefined) {\\n    thisStart = 0;\\n  }\\n  if (thisEnd === undefined) {\\n    thisEnd = this.length;\\n  }\\n\\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\\n    throw new RangeError('out of range index');\\n  }\\n\\n  if (thisStart >= thisEnd && start >= end) {\\n    return 0;\\n  }\\n  if (thisStart >= thisEnd) {\\n    return -1;\\n  }\\n  if (start >= end) {\\n    return 1;\\n  }\\n\\n  start >>>= 0;\\n  end >>>= 0;\\n  thisStart >>>= 0;\\n  thisEnd >>>= 0;\\n\\n  if (this === target) return 0;\\n\\n  var x = thisEnd - thisStart;\\n  var y = end - start;\\n  var len = Math.min(x, y);\\n\\n  var thisCopy = this.slice(thisStart, thisEnd);\\n  var targetCopy = target.slice(start, end);\\n\\n  for (var i = 0; i < len; ++i) {\\n    if (thisCopy[i] !== targetCopy[i]) {\\n      x = thisCopy[i];\\n      y = targetCopy[i];\\n      break;\\n    }\\n  }\\n\\n  if (x < y) return -1;\\n  if (y < x) return 1;\\n  return 0;\\n};\\n\\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\\n//\\n// Arguments:\\n// - buffer - a Buffer to search\\n// - val - a string, Buffer, or number\\n// - byteOffset - an index into `buffer`; will be clamped to an int32\\n// - encoding - an optional encoding, relevant is val is a string\\n// - dir - true for indexOf, false for lastIndexOf\\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\\n  // Empty buffer means no match\\n  if (buffer.length === 0) return -1;\\n\\n  // Normalize byteOffset\\n  if (typeof byteOffset === 'string') {\\n    encoding = byteOffset;\\n    byteOffset = 0;\\n  } else if (byteOffset > 0x7fffffff) {\\n    byteOffset = 0x7fffffff;\\n  } else if (byteOffset < -0x80000000) {\\n    byteOffset = -0x80000000;\\n  }\\n  byteOffset = +byteOffset; // Coerce to Number.\\n  if (isNaN(byteOffset)) {\\n    // byteOffset: it it's undefined, null, NaN, \\\"foo\\\", etc, search whole buffer\\n    byteOffset = dir ? 0 : buffer.length - 1;\\n  }\\n\\n  // Normalize byteOffset: negative offsets start from the end of the buffer\\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\\n  if (byteOffset >= buffer.length) {\\n    if (dir) return -1;else byteOffset = buffer.length - 1;\\n  } else if (byteOffset < 0) {\\n    if (dir) byteOffset = 0;else return -1;\\n  }\\n\\n  // Normalize val\\n  if (typeof val === 'string') {\\n    val = Buffer.from(val, encoding);\\n  }\\n\\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\\n  if (Buffer.isBuffer(val)) {\\n    // Special case: looking for empty string/buffer always fails\\n    if (val.length === 0) {\\n      return -1;\\n    }\\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\\n  } else if (typeof val === 'number') {\\n    val = val & 0xFF; // Search for a byte value [0-255]\\n    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\\n      if (dir) {\\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\\n      } else {\\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\\n      }\\n    }\\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\\n  }\\n\\n  throw new TypeError('val must be string, number or Buffer');\\n}\\n\\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\\n  var indexSize = 1;\\n  var arrLength = arr.length;\\n  var valLength = val.length;\\n\\n  if (encoding !== undefined) {\\n    encoding = String(encoding).toLowerCase();\\n    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\\n      if (arr.length < 2 || val.length < 2) {\\n        return -1;\\n      }\\n      indexSize = 2;\\n      arrLength /= 2;\\n      valLength /= 2;\\n      byteOffset /= 2;\\n    }\\n  }\\n\\n  function read(buf, i) {\\n    if (indexSize === 1) {\\n      return buf[i];\\n    } else {\\n      return buf.readUInt16BE(i * indexSize);\\n    }\\n  }\\n\\n  var i;\\n  if (dir) {\\n    var foundIndex = -1;\\n    for (i = byteOffset; i < arrLength; i++) {\\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\\n        if (foundIndex === -1) foundIndex = i;\\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\\n      } else {\\n        if (foundIndex !== -1) i -= i - foundIndex;\\n        foundIndex = -1;\\n      }\\n    }\\n  } else {\\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\\n    for (i = byteOffset; i >= 0; i--) {\\n      var found = true;\\n      for (var j = 0; j < valLength; j++) {\\n        if (read(arr, i + j) !== read(val, j)) {\\n          found = false;\\n          break;\\n        }\\n      }\\n      if (found) return i;\\n    }\\n  }\\n\\n  return -1;\\n}\\n\\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\\n  return this.indexOf(val, byteOffset, encoding) !== -1;\\n};\\n\\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\\n};\\n\\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\\n};\\n\\nfunction hexWrite(buf, string, offset, length) {\\n  offset = Number(offset) || 0;\\n  var remaining = buf.length - offset;\\n  if (!length) {\\n    length = remaining;\\n  } else {\\n    length = Number(length);\\n    if (length > remaining) {\\n      length = remaining;\\n    }\\n  }\\n\\n  // must be an even number of digits\\n  var strLen = string.length;\\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\\n\\n  if (length > strLen / 2) {\\n    length = strLen / 2;\\n  }\\n  for (var i = 0; i < length; ++i) {\\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\\n    if (isNaN(parsed)) return i;\\n    buf[offset + i] = parsed;\\n  }\\n  return i;\\n}\\n\\nfunction utf8Write(buf, string, offset, length) {\\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\\n}\\n\\nfunction asciiWrite(buf, string, offset, length) {\\n  return blitBuffer(asciiToBytes(string), buf, offset, length);\\n}\\n\\nfunction latin1Write(buf, string, offset, length) {\\n  return asciiWrite(buf, string, offset, length);\\n}\\n\\nfunction base64Write(buf, string, offset, length) {\\n  return blitBuffer(base64ToBytes(string), buf, offset, length);\\n}\\n\\nfunction ucs2Write(buf, string, offset, length) {\\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\\n}\\n\\nBuffer.prototype.write = function write(string, offset, length, encoding) {\\n  // Buffer#write(string)\\n  if (offset === undefined) {\\n    encoding = 'utf8';\\n    length = this.length;\\n    offset = 0;\\n    // Buffer#write(string, encoding)\\n  } else if (length === undefined && typeof offset === 'string') {\\n    encoding = offset;\\n    length = this.length;\\n    offset = 0;\\n    // Buffer#write(string, offset[, length][, encoding])\\n  } else if (isFinite(offset)) {\\n    offset = offset | 0;\\n    if (isFinite(length)) {\\n      length = length | 0;\\n      if (encoding === undefined) encoding = 'utf8';\\n    } else {\\n      encoding = length;\\n      length = undefined;\\n    }\\n    // legacy write(string, encoding, offset, length) - remove in v0.13\\n  } else {\\n    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\\n  }\\n\\n  var remaining = this.length - offset;\\n  if (length === undefined || length > remaining) length = remaining;\\n\\n  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\\n    throw new RangeError('Attempt to write outside buffer bounds');\\n  }\\n\\n  if (!encoding) encoding = 'utf8';\\n\\n  var loweredCase = false;\\n  for (;;) {\\n    switch (encoding) {\\n      case 'hex':\\n        return hexWrite(this, string, offset, length);\\n\\n      case 'utf8':\\n      case 'utf-8':\\n        return utf8Write(this, string, offset, length);\\n\\n      case 'ascii':\\n        return asciiWrite(this, string, offset, length);\\n\\n      case 'latin1':\\n      case 'binary':\\n        return latin1Write(this, string, offset, length);\\n\\n      case 'base64':\\n        // Warning: maxLength not taken into account in base64Write\\n        return base64Write(this, string, offset, length);\\n\\n      case 'ucs2':\\n      case 'ucs-2':\\n      case 'utf16le':\\n      case 'utf-16le':\\n        return ucs2Write(this, string, offset, length);\\n\\n      default:\\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\\n        encoding = ('' + encoding).toLowerCase();\\n        loweredCase = true;\\n    }\\n  }\\n};\\n\\nBuffer.prototype.toJSON = function toJSON() {\\n  return {\\n    type: 'Buffer',\\n    data: Array.prototype.slice.call(this._arr || this, 0)\\n  };\\n};\\n\\nfunction base64Slice(buf, start, end) {\\n  if (start === 0 && end === buf.length) {\\n    return base64.fromByteArray(buf);\\n  } else {\\n    return base64.fromByteArray(buf.slice(start, end));\\n  }\\n}\\n\\nfunction utf8Slice(buf, start, end) {\\n  end = Math.min(buf.length, end);\\n  var res = [];\\n\\n  var i = start;\\n  while (i < end) {\\n    var firstByte = buf[i];\\n    var codePoint = null;\\n    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\\n\\n    if (i + bytesPerSequence <= end) {\\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\\n\\n      switch (bytesPerSequence) {\\n        case 1:\\n          if (firstByte < 0x80) {\\n            codePoint = firstByte;\\n          }\\n          break;\\n        case 2:\\n          secondByte = buf[i + 1];\\n          if ((secondByte & 0xC0) === 0x80) {\\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\\n            if (tempCodePoint > 0x7F) {\\n              codePoint = tempCodePoint;\\n            }\\n          }\\n          break;\\n        case 3:\\n          secondByte = buf[i + 1];\\n          thirdByte = buf[i + 2];\\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\\n              codePoint = tempCodePoint;\\n            }\\n          }\\n          break;\\n        case 4:\\n          secondByte = buf[i + 1];\\n          thirdByte = buf[i + 2];\\n          fourthByte = buf[i + 3];\\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\\n              codePoint = tempCodePoint;\\n            }\\n          }\\n      }\\n    }\\n\\n    if (codePoint === null) {\\n      // we did not generate a valid codePoint so insert a\\n      // replacement char (U+FFFD) and advance only 1 byte\\n      codePoint = 0xFFFD;\\n      bytesPerSequence = 1;\\n    } else if (codePoint > 0xFFFF) {\\n      // encode to utf16 (surrogate pair dance)\\n      codePoint -= 0x10000;\\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\\n      codePoint = 0xDC00 | codePoint & 0x3FF;\\n    }\\n\\n    res.push(codePoint);\\n    i += bytesPerSequence;\\n  }\\n\\n  return decodeCodePointsArray(res);\\n}\\n\\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\\n// the lowest limit is Chrome, with 0x10000 args.\\n// We go 1 magnitude less, for safety\\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\\n\\nfunction decodeCodePointsArray(codePoints) {\\n  var len = codePoints.length;\\n  if (len <= MAX_ARGUMENTS_LENGTH) {\\n    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\\n  }\\n\\n  // Decode in chunks to avoid \\\"call stack size exceeded\\\".\\n  var res = '';\\n  var i = 0;\\n  while (i < len) {\\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\\n  }\\n  return res;\\n}\\n\\nfunction asciiSlice(buf, start, end) {\\n  var ret = '';\\n  end = Math.min(buf.length, end);\\n\\n  for (var i = start; i < end; ++i) {\\n    ret += String.fromCharCode(buf[i] & 0x7F);\\n  }\\n  return ret;\\n}\\n\\nfunction latin1Slice(buf, start, end) {\\n  var ret = '';\\n  end = Math.min(buf.length, end);\\n\\n  for (var i = start; i < end; ++i) {\\n    ret += String.fromCharCode(buf[i]);\\n  }\\n  return ret;\\n}\\n\\nfunction hexSlice(buf, start, end) {\\n  var len = buf.length;\\n\\n  if (!start || start < 0) start = 0;\\n  if (!end || end < 0 || end > len) end = len;\\n\\n  var out = '';\\n  for (var i = start; i < end; ++i) {\\n    out += toHex(buf[i]);\\n  }\\n  return out;\\n}\\n\\nfunction utf16leSlice(buf, start, end) {\\n  var bytes = buf.slice(start, end);\\n  var res = '';\\n  for (var i = 0; i < bytes.length; i += 2) {\\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\\n  }\\n  return res;\\n}\\n\\nBuffer.prototype.slice = function slice(start, end) {\\n  var len = this.length;\\n  start = ~~start;\\n  end = end === undefined ? len : ~~end;\\n\\n  if (start < 0) {\\n    start += len;\\n    if (start < 0) start = 0;\\n  } else if (start > len) {\\n    start = len;\\n  }\\n\\n  if (end < 0) {\\n    end += len;\\n    if (end < 0) end = 0;\\n  } else if (end > len) {\\n    end = len;\\n  }\\n\\n  if (end < start) end = start;\\n\\n  var newBuf;\\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\\n    newBuf = this.subarray(start, end);\\n    newBuf.__proto__ = Buffer.prototype;\\n  } else {\\n    var sliceLen = end - start;\\n    newBuf = new Buffer(sliceLen, undefined);\\n    for (var i = 0; i < sliceLen; ++i) {\\n      newBuf[i] = this[i + start];\\n    }\\n  }\\n\\n  return newBuf;\\n};\\n\\n/*\\n * Need to make sure that buffer isn't trying to write out of bounds.\\n */\\nfunction checkOffset(offset, ext, length) {\\n  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\\n}\\n\\nBuffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\\n  offset = offset | 0;\\n  byteLength = byteLength | 0;\\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\\n\\n  var val = this[offset];\\n  var mul = 1;\\n  var i = 0;\\n  while (++i < byteLength && (mul *= 0x100)) {\\n    val += this[offset + i] * mul;\\n  }\\n\\n  return val;\\n};\\n\\nBuffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\\n  offset = offset | 0;\\n  byteLength = byteLength | 0;\\n  if (!noAssert) {\\n    checkOffset(offset, byteLength, this.length);\\n  }\\n\\n  var val = this[offset + --byteLength];\\n  var mul = 1;\\n  while (byteLength > 0 && (mul *= 0x100)) {\\n    val += this[offset + --byteLength] * mul;\\n  }\\n\\n  return val;\\n};\\n\\nBuffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 1, this.length);\\n  return this[offset];\\n};\\n\\nBuffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 2, this.length);\\n  return this[offset] | this[offset + 1] << 8;\\n};\\n\\nBuffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 2, this.length);\\n  return this[offset] << 8 | this[offset + 1];\\n};\\n\\nBuffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 4, this.length);\\n\\n  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\\n};\\n\\nBuffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 4, this.length);\\n\\n  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\\n};\\n\\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\\n  offset = offset | 0;\\n  byteLength = byteLength | 0;\\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\\n\\n  var val = this[offset];\\n  var mul = 1;\\n  var i = 0;\\n  while (++i < byteLength && (mul *= 0x100)) {\\n    val += this[offset + i] * mul;\\n  }\\n  mul *= 0x80;\\n\\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\\n\\n  return val;\\n};\\n\\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\\n  offset = offset | 0;\\n  byteLength = byteLength | 0;\\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\\n\\n  var i = byteLength;\\n  var mul = 1;\\n  var val = this[offset + --i];\\n  while (i > 0 && (mul *= 0x100)) {\\n    val += this[offset + --i] * mul;\\n  }\\n  mul *= 0x80;\\n\\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\\n\\n  return val;\\n};\\n\\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 1, this.length);\\n  if (!(this[offset] & 0x80)) return this[offset];\\n  return (0xff - this[offset] + 1) * -1;\\n};\\n\\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 2, this.length);\\n  var val = this[offset] | this[offset + 1] << 8;\\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\\n};\\n\\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 2, this.length);\\n  var val = this[offset + 1] | this[offset] << 8;\\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\\n};\\n\\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 4, this.length);\\n\\n  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\\n};\\n\\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 4, this.length);\\n\\n  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\\n};\\n\\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 4, this.length);\\n  return ieee754.read(this, offset, true, 23, 4);\\n};\\n\\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 4, this.length);\\n  return ieee754.read(this, offset, false, 23, 4);\\n};\\n\\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 8, this.length);\\n  return ieee754.read(this, offset, true, 52, 8);\\n};\\n\\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\\n  if (!noAssert) checkOffset(offset, 8, this.length);\\n  return ieee754.read(this, offset, false, 52, 8);\\n};\\n\\nfunction checkInt(buf, value, offset, ext, max, min) {\\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\\\"buffer\\\" argument must be a Buffer instance');\\n  if (value > max || value < min) throw new RangeError('\\\"value\\\" argument is out of bounds');\\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\\n}\\n\\nBuffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  byteLength = byteLength | 0;\\n  if (!noAssert) {\\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\\n  }\\n\\n  var mul = 1;\\n  var i = 0;\\n  this[offset] = value & 0xFF;\\n  while (++i < byteLength && (mul *= 0x100)) {\\n    this[offset + i] = value / mul & 0xFF;\\n  }\\n\\n  return offset + byteLength;\\n};\\n\\nBuffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  byteLength = byteLength | 0;\\n  if (!noAssert) {\\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\\n  }\\n\\n  var i = byteLength - 1;\\n  var mul = 1;\\n  this[offset + i] = value & 0xFF;\\n  while (--i >= 0 && (mul *= 0x100)) {\\n    this[offset + i] = value / mul & 0xFF;\\n  }\\n\\n  return offset + byteLength;\\n};\\n\\nBuffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\\n  this[offset] = value & 0xff;\\n  return offset + 1;\\n};\\n\\nfunction objectWriteUInt16(buf, value, offset, littleEndian) {\\n  if (value < 0) value = 0xffff + value + 1;\\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\\n    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\\n  }\\n}\\n\\nBuffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\\n    this[offset] = value & 0xff;\\n    this[offset + 1] = value >>> 8;\\n  } else {\\n    objectWriteUInt16(this, value, offset, true);\\n  }\\n  return offset + 2;\\n};\\n\\nBuffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\\n    this[offset] = value >>> 8;\\n    this[offset + 1] = value & 0xff;\\n  } else {\\n    objectWriteUInt16(this, value, offset, false);\\n  }\\n  return offset + 2;\\n};\\n\\nfunction objectWriteUInt32(buf, value, offset, littleEndian) {\\n  if (value < 0) value = 0xffffffff + value + 1;\\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\\n    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\\n  }\\n}\\n\\nBuffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\\n    this[offset + 3] = value >>> 24;\\n    this[offset + 2] = value >>> 16;\\n    this[offset + 1] = value >>> 8;\\n    this[offset] = value & 0xff;\\n  } else {\\n    objectWriteUInt32(this, value, offset, true);\\n  }\\n  return offset + 4;\\n};\\n\\nBuffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\\n    this[offset] = value >>> 24;\\n    this[offset + 1] = value >>> 16;\\n    this[offset + 2] = value >>> 8;\\n    this[offset + 3] = value & 0xff;\\n  } else {\\n    objectWriteUInt32(this, value, offset, false);\\n  }\\n  return offset + 4;\\n};\\n\\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  if (!noAssert) {\\n    var limit = Math.pow(2, 8 * byteLength - 1);\\n\\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\\n  }\\n\\n  var i = 0;\\n  var mul = 1;\\n  var sub = 0;\\n  this[offset] = value & 0xFF;\\n  while (++i < byteLength && (mul *= 0x100)) {\\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\\n      sub = 1;\\n    }\\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\\n  }\\n\\n  return offset + byteLength;\\n};\\n\\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  if (!noAssert) {\\n    var limit = Math.pow(2, 8 * byteLength - 1);\\n\\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\\n  }\\n\\n  var i = byteLength - 1;\\n  var mul = 1;\\n  var sub = 0;\\n  this[offset + i] = value & 0xFF;\\n  while (--i >= 0 && (mul *= 0x100)) {\\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\\n      sub = 1;\\n    }\\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\\n  }\\n\\n  return offset + byteLength;\\n};\\n\\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\\n  if (value < 0) value = 0xff + value + 1;\\n  this[offset] = value & 0xff;\\n  return offset + 1;\\n};\\n\\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\\n    this[offset] = value & 0xff;\\n    this[offset + 1] = value >>> 8;\\n  } else {\\n    objectWriteUInt16(this, value, offset, true);\\n  }\\n  return offset + 2;\\n};\\n\\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\\n    this[offset] = value >>> 8;\\n    this[offset + 1] = value & 0xff;\\n  } else {\\n    objectWriteUInt16(this, value, offset, false);\\n  }\\n  return offset + 2;\\n};\\n\\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\\n    this[offset] = value & 0xff;\\n    this[offset + 1] = value >>> 8;\\n    this[offset + 2] = value >>> 16;\\n    this[offset + 3] = value >>> 24;\\n  } else {\\n    objectWriteUInt32(this, value, offset, true);\\n  }\\n  return offset + 4;\\n};\\n\\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\\n  value = +value;\\n  offset = offset | 0;\\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\\n  if (value < 0) value = 0xffffffff + value + 1;\\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\\n    this[offset] = value >>> 24;\\n    this[offset + 1] = value >>> 16;\\n    this[offset + 2] = value >>> 8;\\n    this[offset + 3] = value & 0xff;\\n  } else {\\n    objectWriteUInt32(this, value, offset, false);\\n  }\\n  return offset + 4;\\n};\\n\\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\\n  if (offset < 0) throw new RangeError('Index out of range');\\n}\\n\\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\\n  if (!noAssert) {\\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\\n  }\\n  ieee754.write(buf, value, offset, littleEndian, 23, 4);\\n  return offset + 4;\\n}\\n\\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\\n  return writeFloat(this, value, offset, true, noAssert);\\n};\\n\\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\\n  return writeFloat(this, value, offset, false, noAssert);\\n};\\n\\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\\n  if (!noAssert) {\\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\\n  }\\n  ieee754.write(buf, value, offset, littleEndian, 52, 8);\\n  return offset + 8;\\n}\\n\\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\\n  return writeDouble(this, value, offset, true, noAssert);\\n};\\n\\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\\n  return writeDouble(this, value, offset, false, noAssert);\\n};\\n\\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\\n  if (!start) start = 0;\\n  if (!end && end !== 0) end = this.length;\\n  if (targetStart >= target.length) targetStart = target.length;\\n  if (!targetStart) targetStart = 0;\\n  if (end > 0 && end < start) end = start;\\n\\n  // Copy 0 bytes; we're done\\n  if (end === start) return 0;\\n  if (target.length === 0 || this.length === 0) return 0;\\n\\n  // Fatal error conditions\\n  if (targetStart < 0) {\\n    throw new RangeError('targetStart out of bounds');\\n  }\\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\\n  if (end < 0) throw new RangeError('sourceEnd out of bounds');\\n\\n  // Are we oob?\\n  if (end > this.length) end = this.length;\\n  if (target.length - targetStart < end - start) {\\n    end = target.length - targetStart + start;\\n  }\\n\\n  var len = end - start;\\n  var i;\\n\\n  if (this === target && start < targetStart && targetStart < end) {\\n    // descending copy from end\\n    for (i = len - 1; i >= 0; --i) {\\n      target[i + targetStart] = this[i + start];\\n    }\\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\\n    // ascending copy from start\\n    for (i = 0; i < len; ++i) {\\n      target[i + targetStart] = this[i + start];\\n    }\\n  } else {\\n    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\\n  }\\n\\n  return len;\\n};\\n\\n// Usage:\\n//    buffer.fill(number[, offset[, end]])\\n//    buffer.fill(buffer[, offset[, end]])\\n//    buffer.fill(string[, offset[, end]][, encoding])\\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\\n  // Handle string cases:\\n  if (typeof val === 'string') {\\n    if (typeof start === 'string') {\\n      encoding = start;\\n      start = 0;\\n      end = this.length;\\n    } else if (typeof end === 'string') {\\n      encoding = end;\\n      end = this.length;\\n    }\\n    if (val.length === 1) {\\n      var code = val.charCodeAt(0);\\n      if (code < 256) {\\n        val = code;\\n      }\\n    }\\n    if (encoding !== undefined && typeof encoding !== 'string') {\\n      throw new TypeError('encoding must be a string');\\n    }\\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\\n      throw new TypeError('Unknown encoding: ' + encoding);\\n    }\\n  } else if (typeof val === 'number') {\\n    val = val & 255;\\n  }\\n\\n  // Invalid ranges are not set to a default, so can range check early.\\n  if (start < 0 || this.length < start || this.length < end) {\\n    throw new RangeError('Out of range index');\\n  }\\n\\n  if (end <= start) {\\n    return this;\\n  }\\n\\n  start = start >>> 0;\\n  end = end === undefined ? this.length : end >>> 0;\\n\\n  if (!val) val = 0;\\n\\n  var i;\\n  if (typeof val === 'number') {\\n    for (i = start; i < end; ++i) {\\n      this[i] = val;\\n    }\\n  } else {\\n    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());\\n    var len = bytes.length;\\n    for (i = 0; i < end - start; ++i) {\\n      this[i + start] = bytes[i % len];\\n    }\\n  }\\n\\n  return this;\\n};\\n\\n// HELPER FUNCTIONS\\n// ================\\n\\nvar INVALID_BASE64_RE = /[^+\\\\/0-9A-Za-z-_]/g;\\n\\nfunction base64clean(str) {\\n  // Node strips out invalid characters like \\\\n and \\\\t from the string, base64-js does not\\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '');\\n  // Node converts strings with length < 2 to ''\\n  if (str.length < 2) return '';\\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\\n  while (str.length % 4 !== 0) {\\n    str = str + '=';\\n  }\\n  return str;\\n}\\n\\nfunction stringtrim(str) {\\n  if (str.trim) return str.trim();\\n  return str.replace(/^\\\\s+|\\\\s+$/g, '');\\n}\\n\\nfunction toHex(n) {\\n  if (n < 16) return '0' + n.toString(16);\\n  return n.toString(16);\\n}\\n\\nfunction utf8ToBytes(string, units) {\\n  units = units || Infinity;\\n  var codePoint;\\n  var length = string.length;\\n  var leadSurrogate = null;\\n  var bytes = [];\\n\\n  for (var i = 0; i < length; ++i) {\\n    codePoint = string.charCodeAt(i);\\n\\n    // is surrogate component\\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\\n      // last char was a lead\\n      if (!leadSurrogate) {\\n        // no lead yet\\n        if (codePoint > 0xDBFF) {\\n          // unexpected trail\\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\\n          continue;\\n        } else if (i + 1 === length) {\\n          // unpaired lead\\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\\n          continue;\\n        }\\n\\n        // valid lead\\n        leadSurrogate = codePoint;\\n\\n        continue;\\n      }\\n\\n      // 2 leads in a row\\n      if (codePoint < 0xDC00) {\\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\\n        leadSurrogate = codePoint;\\n        continue;\\n      }\\n\\n      // valid surrogate pair\\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\\n    } else if (leadSurrogate) {\\n      // valid bmp char, but last char was a lead\\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\\n    }\\n\\n    leadSurrogate = null;\\n\\n    // encode utf8\\n    if (codePoint < 0x80) {\\n      if ((units -= 1) < 0) break;\\n      bytes.push(codePoint);\\n    } else if (codePoint < 0x800) {\\n      if ((units -= 2) < 0) break;\\n      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\\n    } else if (codePoint < 0x10000) {\\n      if ((units -= 3) < 0) break;\\n      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\\n    } else if (codePoint < 0x110000) {\\n      if ((units -= 4) < 0) break;\\n      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\\n    } else {\\n      throw new Error('Invalid code point');\\n    }\\n  }\\n\\n  return bytes;\\n}\\n\\nfunction asciiToBytes(str) {\\n  var byteArray = [];\\n  for (var i = 0; i < str.length; ++i) {\\n    // Node's code seems to be doing this and not & 0x7F..\\n    byteArray.push(str.charCodeAt(i) & 0xFF);\\n  }\\n  return byteArray;\\n}\\n\\nfunction utf16leToBytes(str, units) {\\n  var c, hi, lo;\\n  var byteArray = [];\\n  for (var i = 0; i < str.length; ++i) {\\n    if ((units -= 2) < 0) break;\\n\\n    c = str.charCodeAt(i);\\n    hi = c >> 8;\\n    lo = c % 256;\\n    byteArray.push(lo);\\n    byteArray.push(hi);\\n  }\\n\\n  return byteArray;\\n}\\n\\nfunction base64ToBytes(str) {\\n  return base64.toByteArray(base64clean(str));\\n}\\n\\nfunction blitBuffer(src, dst, offset, length) {\\n  for (var i = 0; i < length; ++i) {\\n    if (i + offset >= dst.length || i >= src.length) break;\\n    dst[i + offset] = src[i];\\n  }\\n  return i;\\n}\\n\\nfunction isnan(val) {\\n  return val !== val; // eslint-disable-line no-self-compare\\n}\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \\\"./node_modules/webpack/buildin/global.js\\\")))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/buffer/index.js\\n\");\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/ekko-lightbox/dist/ekko-lightbox.min.js":
/*!**************************************************************!*\
  !*** ./node_modules/ekko-lightbox/dist/ekko-lightbox.min.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"/* WEBPACK VAR INJECTION */(function(jQuery) {\\n\\nvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n+function (a) {\\n  \\\"use strict\\\";\\n  function b(a, b) {\\n    if (!(a instanceof b)) throw new TypeError(\\\"Cannot call a class as a function\\\");\\n  }var c = function () {\\n    function a(a, b) {\\n      for (var c = 0; c < b.length; c++) {\\n        var d = b[c];d.enumerable = d.enumerable || !1, d.configurable = !0, \\\"value\\\" in d && (d.writable = !0), Object.defineProperty(a, d.key, d);\\n      }\\n    }return function (b, c, d) {\\n      return c && a(b.prototype, c), d && a(b, d), b;\\n    };\\n  }();(function (a) {\\n    var d = \\\"ekkoLightbox\\\",\\n        e = a.fn[d],\\n        f = { title: \\\"\\\", footer: \\\"\\\", maxWidth: 9999, maxHeight: 9999, showArrows: !0, wrapping: !0, type: null, alwaysShowClose: !1, loadingMessage: '<div class=\\\"ekko-lightbox-loader\\\"><div><div></div><div></div></div></div>', leftArrow: \\\"<span>&#10094;</span>\\\", rightArrow: \\\"<span>&#10095;</span>\\\", strings: { close: \\\"Close\\\", fail: \\\"Failed to load image:\\\", type: \\\"Could not detect remote target type. Force the type using data-type\\\" }, doc: document, onShow: function onShow() {}, onShown: function onShown() {}, onHide: function onHide() {}, onHidden: function onHidden() {}, onNavigate: function onNavigate() {}, onContentLoaded: function onContentLoaded() {} },\\n        g = function () {\\n      function d(c, e) {\\n        var g = this;b(this, d), this._config = a.extend({}, f, e), this._$modalArrows = null, this._galleryIndex = 0, this._galleryName = null, this._padding = null, this._border = null, this._titleIsShown = !1, this._footerIsShown = !1, this._wantedWidth = 0, this._wantedHeight = 0, this._touchstartX = 0, this._touchendX = 0, this._modalId = \\\"ekkoLightbox-\\\" + Math.floor(1e3 * Math.random() + 1), this._$element = c instanceof jQuery ? c : a(c), this._isBootstrap3 = 3 == a.fn.modal.Constructor.VERSION[0];var h = '<h4 class=\\\"modal-title\\\">' + (this._config.title || \\\"&nbsp;\\\") + \\\"</h4>\\\",\\n            i = '<button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"' + this._config.strings.close + '\\\"><span aria-hidden=\\\"true\\\">&times;</span></button>',\\n            j = '<div class=\\\"modal-header' + (this._config.title || this._config.alwaysShowClose ? \\\"\\\" : \\\" hide\\\") + '\\\">' + (this._isBootstrap3 ? i + h : h + i) + \\\"</div>\\\",\\n            k = '<div class=\\\"modal-footer' + (this._config.footer ? \\\"\\\" : \\\" hide\\\") + '\\\">' + (this._config.footer || \\\"&nbsp;\\\") + \\\"</div>\\\",\\n            l = '<div class=\\\"modal-body\\\"><div class=\\\"ekko-lightbox-container\\\"><div class=\\\"ekko-lightbox-item fade in show\\\"></div><div class=\\\"ekko-lightbox-item fade\\\"></div></div></div>',\\n            m = '<div class=\\\"modal-dialog\\\" role=\\\"document\\\"><div class=\\\"modal-content\\\">' + j + l + k + \\\"</div></div>\\\";a(this._config.doc.body).append('<div id=\\\"' + this._modalId + '\\\" class=\\\"ekko-lightbox modal fade\\\" tabindex=\\\"-1\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-hidden=\\\"true\\\">' + m + \\\"</div>\\\"), this._$modal = a(\\\"#\\\" + this._modalId, this._config.doc), this._$modalDialog = this._$modal.find(\\\".modal-dialog\\\").first(), this._$modalContent = this._$modal.find(\\\".modal-content\\\").first(), this._$modalBody = this._$modal.find(\\\".modal-body\\\").first(), this._$modalHeader = this._$modal.find(\\\".modal-header\\\").first(), this._$modalFooter = this._$modal.find(\\\".modal-footer\\\").first(), this._$lightboxContainer = this._$modalBody.find(\\\".ekko-lightbox-container\\\").first(), this._$lightboxBodyOne = this._$lightboxContainer.find(\\\"> div:first-child\\\").first(), this._$lightboxBodyTwo = this._$lightboxContainer.find(\\\"> div:last-child\\\").first(), this._border = this._calculateBorders(), this._padding = this._calculatePadding(), this._galleryName = this._$element.data(\\\"gallery\\\"), this._galleryName && (this._$galleryItems = a(document.body).find('*[data-gallery=\\\"' + this._galleryName + '\\\"]'), this._galleryIndex = this._$galleryItems.index(this._$element), a(document).on(\\\"keydown.ekkoLightbox\\\", this._navigationalBinder.bind(this)), this._config.showArrows && this._$galleryItems.length > 1 && (this._$lightboxContainer.append('<div class=\\\"ekko-lightbox-nav-overlay\\\"><a href=\\\"#\\\">' + this._config.leftArrow + '</a><a href=\\\"#\\\">' + this._config.rightArrow + \\\"</a></div>\\\"), this._$modalArrows = this._$lightboxContainer.find(\\\"div.ekko-lightbox-nav-overlay\\\").first(), this._$lightboxContainer.on(\\\"click\\\", \\\"a:first-child\\\", function (a) {\\n          return a.preventDefault(), g.navigateLeft();\\n        }), this._$lightboxContainer.on(\\\"click\\\", \\\"a:last-child\\\", function (a) {\\n          return a.preventDefault(), g.navigateRight();\\n        }), this.updateNavigation())), this._$modal.on(\\\"show.bs.modal\\\", this._config.onShow.bind(this)).on(\\\"shown.bs.modal\\\", function () {\\n          return g._toggleLoading(!0), g._handle(), g._config.onShown.call(g);\\n        }).on(\\\"hide.bs.modal\\\", this._config.onHide.bind(this)).on(\\\"hidden.bs.modal\\\", function () {\\n          return g._galleryName && (a(document).off(\\\"keydown.ekkoLightbox\\\"), a(window).off(\\\"resize.ekkoLightbox\\\")), g._$modal.remove(), g._config.onHidden.call(g);\\n        }).modal(this._config), a(window).on(\\\"resize.ekkoLightbox\\\", function () {\\n          g._resize(g._wantedWidth, g._wantedHeight);\\n        }), this._$lightboxContainer.on(\\\"touchstart\\\", function () {\\n          g._touchstartX = event.changedTouches[0].screenX;\\n        }).on(\\\"touchend\\\", function () {\\n          g._touchendX = event.changedTouches[0].screenX, g._swipeGesure();\\n        });\\n      }return c(d, null, [{ key: \\\"Default\\\", get: function get() {\\n          return f;\\n        } }]), c(d, [{ key: \\\"element\\\", value: function value() {\\n          return this._$element;\\n        } }, { key: \\\"modal\\\", value: function value() {\\n          return this._$modal;\\n        } }, { key: \\\"navigateTo\\\", value: function value(b) {\\n          return b < 0 || b > this._$galleryItems.length - 1 ? this : (this._galleryIndex = b, this.updateNavigation(), this._$element = a(this._$galleryItems.get(this._galleryIndex)), void this._handle());\\n        } }, { key: \\\"navigateLeft\\\", value: function value() {\\n          if (this._$galleryItems && 1 !== this._$galleryItems.length) {\\n            if (0 === this._galleryIndex) {\\n              if (!this._config.wrapping) return;this._galleryIndex = this._$galleryItems.length - 1;\\n            } else this._galleryIndex--;return this._config.onNavigate.call(this, \\\"left\\\", this._galleryIndex), this.navigateTo(this._galleryIndex);\\n          }\\n        } }, { key: \\\"navigateRight\\\", value: function value() {\\n          if (this._$galleryItems && 1 !== this._$galleryItems.length) {\\n            if (this._galleryIndex === this._$galleryItems.length - 1) {\\n              if (!this._config.wrapping) return;this._galleryIndex = 0;\\n            } else this._galleryIndex++;return this._config.onNavigate.call(this, \\\"right\\\", this._galleryIndex), this.navigateTo(this._galleryIndex);\\n          }\\n        } }, { key: \\\"updateNavigation\\\", value: function value() {\\n          if (!this._config.wrapping) {\\n            var a = this._$lightboxContainer.find(\\\"div.ekko-lightbox-nav-overlay\\\");0 === this._galleryIndex ? a.find(\\\"a:first-child\\\").addClass(\\\"disabled\\\") : a.find(\\\"a:first-child\\\").removeClass(\\\"disabled\\\"), this._galleryIndex === this._$galleryItems.length - 1 ? a.find(\\\"a:last-child\\\").addClass(\\\"disabled\\\") : a.find(\\\"a:last-child\\\").removeClass(\\\"disabled\\\");\\n          }\\n        } }, { key: \\\"close\\\", value: function value() {\\n          return this._$modal.modal(\\\"hide\\\");\\n        } }, { key: \\\"_navigationalBinder\\\", value: function value(a) {\\n          return a = a || window.event, 39 === a.keyCode ? this.navigateRight() : 37 === a.keyCode ? this.navigateLeft() : void 0;\\n        } }, { key: \\\"_detectRemoteType\\\", value: function value(a, b) {\\n          return b = b || !1, !b && this._isImage(a) && (b = \\\"image\\\"), !b && this._getYoutubeId(a) && (b = \\\"youtube\\\"), !b && this._getVimeoId(a) && (b = \\\"vimeo\\\"), !b && this._getInstagramId(a) && (b = \\\"instagram\\\"), (!b || [\\\"image\\\", \\\"youtube\\\", \\\"vimeo\\\", \\\"instagram\\\", \\\"video\\\", \\\"url\\\"].indexOf(b) < 0) && (b = \\\"url\\\"), b;\\n        } }, { key: \\\"_isImage\\\", value: function value(a) {\\n          return a && a.match(/(^data:image\\\\/.*,)|(\\\\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\\\\?|#).*)?$)/i);\\n        } }, { key: \\\"_containerToUse\\\", value: function value() {\\n          var a = this,\\n              b = this._$lightboxBodyTwo,\\n              c = this._$lightboxBodyOne;return this._$lightboxBodyTwo.hasClass(\\\"in\\\") && (b = this._$lightboxBodyOne, c = this._$lightboxBodyTwo), c.removeClass(\\\"in show\\\"), setTimeout(function () {\\n            a._$lightboxBodyTwo.hasClass(\\\"in\\\") || a._$lightboxBodyTwo.empty(), a._$lightboxBodyOne.hasClass(\\\"in\\\") || a._$lightboxBodyOne.empty();\\n          }, 500), b.addClass(\\\"in show\\\"), b;\\n        } }, { key: \\\"_handle\\\", value: function value() {\\n          var a = this._containerToUse();this._updateTitleAndFooter();var b = this._$element.attr(\\\"data-remote\\\") || this._$element.attr(\\\"href\\\"),\\n              c = this._detectRemoteType(b, this._$element.attr(\\\"data-type\\\") || !1);if ([\\\"image\\\", \\\"youtube\\\", \\\"vimeo\\\", \\\"instagram\\\", \\\"video\\\", \\\"url\\\"].indexOf(c) < 0) return this._error(this._config.strings.type);switch (c) {case \\\"image\\\":\\n              this._preloadImage(b, a), this._preloadImageByIndex(this._galleryIndex, 3);break;case \\\"youtube\\\":\\n              this._showYoutubeVideo(b, a);break;case \\\"vimeo\\\":\\n              this._showVimeoVideo(this._getVimeoId(b), a);break;case \\\"instagram\\\":\\n              this._showInstagramVideo(this._getInstagramId(b), a);break;case \\\"video\\\":\\n              this._showHtml5Video(b, a);break;default:\\n              this._loadRemoteContent(b, a);}return this;\\n        } }, { key: \\\"_getYoutubeId\\\", value: function value(a) {\\n          if (!a) return !1;var b = a.match(/^.*(youtu.be\\\\/|v\\\\/|u\\\\/\\\\w\\\\/|embed\\\\/|watch\\\\?v=|\\\\&v=)([^#\\\\&\\\\?]*).*/);return !(!b || 11 !== b[2].length) && b[2];\\n        } }, { key: \\\"_getVimeoId\\\", value: function value(a) {\\n          return !!(a && a.indexOf(\\\"vimeo\\\") > 0) && a;\\n        } }, { key: \\\"_getInstagramId\\\", value: function value(a) {\\n          return !!(a && a.indexOf(\\\"instagram\\\") > 0) && a;\\n        } }, { key: \\\"_toggleLoading\\\", value: function value(b) {\\n          return b = b || !1, b ? (this._$modalDialog.css(\\\"display\\\", \\\"none\\\"), this._$modal.removeClass(\\\"in show\\\"), a(\\\".modal-backdrop\\\").append(this._config.loadingMessage)) : (this._$modalDialog.css(\\\"display\\\", \\\"block\\\"), this._$modal.addClass(\\\"in show\\\"), a(\\\".modal-backdrop\\\").find(\\\".ekko-lightbox-loader\\\").remove()), this;\\n        } }, { key: \\\"_calculateBorders\\\", value: function value() {\\n          return { top: this._totalCssByAttribute(\\\"border-top-width\\\"), right: this._totalCssByAttribute(\\\"border-right-width\\\"), bottom: this._totalCssByAttribute(\\\"border-bottom-width\\\"), left: this._totalCssByAttribute(\\\"border-left-width\\\") };\\n        } }, { key: \\\"_calculatePadding\\\", value: function value() {\\n          return { top: this._totalCssByAttribute(\\\"padding-top\\\"), right: this._totalCssByAttribute(\\\"padding-right\\\"), bottom: this._totalCssByAttribute(\\\"padding-bottom\\\"), left: this._totalCssByAttribute(\\\"padding-left\\\") };\\n        } }, { key: \\\"_totalCssByAttribute\\\", value: function value(a) {\\n          return parseInt(this._$modalDialog.css(a), 10) + parseInt(this._$modalContent.css(a), 10) + parseInt(this._$modalBody.css(a), 10);\\n        } }, { key: \\\"_updateTitleAndFooter\\\", value: function value() {\\n          var a = this._$element.data(\\\"title\\\") || \\\"\\\",\\n              b = this._$element.data(\\\"footer\\\") || \\\"\\\";return this._titleIsShown = !1, a || this._config.alwaysShowClose ? (this._titleIsShown = !0, this._$modalHeader.css(\\\"display\\\", \\\"\\\").find(\\\".modal-title\\\").html(a || \\\"&nbsp;\\\")) : this._$modalHeader.css(\\\"display\\\", \\\"none\\\"), this._footerIsShown = !1, b ? (this._footerIsShown = !0, this._$modalFooter.css(\\\"display\\\", \\\"\\\").html(b)) : this._$modalFooter.css(\\\"display\\\", \\\"none\\\"), this;\\n        } }, { key: \\\"_showYoutubeVideo\\\", value: function value(a, b) {\\n          var c = this._getYoutubeId(a),\\n              d = a.indexOf(\\\"&\\\") > 0 ? a.substr(a.indexOf(\\\"&\\\")) : \\\"\\\",\\n              e = this._$element.data(\\\"width\\\") || 560,\\n              f = this._$element.data(\\\"height\\\") || e / (560 / 315);return this._showVideoIframe(\\\"//www.youtube.com/embed/\\\" + c + \\\"?badge=0&autoplay=1&html5=1\\\" + d, e, f, b);\\n        } }, { key: \\\"_showVimeoVideo\\\", value: function value(a, b) {\\n          var c = this._$element.data(\\\"width\\\") || 500,\\n              d = this._$element.data(\\\"height\\\") || c / (560 / 315);return this._showVideoIframe(a + \\\"?autoplay=1\\\", c, d, b);\\n        } }, { key: \\\"_showInstagramVideo\\\", value: function value(a, b) {\\n          var c = this._$element.data(\\\"width\\\") || 612,\\n              d = c + 80;return a = \\\"/\\\" !== a.substr(-1) ? a + \\\"/\\\" : a, b.html('<iframe width=\\\"' + c + '\\\" height=\\\"' + d + '\\\" src=\\\"' + a + 'embed/\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>'), this._resize(c, d), this._config.onContentLoaded.call(this), this._$modalArrows && this._$modalArrows.css(\\\"display\\\", \\\"none\\\"), this._toggleLoading(!1), this;\\n        } }, { key: \\\"_showVideoIframe\\\", value: function value(a, b, c, d) {\\n          return c = c || b, d.html('<div class=\\\"embed-responsive embed-responsive-16by9\\\"><iframe width=\\\"' + b + '\\\" height=\\\"' + c + '\\\" src=\\\"' + a + '\\\" frameborder=\\\"0\\\" allowfullscreen class=\\\"embed-responsive-item\\\"></iframe></div>'), this._resize(b, c), this._config.onContentLoaded.call(this), this._$modalArrows && this._$modalArrows.css(\\\"display\\\", \\\"none\\\"), this._toggleLoading(!1), this;\\n        } }, { key: \\\"_showHtml5Video\\\", value: function value(a, b) {\\n          var c = this._$element.data(\\\"width\\\") || 560,\\n              d = this._$element.data(\\\"height\\\") || c / (560 / 315);return b.html('<div class=\\\"embed-responsive embed-responsive-16by9\\\"><video width=\\\"' + c + '\\\" height=\\\"' + d + '\\\" src=\\\"' + a + '\\\" preload=\\\"auto\\\" autoplay controls class=\\\"embed-responsive-item\\\"></video></div>'), this._resize(c, d), this._config.onContentLoaded.call(this), this._$modalArrows && this._$modalArrows.css(\\\"display\\\", \\\"none\\\"), this._toggleLoading(!1), this;\\n        } }, { key: \\\"_loadRemoteContent\\\", value: function value(b, c) {\\n          var d = this,\\n              e = this._$element.data(\\\"width\\\") || 560,\\n              f = this._$element.data(\\\"height\\\") || 560,\\n              g = this._$element.data(\\\"disableExternalCheck\\\") || !1;return this._toggleLoading(!1), g || this._isExternal(b) ? (c.html('<iframe src=\\\"' + b + '\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>'), this._config.onContentLoaded.call(this)) : c.load(b, a.proxy(function () {\\n            return d._$element.trigger(\\\"loaded.bs.modal\\\");\\n          })), this._$modalArrows && this._$modalArrows.css(\\\"display\\\", \\\"none\\\"), this._resize(e, f), this;\\n        } }, { key: \\\"_isExternal\\\", value: function value(a) {\\n          var b = a.match(/^([^:\\\\/?#]+:)?(?:\\\\/\\\\/([^\\\\/?#]*))?([^?#]+)?(\\\\?[^#]*)?(#.*)?/);return \\\"string\\\" == typeof b[1] && b[1].length > 0 && b[1].toLowerCase() !== location.protocol || \\\"string\\\" == typeof b[2] && b[2].length > 0 && b[2].replace(new RegExp(\\\":(\\\" + { \\\"http:\\\": 80, \\\"https:\\\": 443 }[location.protocol] + \\\")?$\\\"), \\\"\\\") !== location.host;\\n        } }, { key: \\\"_error\\\", value: function value(a) {\\n          return console.error(a), this._containerToUse().html(a), this._resize(300, 300), this;\\n        } }, { key: \\\"_preloadImageByIndex\\\", value: function value(b, c) {\\n          if (this._$galleryItems) {\\n            var d = a(this._$galleryItems.get(b), !1);if (\\\"undefined\\\" != typeof d) {\\n              var e = d.attr(\\\"data-remote\\\") || d.attr(\\\"href\\\");return (\\\"image\\\" === d.attr(\\\"data-type\\\") || this._isImage(e)) && this._preloadImage(e, !1), c > 0 ? this._preloadImageByIndex(b + 1, c - 1) : void 0;\\n            }\\n          }\\n        } }, { key: \\\"_preloadImage\\\", value: function value(b, c) {\\n          var d = this;c = c || !1;var e = new Image();return c && !function () {\\n            var f = setTimeout(function () {\\n              c.append(d._config.loadingMessage);\\n            }, 200);e.onload = function () {\\n              f && clearTimeout(f), f = null;var b = a(\\\"<img />\\\");return b.attr(\\\"src\\\", e.src), b.addClass(\\\"img-fluid\\\"), b.css(\\\"width\\\", \\\"100%\\\"), c.html(b), d._$modalArrows && d._$modalArrows.css(\\\"display\\\", \\\"\\\"), d._resize(e.width, e.height), d._toggleLoading(!1), d._config.onContentLoaded.call(d);\\n            }, e.onerror = function () {\\n              return d._toggleLoading(!1), d._error(d._config.strings.fail + (\\\"  \\\" + b));\\n            };\\n          }(), e.src = b, e;\\n        } }, { key: \\\"_swipeGesure\\\", value: function value() {\\n          return this._touchendX < this._touchstartX ? this.navigateRight() : this._touchendX > this._touchstartX ? this.navigateLeft() : void 0;\\n        } }, { key: \\\"_resize\\\", value: function value(b, c) {\\n          c = c || b, this._wantedWidth = b, this._wantedHeight = c;var d = b / c,\\n              e = this._padding.left + this._padding.right + this._border.left + this._border.right,\\n              f = this._config.doc.body.clientWidth > 575 ? 20 : 0,\\n              g = this._config.doc.body.clientWidth > 575 ? 0 : 20,\\n              h = Math.min(b + e, this._config.doc.body.clientWidth - f, this._config.maxWidth);b + e > h ? (c = (h - e - g) / d, b = h) : b += e;var i = 0,\\n              j = 0;this._footerIsShown && (j = this._$modalFooter.outerHeight(!0) || 55), this._titleIsShown && (i = this._$modalHeader.outerHeight(!0) || 67);var k = this._padding.top + this._padding.bottom + this._border.bottom + this._border.top,\\n              l = parseFloat(this._$modalDialog.css(\\\"margin-top\\\")) + parseFloat(this._$modalDialog.css(\\\"margin-bottom\\\")),\\n              m = Math.min(c, a(window).height() - k - l - i - j, this._config.maxHeight - k - i - j);c > m && (b = Math.ceil(m * d) + e), this._$lightboxContainer.css(\\\"height\\\", m), this._$modalDialog.css(\\\"flex\\\", 1).css(\\\"maxWidth\\\", b);var n = this._$modal.data(\\\"bs.modal\\\");if (n) try {\\n            n._handleUpdate();\\n          } catch (o) {\\n            n.handleUpdate();\\n          }return this;\\n        } }], [{ key: \\\"_jQueryInterface\\\", value: function value(b) {\\n          var c = this;return b = b || {}, this.each(function () {\\n            var e = a(c),\\n                f = a.extend({}, d.Default, e.data(), \\\"object\\\" == (typeof b === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(b)) && b);new d(c, f);\\n          });\\n        } }]), d;\\n    }();return a.fn[d] = g._jQueryInterface, a.fn[d].Constructor = g, a.fn[d].noConflict = function () {\\n      return a.fn[d] = e, g._jQueryInterface;\\n    }, g;\\n  })(jQuery);\\n}(jQuery);\\n//# sourceMappingURL=ekko-lightbox.min.js.map\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \\\"./node_modules/jquery/dist/jquery.js\\\")))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/ekko-lightbox/dist/ekko-lightbox.min.js\\n\");\n\n//# sourceURL=webpack:///./node_modules/ekko-lightbox/dist/ekko-lightbox.min.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"\\n\\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\\n  var e, m;\\n  var eLen = nBytes * 8 - mLen - 1;\\n  var eMax = (1 << eLen) - 1;\\n  var eBias = eMax >> 1;\\n  var nBits = -7;\\n  var i = isLE ? nBytes - 1 : 0;\\n  var d = isLE ? -1 : 1;\\n  var s = buffer[offset + i];\\n\\n  i += d;\\n\\n  e = s & (1 << -nBits) - 1;\\n  s >>= -nBits;\\n  nBits += eLen;\\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\\n\\n  m = e & (1 << -nBits) - 1;\\n  e >>= -nBits;\\n  nBits += mLen;\\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\\n\\n  if (e === 0) {\\n    e = 1 - eBias;\\n  } else if (e === eMax) {\\n    return m ? NaN : (s ? -1 : 1) * Infinity;\\n  } else {\\n    m = m + Math.pow(2, mLen);\\n    e = e - eBias;\\n  }\\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\\n};\\n\\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\\n  var e, m, c;\\n  var eLen = nBytes * 8 - mLen - 1;\\n  var eMax = (1 << eLen) - 1;\\n  var eBias = eMax >> 1;\\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\\n  var i = isLE ? 0 : nBytes - 1;\\n  var d = isLE ? 1 : -1;\\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\\n\\n  value = Math.abs(value);\\n\\n  if (isNaN(value) || value === Infinity) {\\n    m = isNaN(value) ? 1 : 0;\\n    e = eMax;\\n  } else {\\n    e = Math.floor(Math.log(value) / Math.LN2);\\n    if (value * (c = Math.pow(2, -e)) < 1) {\\n      e--;\\n      c *= 2;\\n    }\\n    if (e + eBias >= 1) {\\n      value += rt / c;\\n    } else {\\n      value += rt * Math.pow(2, 1 - eBias);\\n    }\\n    if (value * c >= 2) {\\n      e++;\\n      c /= 2;\\n    }\\n\\n    if (e + eBias >= eMax) {\\n      m = 0;\\n      e = eMax;\\n    } else if (e + eBias >= 1) {\\n      m = (value * c - 1) * Math.pow(2, mLen);\\n      e = e + eBias;\\n    } else {\\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\\n      e = 0;\\n    }\\n  }\\n\\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\\n\\n  e = e << mLen | m;\\n  eLen += mLen;\\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\\n\\n  buffer[offset + i - d] |= s * 128;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcz85MTUyIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJyZWFkIiwiYnVmZmVyIiwib2Zmc2V0IiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlIiwibSIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsImkiLCJkIiwicyIsIk5hTiIsIkluZmluaXR5IiwiTWF0aCIsInBvdyIsIndyaXRlIiwidmFsdWUiLCJjIiwicnQiLCJhYnMiLCJpc05hTiIsImZsb29yIiwibG9nIiwiTE4yIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxRQUFRQyxJQUFSLEdBQWUsVUFBVUMsTUFBVixFQUFrQkMsTUFBbEIsRUFBMEJDLElBQTFCLEVBQWdDQyxJQUFoQyxFQUFzQ0MsTUFBdEMsRUFBOEM7QUFDM0QsTUFBSUMsQ0FBSixFQUFPQyxDQUFQO0FBQ0EsTUFBSUMsT0FBUUgsU0FBUyxDQUFWLEdBQWVELElBQWYsR0FBc0IsQ0FBakM7QUFDQSxNQUFJSyxPQUFPLENBQUMsS0FBS0QsSUFBTixJQUFjLENBQXpCO0FBQ0EsTUFBSUUsUUFBUUQsUUFBUSxDQUFwQjtBQUNBLE1BQUlFLFFBQVEsQ0FBQyxDQUFiO0FBQ0EsTUFBSUMsSUFBSVQsT0FBUUUsU0FBUyxDQUFqQixHQUFzQixDQUE5QjtBQUNBLE1BQUlRLElBQUlWLE9BQU8sQ0FBQyxDQUFSLEdBQVksQ0FBcEI7QUFDQSxNQUFJVyxJQUFJYixPQUFPQyxTQUFTVSxDQUFoQixDQUFSOztBQUVBQSxPQUFLQyxDQUFMOztBQUVBUCxNQUFJUSxJQUFLLENBQUMsS0FBTSxDQUFDSCxLQUFSLElBQWtCLENBQTNCO0FBQ0FHLFFBQU8sQ0FBQ0gsS0FBUjtBQUNBQSxXQUFTSCxJQUFUO0FBQ0EsU0FBT0csUUFBUSxDQUFmLEVBQWtCTCxJQUFLQSxJQUFJLEdBQUwsR0FBWUwsT0FBT0MsU0FBU1UsQ0FBaEIsQ0FBaEIsRUFBb0NBLEtBQUtDLENBQXpDLEVBQTRDRixTQUFTLENBQXZFLEVBQTBFLENBQUU7O0FBRTVFSixNQUFJRCxJQUFLLENBQUMsS0FBTSxDQUFDSyxLQUFSLElBQWtCLENBQTNCO0FBQ0FMLFFBQU8sQ0FBQ0ssS0FBUjtBQUNBQSxXQUFTUCxJQUFUO0FBQ0EsU0FBT08sUUFBUSxDQUFmLEVBQWtCSixJQUFLQSxJQUFJLEdBQUwsR0FBWU4sT0FBT0MsU0FBU1UsQ0FBaEIsQ0FBaEIsRUFBb0NBLEtBQUtDLENBQXpDLEVBQTRDRixTQUFTLENBQXZFLEVBQTBFLENBQUU7O0FBRTVFLE1BQUlMLE1BQU0sQ0FBVixFQUFhO0FBQ1hBLFFBQUksSUFBSUksS0FBUjtBQUNELEdBRkQsTUFFTyxJQUFJSixNQUFNRyxJQUFWLEVBQWdCO0FBQ3JCLFdBQU9GLElBQUlRLEdBQUosR0FBVyxDQUFDRCxJQUFJLENBQUMsQ0FBTCxHQUFTLENBQVYsSUFBZUUsUUFBakM7QUFDRCxHQUZNLE1BRUE7QUFDTFQsUUFBSUEsSUFBSVUsS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBWWQsSUFBWixDQUFSO0FBQ0FFLFFBQUlBLElBQUlJLEtBQVI7QUFDRDtBQUNELFNBQU8sQ0FBQ0ksSUFBSSxDQUFDLENBQUwsR0FBUyxDQUFWLElBQWVQLENBQWYsR0FBbUJVLEtBQUtDLEdBQUwsQ0FBUyxDQUFULEVBQVlaLElBQUlGLElBQWhCLENBQTFCO0FBQ0QsQ0EvQkQ7O0FBaUNBTCxRQUFRb0IsS0FBUixHQUFnQixVQUFVbEIsTUFBVixFQUFrQm1CLEtBQWxCLEVBQXlCbEIsTUFBekIsRUFBaUNDLElBQWpDLEVBQXVDQyxJQUF2QyxFQUE2Q0MsTUFBN0MsRUFBcUQ7QUFDbkUsTUFBSUMsQ0FBSixFQUFPQyxDQUFQLEVBQVVjLENBQVY7QUFDQSxNQUFJYixPQUFRSCxTQUFTLENBQVYsR0FBZUQsSUFBZixHQUFzQixDQUFqQztBQUNBLE1BQUlLLE9BQU8sQ0FBQyxLQUFLRCxJQUFOLElBQWMsQ0FBekI7QUFDQSxNQUFJRSxRQUFRRCxRQUFRLENBQXBCO0FBQ0EsTUFBSWEsS0FBTWxCLFNBQVMsRUFBVCxHQUFjYSxLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFZLENBQUMsRUFBYixJQUFtQkQsS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBWSxDQUFDLEVBQWIsQ0FBakMsR0FBb0QsQ0FBOUQ7QUFDQSxNQUFJTixJQUFJVCxPQUFPLENBQVAsR0FBWUUsU0FBUyxDQUE3QjtBQUNBLE1BQUlRLElBQUlWLE9BQU8sQ0FBUCxHQUFXLENBQUMsQ0FBcEI7QUFDQSxNQUFJVyxJQUFJTSxRQUFRLENBQVIsSUFBY0EsVUFBVSxDQUFWLElBQWUsSUFBSUEsS0FBSixHQUFZLENBQXpDLEdBQThDLENBQTlDLEdBQWtELENBQTFEOztBQUVBQSxVQUFRSCxLQUFLTSxHQUFMLENBQVNILEtBQVQsQ0FBUjs7QUFFQSxNQUFJSSxNQUFNSixLQUFOLEtBQWdCQSxVQUFVSixRQUE5QixFQUF3QztBQUN0Q1QsUUFBSWlCLE1BQU1KLEtBQU4sSUFBZSxDQUFmLEdBQW1CLENBQXZCO0FBQ0FkLFFBQUlHLElBQUo7QUFDRCxHQUhELE1BR087QUFDTEgsUUFBSVcsS0FBS1EsS0FBTCxDQUFXUixLQUFLUyxHQUFMLENBQVNOLEtBQVQsSUFBa0JILEtBQUtVLEdBQWxDLENBQUo7QUFDQSxRQUFJUCxTQUFTQyxJQUFJSixLQUFLQyxHQUFMLENBQVMsQ0FBVCxFQUFZLENBQUNaLENBQWIsQ0FBYixJQUFnQyxDQUFwQyxFQUF1QztBQUNyQ0E7QUFDQWUsV0FBSyxDQUFMO0FBQ0Q7QUFDRCxRQUFJZixJQUFJSSxLQUFKLElBQWEsQ0FBakIsRUFBb0I7QUFDbEJVLGVBQVNFLEtBQUtELENBQWQ7QUFDRCxLQUZELE1BRU87QUFDTEQsZUFBU0UsS0FBS0wsS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBWSxJQUFJUixLQUFoQixDQUFkO0FBQ0Q7QUFDRCxRQUFJVSxRQUFRQyxDQUFSLElBQWEsQ0FBakIsRUFBb0I7QUFDbEJmO0FBQ0FlLFdBQUssQ0FBTDtBQUNEOztBQUVELFFBQUlmLElBQUlJLEtBQUosSUFBYUQsSUFBakIsRUFBdUI7QUFDckJGLFVBQUksQ0FBSjtBQUNBRCxVQUFJRyxJQUFKO0FBQ0QsS0FIRCxNQUdPLElBQUlILElBQUlJLEtBQUosSUFBYSxDQUFqQixFQUFvQjtBQUN6QkgsVUFBSSxDQUFFYSxRQUFRQyxDQUFULEdBQWMsQ0FBZixJQUFvQkosS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBWWQsSUFBWixDQUF4QjtBQUNBRSxVQUFJQSxJQUFJSSxLQUFSO0FBQ0QsS0FITSxNQUdBO0FBQ0xILFVBQUlhLFFBQVFILEtBQUtDLEdBQUwsQ0FBUyxDQUFULEVBQVlSLFFBQVEsQ0FBcEIsQ0FBUixHQUFpQ08sS0FBS0MsR0FBTCxDQUFTLENBQVQsRUFBWWQsSUFBWixDQUFyQztBQUNBRSxVQUFJLENBQUo7QUFDRDtBQUNGOztBQUVELFNBQU9GLFFBQVEsQ0FBZixFQUFrQkgsT0FBT0MsU0FBU1UsQ0FBaEIsSUFBcUJMLElBQUksSUFBekIsRUFBK0JLLEtBQUtDLENBQXBDLEVBQXVDTixLQUFLLEdBQTVDLEVBQWlESCxRQUFRLENBQTNFLEVBQThFLENBQUU7O0FBRWhGRSxNQUFLQSxLQUFLRixJQUFOLEdBQWNHLENBQWxCO0FBQ0FDLFVBQVFKLElBQVI7QUFDQSxTQUFPSSxPQUFPLENBQWQsRUFBaUJQLE9BQU9DLFNBQVNVLENBQWhCLElBQXFCTixJQUFJLElBQXpCLEVBQStCTSxLQUFLQyxDQUFwQyxFQUF1Q1AsS0FBSyxHQUE1QyxFQUFpREUsUUFBUSxDQUExRSxFQUE2RSxDQUFFOztBQUUvRVAsU0FBT0MsU0FBU1UsQ0FBVCxHQUFhQyxDQUFwQixLQUEwQkMsSUFBSSxHQUE5QjtBQUNELENBbEREIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\\n\");\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"\\n\\nvar toString = {}.toString;\\n\\nmodule.exports = Array.isArray || function (arr) {\\n  return toString.call(arr) == '[object Array]';\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcz9lM2RiIl0sIm5hbWVzIjpbInRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsIkFycmF5IiwiaXNBcnJheSIsImFyciIsImNhbGwiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsV0FBVyxHQUFHQSxRQUFsQjs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQkMsTUFBTUMsT0FBTixJQUFpQixVQUFVQyxHQUFWLEVBQWU7QUFDL0MsU0FBT0wsU0FBU00sSUFBVCxDQUFjRCxHQUFkLEtBQXNCLGdCQUE3QjtBQUNELENBRkQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/isarray/index.js\\n\");\n\n//# sourceURL=webpack:///./node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/jquery-touchswipe/jquery.touchSwipe.min.js":
/*!*****************************************************************!*\
  !*** ./node_modules/jquery-touchswipe/jquery.touchSwipe.min.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\\n\\nvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n/*!\\n * @fileOverview TouchSwipe - jQuery Plugin\\n * @version 1.6.18\\n *\\n * @author Matt Bryson http://www.github.com/mattbryson\\n * @see https://github.com/mattbryson/TouchSwipe-Jquery-Plugin\\n * @see http://labs.rampinteractive.co.uk/touchSwipe/\\n * @see http://plugins.jquery.com/project/touchSwipe\\n * @license\\n * Copyright (c) 2010-2015 Matt Bryson\\n * Dual licensed under the MIT or GPL Version 2 licenses.\\n *\\n */\\n!function (factory) {\\n  \\\"function\\\" == \\\"function\\\" && __webpack_require__(/*! !webpack amd options */ \\\"./node_modules/webpack/buildin/amd-options.js\\\") && __webpack_require__(/*! !webpack amd options */ \\\"./node_modules/webpack/buildin/amd-options.js\\\").jQuery ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \\\"./node_modules/jquery/dist/jquery.js\\\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(\\\"undefined\\\" != typeof module && module.exports ? __webpack_require__(/*! jquery */ \\\"./node_modules/jquery/dist/jquery.js\\\") : jQuery);\\n}(function ($) {\\n  \\\"use strict\\\";\\n  function init(options) {\\n    return !options || void 0 !== options.allowPageScroll || void 0 === options.swipe && void 0 === options.swipeStatus || (options.allowPageScroll = NONE), void 0 !== options.click && void 0 === options.tap && (options.tap = options.click), options || (options = {}), options = $.extend({}, $.fn.swipe.defaults, options), this.each(function () {\\n      var $this = $(this),\\n          plugin = $this.data(PLUGIN_NS);plugin || (plugin = new TouchSwipe(this, options), $this.data(PLUGIN_NS, plugin));\\n    });\\n  }function TouchSwipe(element, options) {\\n    function touchStart(jqEvent) {\\n      if (!(getTouchInProgress() || $(jqEvent.target).closest(options.excludedElements, $element).length > 0)) {\\n        var event = jqEvent.originalEvent ? jqEvent.originalEvent : jqEvent;if (!event.pointerType || \\\"mouse\\\" != event.pointerType || 0 != options.fallbackToMouseEvents) {\\n          var ret,\\n              touches = event.touches,\\n              evt = touches ? touches[0] : event;return phase = PHASE_START, touches ? fingerCount = touches.length : options.preventDefaultEvents !== !1 && jqEvent.preventDefault(), distance = 0, direction = null, currentDirection = null, pinchDirection = null, duration = 0, startTouchesDistance = 0, endTouchesDistance = 0, pinchZoom = 1, pinchDistance = 0, maximumsMap = createMaximumsData(), cancelMultiFingerRelease(), createFingerData(0, evt), !touches || fingerCount === options.fingers || options.fingers === ALL_FINGERS || hasPinches() ? (startTime = getTimeStamp(), 2 == fingerCount && (createFingerData(1, touches[1]), startTouchesDistance = endTouchesDistance = calculateTouchesDistance(fingerData[0].start, fingerData[1].start)), (options.swipeStatus || options.pinchStatus) && (ret = triggerHandler(event, phase))) : ret = !1, ret === !1 ? (phase = PHASE_CANCEL, triggerHandler(event, phase), ret) : (options.hold && (holdTimeout = setTimeout($.proxy(function () {\\n            $element.trigger(\\\"hold\\\", [event.target]), options.hold && (ret = options.hold.call($element, event, event.target));\\n          }, this), options.longTapThreshold)), setTouchInProgress(!0), null);\\n        }\\n      }\\n    }function touchMove(jqEvent) {\\n      var event = jqEvent.originalEvent ? jqEvent.originalEvent : jqEvent;if (phase !== PHASE_END && phase !== PHASE_CANCEL && !inMultiFingerRelease()) {\\n        var ret,\\n            touches = event.touches,\\n            evt = touches ? touches[0] : event,\\n            currentFinger = updateFingerData(evt);if (endTime = getTimeStamp(), touches && (fingerCount = touches.length), options.hold && clearTimeout(holdTimeout), phase = PHASE_MOVE, 2 == fingerCount && (0 == startTouchesDistance ? (createFingerData(1, touches[1]), startTouchesDistance = endTouchesDistance = calculateTouchesDistance(fingerData[0].start, fingerData[1].start)) : (updateFingerData(touches[1]), endTouchesDistance = calculateTouchesDistance(fingerData[0].end, fingerData[1].end), pinchDirection = calculatePinchDirection(fingerData[0].end, fingerData[1].end)), pinchZoom = calculatePinchZoom(startTouchesDistance, endTouchesDistance), pinchDistance = Math.abs(startTouchesDistance - endTouchesDistance)), fingerCount === options.fingers || options.fingers === ALL_FINGERS || !touches || hasPinches()) {\\n          if (direction = calculateDirection(currentFinger.start, currentFinger.end), currentDirection = calculateDirection(currentFinger.last, currentFinger.end), validateDefaultEvent(jqEvent, currentDirection), distance = calculateDistance(currentFinger.start, currentFinger.end), duration = calculateDuration(), setMaxDistance(direction, distance), ret = triggerHandler(event, phase), !options.triggerOnTouchEnd || options.triggerOnTouchLeave) {\\n            var inBounds = !0;if (options.triggerOnTouchLeave) {\\n              var bounds = getbounds(this);inBounds = isInBounds(currentFinger.end, bounds);\\n            }!options.triggerOnTouchEnd && inBounds ? phase = getNextPhase(PHASE_MOVE) : options.triggerOnTouchLeave && !inBounds && (phase = getNextPhase(PHASE_END)), phase != PHASE_CANCEL && phase != PHASE_END || triggerHandler(event, phase);\\n          }\\n        } else phase = PHASE_CANCEL, triggerHandler(event, phase);ret === !1 && (phase = PHASE_CANCEL, triggerHandler(event, phase));\\n      }\\n    }function touchEnd(jqEvent) {\\n      var event = jqEvent.originalEvent ? jqEvent.originalEvent : jqEvent,\\n          touches = event.touches;if (touches) {\\n        if (touches.length && !inMultiFingerRelease()) return startMultiFingerRelease(event), !0;if (touches.length && inMultiFingerRelease()) return !0;\\n      }return inMultiFingerRelease() && (fingerCount = fingerCountAtRelease), endTime = getTimeStamp(), duration = calculateDuration(), didSwipeBackToCancel() || !validateSwipeDistance() ? (phase = PHASE_CANCEL, triggerHandler(event, phase)) : options.triggerOnTouchEnd || options.triggerOnTouchEnd === !1 && phase === PHASE_MOVE ? (options.preventDefaultEvents !== !1 && jqEvent.cancelable !== !1 && jqEvent.preventDefault(), phase = PHASE_END, triggerHandler(event, phase)) : !options.triggerOnTouchEnd && hasTap() ? (phase = PHASE_END, triggerHandlerForGesture(event, phase, TAP)) : phase === PHASE_MOVE && (phase = PHASE_CANCEL, triggerHandler(event, phase)), setTouchInProgress(!1), null;\\n    }function touchCancel() {\\n      fingerCount = 0, endTime = 0, startTime = 0, startTouchesDistance = 0, endTouchesDistance = 0, pinchZoom = 1, cancelMultiFingerRelease(), setTouchInProgress(!1);\\n    }function touchLeave(jqEvent) {\\n      var event = jqEvent.originalEvent ? jqEvent.originalEvent : jqEvent;options.triggerOnTouchLeave && (phase = getNextPhase(PHASE_END), triggerHandler(event, phase));\\n    }function removeListeners() {\\n      $element.unbind(START_EV, touchStart), $element.unbind(CANCEL_EV, touchCancel), $element.unbind(MOVE_EV, touchMove), $element.unbind(END_EV, touchEnd), LEAVE_EV && $element.unbind(LEAVE_EV, touchLeave), setTouchInProgress(!1);\\n    }function getNextPhase(currentPhase) {\\n      var nextPhase = currentPhase,\\n          validTime = validateSwipeTime(),\\n          validDistance = validateSwipeDistance(),\\n          didCancel = didSwipeBackToCancel();return !validTime || didCancel ? nextPhase = PHASE_CANCEL : !validDistance || currentPhase != PHASE_MOVE || options.triggerOnTouchEnd && !options.triggerOnTouchLeave ? !validDistance && currentPhase == PHASE_END && options.triggerOnTouchLeave && (nextPhase = PHASE_CANCEL) : nextPhase = PHASE_END, nextPhase;\\n    }function triggerHandler(event, phase) {\\n      var ret,\\n          touches = event.touches;return (didSwipe() || hasSwipes()) && (ret = triggerHandlerForGesture(event, phase, SWIPE)), (didPinch() || hasPinches()) && ret !== !1 && (ret = triggerHandlerForGesture(event, phase, PINCH)), didDoubleTap() && ret !== !1 ? ret = triggerHandlerForGesture(event, phase, DOUBLE_TAP) : didLongTap() && ret !== !1 ? ret = triggerHandlerForGesture(event, phase, LONG_TAP) : didTap() && ret !== !1 && (ret = triggerHandlerForGesture(event, phase, TAP)), phase === PHASE_CANCEL && touchCancel(event), phase === PHASE_END && (touches ? touches.length || touchCancel(event) : touchCancel(event)), ret;\\n    }function triggerHandlerForGesture(event, phase, gesture) {\\n      var ret;if (gesture == SWIPE) {\\n        if ($element.trigger(\\\"swipeStatus\\\", [phase, direction || null, distance || 0, duration || 0, fingerCount, fingerData, currentDirection]), options.swipeStatus && (ret = options.swipeStatus.call($element, event, phase, direction || null, distance || 0, duration || 0, fingerCount, fingerData, currentDirection), ret === !1)) return !1;if (phase == PHASE_END && validateSwipe()) {\\n          if (clearTimeout(singleTapTimeout), clearTimeout(holdTimeout), $element.trigger(\\\"swipe\\\", [direction, distance, duration, fingerCount, fingerData, currentDirection]), options.swipe && (ret = options.swipe.call($element, event, direction, distance, duration, fingerCount, fingerData, currentDirection), ret === !1)) return !1;switch (direction) {case LEFT:\\n              $element.trigger(\\\"swipeLeft\\\", [direction, distance, duration, fingerCount, fingerData, currentDirection]), options.swipeLeft && (ret = options.swipeLeft.call($element, event, direction, distance, duration, fingerCount, fingerData, currentDirection));break;case RIGHT:\\n              $element.trigger(\\\"swipeRight\\\", [direction, distance, duration, fingerCount, fingerData, currentDirection]), options.swipeRight && (ret = options.swipeRight.call($element, event, direction, distance, duration, fingerCount, fingerData, currentDirection));break;case UP:\\n              $element.trigger(\\\"swipeUp\\\", [direction, distance, duration, fingerCount, fingerData, currentDirection]), options.swipeUp && (ret = options.swipeUp.call($element, event, direction, distance, duration, fingerCount, fingerData, currentDirection));break;case DOWN:\\n              $element.trigger(\\\"swipeDown\\\", [direction, distance, duration, fingerCount, fingerData, currentDirection]), options.swipeDown && (ret = options.swipeDown.call($element, event, direction, distance, duration, fingerCount, fingerData, currentDirection));}\\n        }\\n      }if (gesture == PINCH) {\\n        if ($element.trigger(\\\"pinchStatus\\\", [phase, pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom, fingerData]), options.pinchStatus && (ret = options.pinchStatus.call($element, event, phase, pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom, fingerData), ret === !1)) return !1;if (phase == PHASE_END && validatePinch()) switch (pinchDirection) {case IN:\\n            $element.trigger(\\\"pinchIn\\\", [pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom, fingerData]), options.pinchIn && (ret = options.pinchIn.call($element, event, pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom, fingerData));break;case OUT:\\n            $element.trigger(\\\"pinchOut\\\", [pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom, fingerData]), options.pinchOut && (ret = options.pinchOut.call($element, event, pinchDirection || null, pinchDistance || 0, duration || 0, fingerCount, pinchZoom, fingerData));}\\n      }return gesture == TAP ? phase !== PHASE_CANCEL && phase !== PHASE_END || (clearTimeout(singleTapTimeout), clearTimeout(holdTimeout), hasDoubleTap() && !inDoubleTap() ? (doubleTapStartTime = getTimeStamp(), singleTapTimeout = setTimeout($.proxy(function () {\\n        doubleTapStartTime = null, $element.trigger(\\\"tap\\\", [event.target]), options.tap && (ret = options.tap.call($element, event, event.target));\\n      }, this), options.doubleTapThreshold)) : (doubleTapStartTime = null, $element.trigger(\\\"tap\\\", [event.target]), options.tap && (ret = options.tap.call($element, event, event.target)))) : gesture == DOUBLE_TAP ? phase !== PHASE_CANCEL && phase !== PHASE_END || (clearTimeout(singleTapTimeout), clearTimeout(holdTimeout), doubleTapStartTime = null, $element.trigger(\\\"doubletap\\\", [event.target]), options.doubleTap && (ret = options.doubleTap.call($element, event, event.target))) : gesture == LONG_TAP && (phase !== PHASE_CANCEL && phase !== PHASE_END || (clearTimeout(singleTapTimeout), doubleTapStartTime = null, $element.trigger(\\\"longtap\\\", [event.target]), options.longTap && (ret = options.longTap.call($element, event, event.target)))), ret;\\n    }function validateSwipeDistance() {\\n      var valid = !0;return null !== options.threshold && (valid = distance >= options.threshold), valid;\\n    }function didSwipeBackToCancel() {\\n      var cancelled = !1;return null !== options.cancelThreshold && null !== direction && (cancelled = getMaxDistance(direction) - distance >= options.cancelThreshold), cancelled;\\n    }function validatePinchDistance() {\\n      return null === options.pinchThreshold || pinchDistance >= options.pinchThreshold;\\n    }function validateSwipeTime() {\\n      var result;return result = !options.maxTimeThreshold || !(duration >= options.maxTimeThreshold);\\n    }function validateDefaultEvent(jqEvent, direction) {\\n      if (options.preventDefaultEvents !== !1) if (options.allowPageScroll === NONE) jqEvent.preventDefault();else {\\n        var auto = options.allowPageScroll === AUTO;switch (direction) {case LEFT:\\n            (options.swipeLeft && auto || !auto && options.allowPageScroll != HORIZONTAL) && jqEvent.preventDefault();break;case RIGHT:\\n            (options.swipeRight && auto || !auto && options.allowPageScroll != HORIZONTAL) && jqEvent.preventDefault();break;case UP:\\n            (options.swipeUp && auto || !auto && options.allowPageScroll != VERTICAL) && jqEvent.preventDefault();break;case DOWN:\\n            (options.swipeDown && auto || !auto && options.allowPageScroll != VERTICAL) && jqEvent.preventDefault();break;case NONE:}\\n      }\\n    }function validatePinch() {\\n      var hasCorrectFingerCount = validateFingers(),\\n          hasEndPoint = validateEndPoint(),\\n          hasCorrectDistance = validatePinchDistance();return hasCorrectFingerCount && hasEndPoint && hasCorrectDistance;\\n    }function hasPinches() {\\n      return !!(options.pinchStatus || options.pinchIn || options.pinchOut);\\n    }function didPinch() {\\n      return !(!validatePinch() || !hasPinches());\\n    }function validateSwipe() {\\n      var hasValidTime = validateSwipeTime(),\\n          hasValidDistance = validateSwipeDistance(),\\n          hasCorrectFingerCount = validateFingers(),\\n          hasEndPoint = validateEndPoint(),\\n          didCancel = didSwipeBackToCancel(),\\n          valid = !didCancel && hasEndPoint && hasCorrectFingerCount && hasValidDistance && hasValidTime;return valid;\\n    }function hasSwipes() {\\n      return !!(options.swipe || options.swipeStatus || options.swipeLeft || options.swipeRight || options.swipeUp || options.swipeDown);\\n    }function didSwipe() {\\n      return !(!validateSwipe() || !hasSwipes());\\n    }function validateFingers() {\\n      return fingerCount === options.fingers || options.fingers === ALL_FINGERS || !SUPPORTS_TOUCH;\\n    }function validateEndPoint() {\\n      return 0 !== fingerData[0].end.x;\\n    }function hasTap() {\\n      return !!options.tap;\\n    }function hasDoubleTap() {\\n      return !!options.doubleTap;\\n    }function hasLongTap() {\\n      return !!options.longTap;\\n    }function validateDoubleTap() {\\n      if (null == doubleTapStartTime) return !1;var now = getTimeStamp();return hasDoubleTap() && now - doubleTapStartTime <= options.doubleTapThreshold;\\n    }function inDoubleTap() {\\n      return validateDoubleTap();\\n    }function validateTap() {\\n      return (1 === fingerCount || !SUPPORTS_TOUCH) && (isNaN(distance) || distance < options.threshold);\\n    }function validateLongTap() {\\n      return duration > options.longTapThreshold && distance < DOUBLE_TAP_THRESHOLD;\\n    }function didTap() {\\n      return !(!validateTap() || !hasTap());\\n    }function didDoubleTap() {\\n      return !(!validateDoubleTap() || !hasDoubleTap());\\n    }function didLongTap() {\\n      return !(!validateLongTap() || !hasLongTap());\\n    }function startMultiFingerRelease(event) {\\n      previousTouchEndTime = getTimeStamp(), fingerCountAtRelease = event.touches.length + 1;\\n    }function cancelMultiFingerRelease() {\\n      previousTouchEndTime = 0, fingerCountAtRelease = 0;\\n    }function inMultiFingerRelease() {\\n      var withinThreshold = !1;if (previousTouchEndTime) {\\n        var diff = getTimeStamp() - previousTouchEndTime;diff <= options.fingerReleaseThreshold && (withinThreshold = !0);\\n      }return withinThreshold;\\n    }function getTouchInProgress() {\\n      return !($element.data(PLUGIN_NS + \\\"_intouch\\\") !== !0);\\n    }function setTouchInProgress(val) {\\n      $element && (val === !0 ? ($element.bind(MOVE_EV, touchMove), $element.bind(END_EV, touchEnd), LEAVE_EV && $element.bind(LEAVE_EV, touchLeave)) : ($element.unbind(MOVE_EV, touchMove, !1), $element.unbind(END_EV, touchEnd, !1), LEAVE_EV && $element.unbind(LEAVE_EV, touchLeave, !1)), $element.data(PLUGIN_NS + \\\"_intouch\\\", val === !0));\\n    }function createFingerData(id, evt) {\\n      var f = { start: { x: 0, y: 0 }, last: { x: 0, y: 0 }, end: { x: 0, y: 0 } };return f.start.x = f.last.x = f.end.x = evt.pageX || evt.clientX, f.start.y = f.last.y = f.end.y = evt.pageY || evt.clientY, fingerData[id] = f, f;\\n    }function updateFingerData(evt) {\\n      var id = void 0 !== evt.identifier ? evt.identifier : 0,\\n          f = getFingerData(id);return null === f && (f = createFingerData(id, evt)), f.last.x = f.end.x, f.last.y = f.end.y, f.end.x = evt.pageX || evt.clientX, f.end.y = evt.pageY || evt.clientY, f;\\n    }function getFingerData(id) {\\n      return fingerData[id] || null;\\n    }function setMaxDistance(direction, distance) {\\n      direction != NONE && (distance = Math.max(distance, getMaxDistance(direction)), maximumsMap[direction].distance = distance);\\n    }function getMaxDistance(direction) {\\n      if (maximumsMap[direction]) return maximumsMap[direction].distance;\\n    }function createMaximumsData() {\\n      var maxData = {};return maxData[LEFT] = createMaximumVO(LEFT), maxData[RIGHT] = createMaximumVO(RIGHT), maxData[UP] = createMaximumVO(UP), maxData[DOWN] = createMaximumVO(DOWN), maxData;\\n    }function createMaximumVO(dir) {\\n      return { direction: dir, distance: 0 };\\n    }function calculateDuration() {\\n      return endTime - startTime;\\n    }function calculateTouchesDistance(startPoint, endPoint) {\\n      var diffX = Math.abs(startPoint.x - endPoint.x),\\n          diffY = Math.abs(startPoint.y - endPoint.y);return Math.round(Math.sqrt(diffX * diffX + diffY * diffY));\\n    }function calculatePinchZoom(startDistance, endDistance) {\\n      var percent = endDistance / startDistance * 1;return percent.toFixed(2);\\n    }function calculatePinchDirection() {\\n      return pinchZoom < 1 ? OUT : IN;\\n    }function calculateDistance(startPoint, endPoint) {\\n      return Math.round(Math.sqrt(Math.pow(endPoint.x - startPoint.x, 2) + Math.pow(endPoint.y - startPoint.y, 2)));\\n    }function calculateAngle(startPoint, endPoint) {\\n      var x = startPoint.x - endPoint.x,\\n          y = endPoint.y - startPoint.y,\\n          r = Math.atan2(y, x),\\n          angle = Math.round(180 * r / Math.PI);return angle < 0 && (angle = 360 - Math.abs(angle)), angle;\\n    }function calculateDirection(startPoint, endPoint) {\\n      if (comparePoints(startPoint, endPoint)) return NONE;var angle = calculateAngle(startPoint, endPoint);return angle <= 45 && angle >= 0 ? LEFT : angle <= 360 && angle >= 315 ? LEFT : angle >= 135 && angle <= 225 ? RIGHT : angle > 45 && angle < 135 ? DOWN : UP;\\n    }function getTimeStamp() {\\n      var now = new Date();return now.getTime();\\n    }function getbounds(el) {\\n      el = $(el);var offset = el.offset(),\\n          bounds = { left: offset.left, right: offset.left + el.outerWidth(), top: offset.top, bottom: offset.top + el.outerHeight() };return bounds;\\n    }function isInBounds(point, bounds) {\\n      return point.x > bounds.left && point.x < bounds.right && point.y > bounds.top && point.y < bounds.bottom;\\n    }function comparePoints(pointA, pointB) {\\n      return pointA.x == pointB.x && pointA.y == pointB.y;\\n    }var options = $.extend({}, options),\\n        useTouchEvents = SUPPORTS_TOUCH || SUPPORTS_POINTER || !options.fallbackToMouseEvents,\\n        START_EV = useTouchEvents ? SUPPORTS_POINTER ? SUPPORTS_POINTER_IE10 ? \\\"MSPointerDown\\\" : \\\"pointerdown\\\" : \\\"touchstart\\\" : \\\"mousedown\\\",\\n        MOVE_EV = useTouchEvents ? SUPPORTS_POINTER ? SUPPORTS_POINTER_IE10 ? \\\"MSPointerMove\\\" : \\\"pointermove\\\" : \\\"touchmove\\\" : \\\"mousemove\\\",\\n        END_EV = useTouchEvents ? SUPPORTS_POINTER ? SUPPORTS_POINTER_IE10 ? \\\"MSPointerUp\\\" : \\\"pointerup\\\" : \\\"touchend\\\" : \\\"mouseup\\\",\\n        LEAVE_EV = useTouchEvents ? SUPPORTS_POINTER ? \\\"mouseleave\\\" : null : \\\"mouseleave\\\",\\n        CANCEL_EV = SUPPORTS_POINTER ? SUPPORTS_POINTER_IE10 ? \\\"MSPointerCancel\\\" : \\\"pointercancel\\\" : \\\"touchcancel\\\",\\n        distance = 0,\\n        direction = null,\\n        currentDirection = null,\\n        duration = 0,\\n        startTouchesDistance = 0,\\n        endTouchesDistance = 0,\\n        pinchZoom = 1,\\n        pinchDistance = 0,\\n        pinchDirection = 0,\\n        maximumsMap = null,\\n        $element = $(element),\\n        phase = \\\"start\\\",\\n        fingerCount = 0,\\n        fingerData = {},\\n        startTime = 0,\\n        endTime = 0,\\n        previousTouchEndTime = 0,\\n        fingerCountAtRelease = 0,\\n        doubleTapStartTime = 0,\\n        singleTapTimeout = null,\\n        holdTimeout = null;try {\\n      $element.bind(START_EV, touchStart), $element.bind(CANCEL_EV, touchCancel);\\n    } catch (e) {\\n      $.error(\\\"events not supported \\\" + START_EV + \\\",\\\" + CANCEL_EV + \\\" on jQuery.swipe\\\");\\n    }this.enable = function () {\\n      return this.disable(), $element.bind(START_EV, touchStart), $element.bind(CANCEL_EV, touchCancel), $element;\\n    }, this.disable = function () {\\n      return removeListeners(), $element;\\n    }, this.destroy = function () {\\n      removeListeners(), $element.data(PLUGIN_NS, null), $element = null;\\n    }, this.option = function (property, value) {\\n      if (\\\"object\\\" == (typeof property === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(property))) options = $.extend(options, property);else if (void 0 !== options[property]) {\\n        if (void 0 === value) return options[property];options[property] = value;\\n      } else {\\n        if (!property) return options;$.error(\\\"Option \\\" + property + \\\" does not exist on jQuery.swipe.options\\\");\\n      }return null;\\n    };\\n  }var VERSION = \\\"1.6.18\\\",\\n      LEFT = \\\"left\\\",\\n      RIGHT = \\\"right\\\",\\n      UP = \\\"up\\\",\\n      DOWN = \\\"down\\\",\\n      IN = \\\"in\\\",\\n      OUT = \\\"out\\\",\\n      NONE = \\\"none\\\",\\n      AUTO = \\\"auto\\\",\\n      SWIPE = \\\"swipe\\\",\\n      PINCH = \\\"pinch\\\",\\n      TAP = \\\"tap\\\",\\n      DOUBLE_TAP = \\\"doubletap\\\",\\n      LONG_TAP = \\\"longtap\\\",\\n      HORIZONTAL = \\\"horizontal\\\",\\n      VERTICAL = \\\"vertical\\\",\\n      ALL_FINGERS = \\\"all\\\",\\n      DOUBLE_TAP_THRESHOLD = 10,\\n      PHASE_START = \\\"start\\\",\\n      PHASE_MOVE = \\\"move\\\",\\n      PHASE_END = \\\"end\\\",\\n      PHASE_CANCEL = \\\"cancel\\\",\\n      SUPPORTS_TOUCH = \\\"ontouchstart\\\" in window,\\n      SUPPORTS_POINTER_IE10 = window.navigator.msPointerEnabled && !window.navigator.pointerEnabled && !SUPPORTS_TOUCH,\\n      SUPPORTS_POINTER = (window.navigator.pointerEnabled || window.navigator.msPointerEnabled) && !SUPPORTS_TOUCH,\\n      PLUGIN_NS = \\\"TouchSwipe\\\",\\n      defaults = { fingers: 1, threshold: 75, cancelThreshold: null, pinchThreshold: 20, maxTimeThreshold: null, fingerReleaseThreshold: 250, longTapThreshold: 500, doubleTapThreshold: 200, swipe: null, swipeLeft: null, swipeRight: null, swipeUp: null, swipeDown: null, swipeStatus: null, pinchIn: null, pinchOut: null, pinchStatus: null, click: null, tap: null, doubleTap: null, longTap: null, hold: null, triggerOnTouchEnd: !0, triggerOnTouchLeave: !1, allowPageScroll: \\\"auto\\\", fallbackToMouseEvents: !0, excludedElements: \\\".noSwipe\\\", preventDefaultEvents: !0 };$.fn.swipe = function (method) {\\n    var $this = $(this),\\n        plugin = $this.data(PLUGIN_NS);if (plugin && \\\"string\\\" == typeof method) {\\n      if (plugin[method]) return plugin[method].apply(plugin, Array.prototype.slice.call(arguments, 1));$.error(\\\"Method \\\" + method + \\\" does not exist on jQuery.swipe\\\");\\n    } else if (plugin && \\\"object\\\" == (typeof method === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(method))) plugin.option.apply(plugin, arguments);else if (!(plugin || \\\"object\\\" != (typeof method === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(method)) && method)) return init.apply(this, arguments);return $this;\\n  }, $.fn.swipe.version = VERSION, $.fn.swipe.defaults = defaults, $.fn.swipe.phases = { PHASE_START: PHASE_START, PHASE_MOVE: PHASE_MOVE, PHASE_END: PHASE_END, PHASE_CANCEL: PHASE_CANCEL }, $.fn.swipe.directions = { LEFT: LEFT, RIGHT: RIGHT, UP: UP, DOWN: DOWN, IN: IN, OUT: OUT }, $.fn.swipe.pageScroll = { NONE: NONE, HORIZONTAL: HORIZONTAL, VERTICAL: VERTICAL, AUTO: AUTO }, $.fn.swipe.fingers = { ONE: 1, TWO: 2, THREE: 3, FOUR: 4, FIVE: 5, ALL: ALL_FINGERS };\\n});\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \\\"./node_modules/jquery/dist/jquery.js\\\")))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/jquery-touchswipe/jquery.touchSwipe.min.js\\n\");\n\n//# sourceURL=webpack:///./node_modules/jquery-touchswipe/jquery.touchSwipe.min.js?");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\\n\\nvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n/*!\\n * jQuery JavaScript Library v3.3.1\\n * https://jquery.com/\\n *\\n * Includes Sizzle.js\\n * https://sizzlejs.com/\\n *\\n * Copyright JS Foundation and other contributors\\n * Released under the MIT license\\n * https://jquery.org/license\\n *\\n * Date: 2018-01-20T17:24Z\\n */\\n(function (global, factory) {\\n\\n\\t\\\"use strict\\\";\\n\\n\\tif (( false ? undefined : _typeof(module)) === \\\"object\\\" && _typeof(module.exports) === \\\"object\\\") {\\n\\n\\t\\t// For CommonJS and CommonJS-like environments where a proper `window`\\n\\t\\t// is present, execute the factory and get jQuery.\\n\\t\\t// For environments that do not have a `window` with a `document`\\n\\t\\t// (such as Node.js), expose a factory as module.exports.\\n\\t\\t// This accentuates the need for the creation of a real `window`.\\n\\t\\t// e.g. var jQuery = require(\\\"jquery\\\")(window);\\n\\t\\t// See ticket #14549 for more info.\\n\\t\\tmodule.exports = global.document ? factory(global, true) : function (w) {\\n\\t\\t\\tif (!w.document) {\\n\\t\\t\\t\\tthrow new Error(\\\"jQuery requires a window with a document\\\");\\n\\t\\t\\t}\\n\\t\\t\\treturn factory(w);\\n\\t\\t};\\n\\t} else {\\n\\t\\tfactory(global);\\n\\t}\\n\\n\\t// Pass this if window is not defined yet\\n})(typeof window !== \\\"undefined\\\" ? window : undefined, function (window, noGlobal) {\\n\\n\\t// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\\n\\t// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\\n\\t// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\\n\\t// enough that all such attempts are guarded in a try block.\\n\\t\\\"use strict\\\";\\n\\n\\tvar arr = [];\\n\\n\\tvar document = window.document;\\n\\n\\tvar getProto = Object.getPrototypeOf;\\n\\n\\tvar _slice = arr.slice;\\n\\n\\tvar concat = arr.concat;\\n\\n\\tvar push = arr.push;\\n\\n\\tvar indexOf = arr.indexOf;\\n\\n\\tvar class2type = {};\\n\\n\\tvar toString = class2type.toString;\\n\\n\\tvar hasOwn = class2type.hasOwnProperty;\\n\\n\\tvar fnToString = hasOwn.toString;\\n\\n\\tvar ObjectFunctionString = fnToString.call(Object);\\n\\n\\tvar support = {};\\n\\n\\tvar isFunction = function isFunction(obj) {\\n\\n\\t\\t// Support: Chrome <=57, Firefox <=52\\n\\t\\t// In some browsers, typeof returns \\\"function\\\" for HTML <object> elements\\n\\t\\t// (i.e., `typeof document.createElement( \\\"object\\\" ) === \\\"function\\\"`).\\n\\t\\t// We don't want to classify *any* DOM node as a function.\\n\\t\\treturn typeof obj === \\\"function\\\" && typeof obj.nodeType !== \\\"number\\\";\\n\\t};\\n\\n\\tvar isWindow = function isWindow(obj) {\\n\\t\\treturn obj != null && obj === obj.window;\\n\\t};\\n\\n\\tvar preservedScriptAttributes = {\\n\\t\\ttype: true,\\n\\t\\tsrc: true,\\n\\t\\tnoModule: true\\n\\t};\\n\\n\\tfunction DOMEval(code, doc, node) {\\n\\t\\tdoc = doc || document;\\n\\n\\t\\tvar i,\\n\\t\\t    script = doc.createElement(\\\"script\\\");\\n\\n\\t\\tscript.text = code;\\n\\t\\tif (node) {\\n\\t\\t\\tfor (i in preservedScriptAttributes) {\\n\\t\\t\\t\\tif (node[i]) {\\n\\t\\t\\t\\t\\tscript[i] = node[i];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tdoc.head.appendChild(script).parentNode.removeChild(script);\\n\\t}\\n\\n\\tfunction toType(obj) {\\n\\t\\tif (obj == null) {\\n\\t\\t\\treturn obj + \\\"\\\";\\n\\t\\t}\\n\\n\\t\\t// Support: Android <=2.3 only (functionish RegExp)\\n\\t\\treturn (typeof obj === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(obj)) === \\\"object\\\" || typeof obj === \\\"function\\\" ? class2type[toString.call(obj)] || \\\"object\\\" : typeof obj === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(obj);\\n\\t}\\n\\t/* global Symbol */\\n\\t// Defining this global in .eslintrc.json would create a danger of using the global\\n\\t// unguarded in another place, it seems safer to define global only for this module\\n\\n\\n\\tvar version = \\\"3.3.1\\\",\\n\\n\\n\\t// Define a local copy of jQuery\\n\\tjQuery = function jQuery(selector, context) {\\n\\n\\t\\t// The jQuery object is actually just the init constructor 'enhanced'\\n\\t\\t// Need init if jQuery is called (just allow error to be thrown if not included)\\n\\t\\treturn new jQuery.fn.init(selector, context);\\n\\t},\\n\\n\\n\\t// Support: Android <=4.0 only\\n\\t// Make sure we trim BOM and NBSP\\n\\trtrim = /^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$/g;\\n\\n\\tjQuery.fn = jQuery.prototype = {\\n\\n\\t\\t// The current version of jQuery being used\\n\\t\\tjquery: version,\\n\\n\\t\\tconstructor: jQuery,\\n\\n\\t\\t// The default length of a jQuery object is 0\\n\\t\\tlength: 0,\\n\\n\\t\\ttoArray: function toArray() {\\n\\t\\t\\treturn _slice.call(this);\\n\\t\\t},\\n\\n\\t\\t// Get the Nth element in the matched element set OR\\n\\t\\t// Get the whole matched element set as a clean array\\n\\t\\tget: function get(num) {\\n\\n\\t\\t\\t// Return all the elements in a clean array\\n\\t\\t\\tif (num == null) {\\n\\t\\t\\t\\treturn _slice.call(this);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Return just the one element from the set\\n\\t\\t\\treturn num < 0 ? this[num + this.length] : this[num];\\n\\t\\t},\\n\\n\\t\\t// Take an array of elements and push it onto the stack\\n\\t\\t// (returning the new matched element set)\\n\\t\\tpushStack: function pushStack(elems) {\\n\\n\\t\\t\\t// Build a new jQuery matched element set\\n\\t\\t\\tvar ret = jQuery.merge(this.constructor(), elems);\\n\\n\\t\\t\\t// Add the old object onto the stack (as a reference)\\n\\t\\t\\tret.prevObject = this;\\n\\n\\t\\t\\t// Return the newly-formed element set\\n\\t\\t\\treturn ret;\\n\\t\\t},\\n\\n\\t\\t// Execute a callback for every element in the matched set.\\n\\t\\teach: function each(callback) {\\n\\t\\t\\treturn jQuery.each(this, callback);\\n\\t\\t},\\n\\n\\t\\tmap: function map(callback) {\\n\\t\\t\\treturn this.pushStack(jQuery.map(this, function (elem, i) {\\n\\t\\t\\t\\treturn callback.call(elem, i, elem);\\n\\t\\t\\t}));\\n\\t\\t},\\n\\n\\t\\tslice: function slice() {\\n\\t\\t\\treturn this.pushStack(_slice.apply(this, arguments));\\n\\t\\t},\\n\\n\\t\\tfirst: function first() {\\n\\t\\t\\treturn this.eq(0);\\n\\t\\t},\\n\\n\\t\\tlast: function last() {\\n\\t\\t\\treturn this.eq(-1);\\n\\t\\t},\\n\\n\\t\\teq: function eq(i) {\\n\\t\\t\\tvar len = this.length,\\n\\t\\t\\t    j = +i + (i < 0 ? len : 0);\\n\\t\\t\\treturn this.pushStack(j >= 0 && j < len ? [this[j]] : []);\\n\\t\\t},\\n\\n\\t\\tend: function end() {\\n\\t\\t\\treturn this.prevObject || this.constructor();\\n\\t\\t},\\n\\n\\t\\t// For internal use only.\\n\\t\\t// Behaves like an Array's method, not like a jQuery method.\\n\\t\\tpush: push,\\n\\t\\tsort: arr.sort,\\n\\t\\tsplice: arr.splice\\n\\t};\\n\\n\\tjQuery.extend = jQuery.fn.extend = function () {\\n\\t\\tvar options,\\n\\t\\t    name,\\n\\t\\t    src,\\n\\t\\t    copy,\\n\\t\\t    copyIsArray,\\n\\t\\t    clone,\\n\\t\\t    target = arguments[0] || {},\\n\\t\\t    i = 1,\\n\\t\\t    length = arguments.length,\\n\\t\\t    deep = false;\\n\\n\\t\\t// Handle a deep copy situation\\n\\t\\tif (typeof target === \\\"boolean\\\") {\\n\\t\\t\\tdeep = target;\\n\\n\\t\\t\\t// Skip the boolean and the target\\n\\t\\t\\ttarget = arguments[i] || {};\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\n\\t\\t// Handle case when target is a string or something (possible in deep copy)\\n\\t\\tif ((typeof target === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(target)) !== \\\"object\\\" && !isFunction(target)) {\\n\\t\\t\\ttarget = {};\\n\\t\\t}\\n\\n\\t\\t// Extend jQuery itself if only one argument is passed\\n\\t\\tif (i === length) {\\n\\t\\t\\ttarget = this;\\n\\t\\t\\ti--;\\n\\t\\t}\\n\\n\\t\\tfor (; i < length; i++) {\\n\\n\\t\\t\\t// Only deal with non-null/undefined values\\n\\t\\t\\tif ((options = arguments[i]) != null) {\\n\\n\\t\\t\\t\\t// Extend the base object\\n\\t\\t\\t\\tfor (name in options) {\\n\\t\\t\\t\\t\\tsrc = target[name];\\n\\t\\t\\t\\t\\tcopy = options[name];\\n\\n\\t\\t\\t\\t\\t// Prevent never-ending loop\\n\\t\\t\\t\\t\\tif (target === copy) {\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Recurse if we're merging plain objects or arrays\\n\\t\\t\\t\\t\\tif (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\\n\\n\\t\\t\\t\\t\\t\\tif (copyIsArray) {\\n\\t\\t\\t\\t\\t\\t\\tcopyIsArray = false;\\n\\t\\t\\t\\t\\t\\t\\tclone = src && Array.isArray(src) ? src : [];\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tclone = src && jQuery.isPlainObject(src) ? src : {};\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Never move original objects, clone them\\n\\t\\t\\t\\t\\t\\ttarget[name] = jQuery.extend(deep, clone, copy);\\n\\n\\t\\t\\t\\t\\t\\t// Don't bring in undefined values\\n\\t\\t\\t\\t\\t} else if (copy !== undefined) {\\n\\t\\t\\t\\t\\t\\ttarget[name] = copy;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Return the modified object\\n\\t\\treturn target;\\n\\t};\\n\\n\\tjQuery.extend({\\n\\n\\t\\t// Unique for each copy of jQuery on the page\\n\\t\\texpando: \\\"jQuery\\\" + (version + Math.random()).replace(/\\\\D/g, \\\"\\\"),\\n\\n\\t\\t// Assume jQuery is ready without the ready module\\n\\t\\tisReady: true,\\n\\n\\t\\terror: function error(msg) {\\n\\t\\t\\tthrow new Error(msg);\\n\\t\\t},\\n\\n\\t\\tnoop: function noop() {},\\n\\n\\t\\tisPlainObject: function isPlainObject(obj) {\\n\\t\\t\\tvar proto, Ctor;\\n\\n\\t\\t\\t// Detect obvious negatives\\n\\t\\t\\t// Use toString instead of jQuery.type to catch host objects\\n\\t\\t\\tif (!obj || toString.call(obj) !== \\\"[object Object]\\\") {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\n\\t\\t\\tproto = getProto(obj);\\n\\n\\t\\t\\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\\n\\t\\t\\tif (!proto) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Objects with prototype are plain iff they were constructed by a global Object function\\n\\t\\t\\tCtor = hasOwn.call(proto, \\\"constructor\\\") && proto.constructor;\\n\\t\\t\\treturn typeof Ctor === \\\"function\\\" && fnToString.call(Ctor) === ObjectFunctionString;\\n\\t\\t},\\n\\n\\t\\tisEmptyObject: function isEmptyObject(obj) {\\n\\n\\t\\t\\t/* eslint-disable no-unused-vars */\\n\\t\\t\\t// See https://github.com/eslint/eslint/issues/6125\\n\\t\\t\\tvar name;\\n\\n\\t\\t\\tfor (name in obj) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\n\\t\\t},\\n\\n\\t\\t// Evaluates a script in a global context\\n\\t\\tglobalEval: function globalEval(code) {\\n\\t\\t\\tDOMEval(code);\\n\\t\\t},\\n\\n\\t\\teach: function each(obj, callback) {\\n\\t\\t\\tvar length,\\n\\t\\t\\t    i = 0;\\n\\n\\t\\t\\tif (isArrayLike(obj)) {\\n\\t\\t\\t\\tlength = obj.length;\\n\\t\\t\\t\\tfor (; i < length; i++) {\\n\\t\\t\\t\\t\\tif (callback.call(obj[i], i, obj[i]) === false) {\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfor (i in obj) {\\n\\t\\t\\t\\t\\tif (callback.call(obj[i], i, obj[i]) === false) {\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn obj;\\n\\t\\t},\\n\\n\\t\\t// Support: Android <=4.0 only\\n\\t\\ttrim: function trim(text) {\\n\\t\\t\\treturn text == null ? \\\"\\\" : (text + \\\"\\\").replace(rtrim, \\\"\\\");\\n\\t\\t},\\n\\n\\t\\t// results is for internal usage only\\n\\t\\tmakeArray: function makeArray(arr, results) {\\n\\t\\t\\tvar ret = results || [];\\n\\n\\t\\t\\tif (arr != null) {\\n\\t\\t\\t\\tif (isArrayLike(Object(arr))) {\\n\\t\\t\\t\\t\\tjQuery.merge(ret, typeof arr === \\\"string\\\" ? [arr] : arr);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tpush.call(ret, arr);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn ret;\\n\\t\\t},\\n\\n\\t\\tinArray: function inArray(elem, arr, i) {\\n\\t\\t\\treturn arr == null ? -1 : indexOf.call(arr, elem, i);\\n\\t\\t},\\n\\n\\t\\t// Support: Android <=4.0 only, PhantomJS 1 only\\n\\t\\t// push.apply(_, arraylike) throws on ancient WebKit\\n\\t\\tmerge: function merge(first, second) {\\n\\t\\t\\tvar len = +second.length,\\n\\t\\t\\t    j = 0,\\n\\t\\t\\t    i = first.length;\\n\\n\\t\\t\\tfor (; j < len; j++) {\\n\\t\\t\\t\\tfirst[i++] = second[j];\\n\\t\\t\\t}\\n\\n\\t\\t\\tfirst.length = i;\\n\\n\\t\\t\\treturn first;\\n\\t\\t},\\n\\n\\t\\tgrep: function grep(elems, callback, invert) {\\n\\t\\t\\tvar callbackInverse,\\n\\t\\t\\t    matches = [],\\n\\t\\t\\t    i = 0,\\n\\t\\t\\t    length = elems.length,\\n\\t\\t\\t    callbackExpect = !invert;\\n\\n\\t\\t\\t// Go through the array, only saving the items\\n\\t\\t\\t// that pass the validator function\\n\\t\\t\\tfor (; i < length; i++) {\\n\\t\\t\\t\\tcallbackInverse = !callback(elems[i], i);\\n\\t\\t\\t\\tif (callbackInverse !== callbackExpect) {\\n\\t\\t\\t\\t\\tmatches.push(elems[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn matches;\\n\\t\\t},\\n\\n\\t\\t// arg is for internal usage only\\n\\t\\tmap: function map(elems, callback, arg) {\\n\\t\\t\\tvar length,\\n\\t\\t\\t    value,\\n\\t\\t\\t    i = 0,\\n\\t\\t\\t    ret = [];\\n\\n\\t\\t\\t// Go through the array, translating each of the items to their new values\\n\\t\\t\\tif (isArrayLike(elems)) {\\n\\t\\t\\t\\tlength = elems.length;\\n\\t\\t\\t\\tfor (; i < length; i++) {\\n\\t\\t\\t\\t\\tvalue = callback(elems[i], i, arg);\\n\\n\\t\\t\\t\\t\\tif (value != null) {\\n\\t\\t\\t\\t\\t\\tret.push(value);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Go through every key on the object,\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfor (i in elems) {\\n\\t\\t\\t\\t\\tvalue = callback(elems[i], i, arg);\\n\\n\\t\\t\\t\\t\\tif (value != null) {\\n\\t\\t\\t\\t\\t\\tret.push(value);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Flatten any nested arrays\\n\\t\\t\\treturn concat.apply([], ret);\\n\\t\\t},\\n\\n\\t\\t// A global GUID counter for objects\\n\\t\\tguid: 1,\\n\\n\\t\\t// jQuery.support is not used in Core but other projects attach their\\n\\t\\t// properties to it so it needs to exist.\\n\\t\\tsupport: support\\n\\t});\\n\\n\\tif (typeof Symbol === \\\"function\\\") {\\n\\t\\tjQuery.fn[Symbol.iterator] = arr[Symbol.iterator];\\n\\t}\\n\\n\\t// Populate the class2type map\\n\\tjQuery.each(\\\"Boolean Number String Function Array Date RegExp Object Error Symbol\\\".split(\\\" \\\"), function (i, name) {\\n\\t\\tclass2type[\\\"[object \\\" + name + \\\"]\\\"] = name.toLowerCase();\\n\\t});\\n\\n\\tfunction isArrayLike(obj) {\\n\\n\\t\\t// Support: real iOS 8.2 only (not reproducible in simulator)\\n\\t\\t// `in` check used to prevent JIT error (gh-2145)\\n\\t\\t// hasOwn isn't used here due to false negatives\\n\\t\\t// regarding Nodelist length in IE\\n\\t\\tvar length = !!obj && \\\"length\\\" in obj && obj.length,\\n\\t\\t    type = toType(obj);\\n\\n\\t\\tif (isFunction(obj) || isWindow(obj)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn type === \\\"array\\\" || length === 0 || typeof length === \\\"number\\\" && length > 0 && length - 1 in obj;\\n\\t}\\n\\tvar Sizzle =\\n\\t/*!\\n  * Sizzle CSS Selector Engine v2.3.3\\n  * https://sizzlejs.com/\\n  *\\n  * Copyright jQuery Foundation and other contributors\\n  * Released under the MIT license\\n  * http://jquery.org/license\\n  *\\n  * Date: 2016-08-08\\n  */\\n\\tfunction (window) {\\n\\n\\t\\tvar i,\\n\\t\\t    support,\\n\\t\\t    Expr,\\n\\t\\t    getText,\\n\\t\\t    isXML,\\n\\t\\t    tokenize,\\n\\t\\t    compile,\\n\\t\\t    select,\\n\\t\\t    outermostContext,\\n\\t\\t    sortInput,\\n\\t\\t    hasDuplicate,\\n\\n\\n\\t\\t// Local document vars\\n\\t\\tsetDocument,\\n\\t\\t    document,\\n\\t\\t    docElem,\\n\\t\\t    documentIsHTML,\\n\\t\\t    rbuggyQSA,\\n\\t\\t    rbuggyMatches,\\n\\t\\t    matches,\\n\\t\\t    contains,\\n\\n\\n\\t\\t// Instance-specific data\\n\\t\\texpando = \\\"sizzle\\\" + 1 * new Date(),\\n\\t\\t    preferredDoc = window.document,\\n\\t\\t    dirruns = 0,\\n\\t\\t    done = 0,\\n\\t\\t    classCache = createCache(),\\n\\t\\t    tokenCache = createCache(),\\n\\t\\t    compilerCache = createCache(),\\n\\t\\t    sortOrder = function sortOrder(a, b) {\\n\\t\\t\\tif (a === b) {\\n\\t\\t\\t\\thasDuplicate = true;\\n\\t\\t\\t}\\n\\t\\t\\treturn 0;\\n\\t\\t},\\n\\n\\n\\t\\t// Instance methods\\n\\t\\thasOwn = {}.hasOwnProperty,\\n\\t\\t    arr = [],\\n\\t\\t    pop = arr.pop,\\n\\t\\t    push_native = arr.push,\\n\\t\\t    push = arr.push,\\n\\t\\t    slice = arr.slice,\\n\\n\\t\\t// Use a stripped-down indexOf as it's faster than native\\n\\t\\t// https://jsperf.com/thor-indexof-vs-for/5\\n\\t\\tindexOf = function indexOf(list, elem) {\\n\\t\\t\\tvar i = 0,\\n\\t\\t\\t    len = list.length;\\n\\t\\t\\tfor (; i < len; i++) {\\n\\t\\t\\t\\tif (list[i] === elem) {\\n\\t\\t\\t\\t\\treturn i;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn -1;\\n\\t\\t},\\n\\t\\t    booleans = \\\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\\\",\\n\\n\\n\\t\\t// Regular expressions\\n\\n\\t\\t// http://www.w3.org/TR/css3-selectors/#whitespace\\n\\t\\twhitespace = \\\"[\\\\\\\\x20\\\\\\\\t\\\\\\\\r\\\\\\\\n\\\\\\\\f]\\\",\\n\\n\\n\\t\\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\\n\\t\\tidentifier = \\\"(?:\\\\\\\\\\\\\\\\.|[\\\\\\\\w-]|[^\\\\0-\\\\\\\\xa0])+\\\",\\n\\n\\n\\t\\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\\n\\t\\tattributes = \\\"\\\\\\\\[\\\" + whitespace + \\\"*(\\\" + identifier + \\\")(?:\\\" + whitespace +\\n\\t\\t// Operator (capture 2)\\n\\t\\t\\\"*([*^$|!~]?=)\\\" + whitespace +\\n\\t\\t// \\\"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\\\"\\n\\t\\t\\\"*(?:'((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\'])*)'|\\\\\\\"((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\\\\\\"])*)\\\\\\\"|(\\\" + identifier + \\\"))|)\\\" + whitespace + \\\"*\\\\\\\\]\\\",\\n\\t\\t    pseudos = \\\":(\\\" + identifier + \\\")(?:\\\\\\\\((\\\" +\\n\\t\\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\\n\\t\\t// 1. quoted (capture 3; capture 4 or capture 5)\\n\\t\\t\\\"('((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\'])*)'|\\\\\\\"((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\\\\\\\\"])*)\\\\\\\")|\\\" +\\n\\t\\t// 2. simple (capture 6)\\n\\t\\t\\\"((?:\\\\\\\\\\\\\\\\.|[^\\\\\\\\\\\\\\\\()[\\\\\\\\]]|\\\" + attributes + \\\")*)|\\\" +\\n\\t\\t// 3. anything else (capture 2)\\n\\t\\t\\\".*\\\" + \\\")\\\\\\\\)|)\\\",\\n\\n\\n\\t\\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\\n\\t\\trwhitespace = new RegExp(whitespace + \\\"+\\\", \\\"g\\\"),\\n\\t\\t    rtrim = new RegExp(\\\"^\\\" + whitespace + \\\"+|((?:^|[^\\\\\\\\\\\\\\\\])(?:\\\\\\\\\\\\\\\\.)*)\\\" + whitespace + \\\"+$\\\", \\\"g\\\"),\\n\\t\\t    rcomma = new RegExp(\\\"^\\\" + whitespace + \\\"*,\\\" + whitespace + \\\"*\\\"),\\n\\t\\t    rcombinators = new RegExp(\\\"^\\\" + whitespace + \\\"*([>+~]|\\\" + whitespace + \\\")\\\" + whitespace + \\\"*\\\"),\\n\\t\\t    rattributeQuotes = new RegExp(\\\"=\\\" + whitespace + \\\"*([^\\\\\\\\]'\\\\\\\"]*?)\\\" + whitespace + \\\"*\\\\\\\\]\\\", \\\"g\\\"),\\n\\t\\t    rpseudo = new RegExp(pseudos),\\n\\t\\t    ridentifier = new RegExp(\\\"^\\\" + identifier + \\\"$\\\"),\\n\\t\\t    matchExpr = {\\n\\t\\t\\t\\\"ID\\\": new RegExp(\\\"^#(\\\" + identifier + \\\")\\\"),\\n\\t\\t\\t\\\"CLASS\\\": new RegExp(\\\"^\\\\\\\\.(\\\" + identifier + \\\")\\\"),\\n\\t\\t\\t\\\"TAG\\\": new RegExp(\\\"^(\\\" + identifier + \\\"|[*])\\\"),\\n\\t\\t\\t\\\"ATTR\\\": new RegExp(\\\"^\\\" + attributes),\\n\\t\\t\\t\\\"PSEUDO\\\": new RegExp(\\\"^\\\" + pseudos),\\n\\t\\t\\t\\\"CHILD\\\": new RegExp(\\\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\\\\\(\\\" + whitespace + \\\"*(even|odd|(([+-]|)(\\\\\\\\d*)n|)\\\" + whitespace + \\\"*(?:([+-]|)\\\" + whitespace + \\\"*(\\\\\\\\d+)|))\\\" + whitespace + \\\"*\\\\\\\\)|)\\\", \\\"i\\\"),\\n\\t\\t\\t\\\"bool\\\": new RegExp(\\\"^(?:\\\" + booleans + \\\")$\\\", \\\"i\\\"),\\n\\t\\t\\t// For use in libraries implementing .is()\\n\\t\\t\\t// We use this for POS matching in `select`\\n\\t\\t\\t\\\"needsContext\\\": new RegExp(\\\"^\\\" + whitespace + \\\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\\\\\(\\\" + whitespace + \\\"*((?:-\\\\\\\\d)?\\\\\\\\d*)\\\" + whitespace + \\\"*\\\\\\\\)|)(?=[^-]|$)\\\", \\\"i\\\")\\n\\t\\t},\\n\\t\\t    rinputs = /^(?:input|select|textarea|button)$/i,\\n\\t\\t    rheader = /^h\\\\d$/i,\\n\\t\\t    rnative = /^[^{]+\\\\{\\\\s*\\\\[native \\\\w/,\\n\\n\\n\\t\\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\\n\\t\\trquickExpr = /^(?:#([\\\\w-]+)|(\\\\w+)|\\\\.([\\\\w-]+))$/,\\n\\t\\t    rsibling = /[+~]/,\\n\\n\\n\\t\\t// CSS escapes\\n\\t\\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\\n\\t\\trunescape = new RegExp(\\\"\\\\\\\\\\\\\\\\([\\\\\\\\da-f]{1,6}\\\" + whitespace + \\\"?|(\\\" + whitespace + \\\")|.)\\\", \\\"ig\\\"),\\n\\t\\t    funescape = function funescape(_, escaped, escapedWhitespace) {\\n\\t\\t\\tvar high = \\\"0x\\\" + escaped - 0x10000;\\n\\t\\t\\t// NaN means non-codepoint\\n\\t\\t\\t// Support: Firefox<24\\n\\t\\t\\t// Workaround erroneous numeric interpretation of +\\\"0x\\\"\\n\\t\\t\\treturn high !== high || escapedWhitespace ? escaped : high < 0 ?\\n\\t\\t\\t// BMP codepoint\\n\\t\\t\\tString.fromCharCode(high + 0x10000) :\\n\\t\\t\\t// Supplemental Plane codepoint (surrogate pair)\\n\\t\\t\\tString.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\\n\\t\\t},\\n\\n\\n\\t\\t// CSS string/identifier serialization\\n\\t\\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\\n\\t\\trcssescape = /([\\\\0-\\\\x1f\\\\x7f]|^-?\\\\d)|^-$|[^\\\\0-\\\\x1f\\\\x7f-\\\\uFFFF\\\\w-]/g,\\n\\t\\t    fcssescape = function fcssescape(ch, asCodePoint) {\\n\\t\\t\\tif (asCodePoint) {\\n\\n\\t\\t\\t\\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\\n\\t\\t\\t\\tif (ch === \\\"\\\\0\\\") {\\n\\t\\t\\t\\t\\treturn \\\"\\\\uFFFD\\\";\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Control characters and (dependent upon position) numbers get escaped as code points\\n\\t\\t\\t\\treturn ch.slice(0, -1) + \\\"\\\\\\\\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + \\\" \\\";\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Other potentially-special ASCII characters get backslash-escaped\\n\\t\\t\\treturn \\\"\\\\\\\\\\\" + ch;\\n\\t\\t},\\n\\n\\n\\t\\t// Used for iframes\\n\\t\\t// See setDocument()\\n\\t\\t// Removing the function wrapper causes a \\\"Permission Denied\\\"\\n\\t\\t// error in IE\\n\\t\\tunloadHandler = function unloadHandler() {\\n\\t\\t\\tsetDocument();\\n\\t\\t},\\n\\t\\t    disabledAncestor = addCombinator(function (elem) {\\n\\t\\t\\treturn elem.disabled === true && (\\\"form\\\" in elem || \\\"label\\\" in elem);\\n\\t\\t}, { dir: \\\"parentNode\\\", next: \\\"legend\\\" });\\n\\n\\t\\t// Optimize for push.apply( _, NodeList )\\n\\t\\ttry {\\n\\t\\t\\tpush.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);\\n\\t\\t\\t// Support: Android<4.0\\n\\t\\t\\t// Detect silently failing push.apply\\n\\t\\t\\tarr[preferredDoc.childNodes.length].nodeType;\\n\\t\\t} catch (e) {\\n\\t\\t\\tpush = { apply: arr.length ?\\n\\n\\t\\t\\t\\t// Leverage slice if possible\\n\\t\\t\\t\\tfunction (target, els) {\\n\\t\\t\\t\\t\\tpush_native.apply(target, slice.call(els));\\n\\t\\t\\t\\t} :\\n\\n\\t\\t\\t\\t// Support: IE<9\\n\\t\\t\\t\\t// Otherwise append directly\\n\\t\\t\\t\\tfunction (target, els) {\\n\\t\\t\\t\\t\\tvar j = target.length,\\n\\t\\t\\t\\t\\t    i = 0;\\n\\t\\t\\t\\t\\t// Can't trust NodeList.length\\n\\t\\t\\t\\t\\twhile (target[j++] = els[i++]) {}\\n\\t\\t\\t\\t\\ttarget.length = j - 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\tfunction Sizzle(selector, context, results, seed) {\\n\\t\\t\\tvar m,\\n\\t\\t\\t    i,\\n\\t\\t\\t    elem,\\n\\t\\t\\t    nid,\\n\\t\\t\\t    match,\\n\\t\\t\\t    groups,\\n\\t\\t\\t    newSelector,\\n\\t\\t\\t    newContext = context && context.ownerDocument,\\n\\n\\n\\t\\t\\t// nodeType defaults to 9, since context defaults to document\\n\\t\\t\\tnodeType = context ? context.nodeType : 9;\\n\\n\\t\\t\\tresults = results || [];\\n\\n\\t\\t\\t// Return early from calls with invalid selector or context\\n\\t\\t\\tif (typeof selector !== \\\"string\\\" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\\n\\n\\t\\t\\t\\treturn results;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Try to shortcut find operations (as opposed to filters) in HTML documents\\n\\t\\t\\tif (!seed) {\\n\\n\\t\\t\\t\\tif ((context ? context.ownerDocument || context : preferredDoc) !== document) {\\n\\t\\t\\t\\t\\tsetDocument(context);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontext = context || document;\\n\\n\\t\\t\\t\\tif (documentIsHTML) {\\n\\n\\t\\t\\t\\t\\t// If the selector is sufficiently simple, try using a \\\"get*By*\\\" DOM method\\n\\t\\t\\t\\t\\t// (excepting DocumentFragment context, where the methods don't exist)\\n\\t\\t\\t\\t\\tif (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\\n\\n\\t\\t\\t\\t\\t\\t// ID selector\\n\\t\\t\\t\\t\\t\\tif (m = match[1]) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Document context\\n\\t\\t\\t\\t\\t\\t\\tif (nodeType === 9) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (elem = context.getElementById(m)) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Support: IE, Opera, Webkit\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// TODO: identify versions\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// getElementById can match elements by name instead of ID\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (elem.id === m) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tresults.push(elem);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\treturn results;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn results;\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Element context\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Support: IE, Opera, Webkit\\n\\t\\t\\t\\t\\t\\t\\t\\t// TODO: identify versions\\n\\t\\t\\t\\t\\t\\t\\t\\t// getElementById can match elements by name instead of ID\\n\\t\\t\\t\\t\\t\\t\\t\\tif (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tresults.push(elem);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn results;\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t// Type selector\\n\\t\\t\\t\\t\\t\\t} else if (match[2]) {\\n\\t\\t\\t\\t\\t\\t\\tpush.apply(results, context.getElementsByTagName(selector));\\n\\t\\t\\t\\t\\t\\t\\treturn results;\\n\\n\\t\\t\\t\\t\\t\\t\\t// Class selector\\n\\t\\t\\t\\t\\t\\t} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\\n\\n\\t\\t\\t\\t\\t\\t\\tpush.apply(results, context.getElementsByClassName(m));\\n\\t\\t\\t\\t\\t\\t\\treturn results;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Take advantage of querySelectorAll\\n\\t\\t\\t\\t\\tif (support.qsa && !compilerCache[selector + \\\" \\\"] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {\\n\\n\\t\\t\\t\\t\\t\\tif (nodeType !== 1) {\\n\\t\\t\\t\\t\\t\\t\\tnewContext = context;\\n\\t\\t\\t\\t\\t\\t\\tnewSelector = selector;\\n\\n\\t\\t\\t\\t\\t\\t\\t// qSA looks outside Element context, which is not what we want\\n\\t\\t\\t\\t\\t\\t\\t// Thanks to Andrew Dupont for this workaround technique\\n\\t\\t\\t\\t\\t\\t\\t// Support: IE <=8\\n\\t\\t\\t\\t\\t\\t\\t// Exclude object elements\\n\\t\\t\\t\\t\\t\\t} else if (context.nodeName.toLowerCase() !== \\\"object\\\") {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Capture the context ID, setting it first if necessary\\n\\t\\t\\t\\t\\t\\t\\tif (nid = context.getAttribute(\\\"id\\\")) {\\n\\t\\t\\t\\t\\t\\t\\t\\tnid = nid.replace(rcssescape, fcssescape);\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tcontext.setAttribute(\\\"id\\\", nid = expando);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t// Prefix every selector in the list\\n\\t\\t\\t\\t\\t\\t\\tgroups = tokenize(selector);\\n\\t\\t\\t\\t\\t\\t\\ti = groups.length;\\n\\t\\t\\t\\t\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\t\\t\\t\\t\\tgroups[i] = \\\"#\\\" + nid + \\\" \\\" + toSelector(groups[i]);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tnewSelector = groups.join(\\\",\\\");\\n\\n\\t\\t\\t\\t\\t\\t\\t// Expand context for sibling selectors\\n\\t\\t\\t\\t\\t\\t\\tnewContext = rsibling.test(selector) && testContext(context.parentNode) || context;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tif (newSelector) {\\n\\t\\t\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\t\\tpush.apply(results, newContext.querySelectorAll(newSelector));\\n\\t\\t\\t\\t\\t\\t\\t\\treturn results;\\n\\t\\t\\t\\t\\t\\t\\t} catch (qsaError) {} finally {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (nid === expando) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcontext.removeAttribute(\\\"id\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// All others\\n\\t\\t\\treturn select(selector.replace(rtrim, \\\"$1\\\"), context, results, seed);\\n\\t\\t}\\n\\n\\t\\t/**\\n   * Create key-value caches of limited size\\n   * @returns {function(string, object)} Returns the Object data after storing it on itself with\\n   *\\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\\n   *\\tdeleting the oldest entry\\n   */\\n\\t\\tfunction createCache() {\\n\\t\\t\\tvar keys = [];\\n\\n\\t\\t\\tfunction cache(key, value) {\\n\\t\\t\\t\\t// Use (key + \\\" \\\") to avoid collision with native prototype properties (see Issue #157)\\n\\t\\t\\t\\tif (keys.push(key + \\\" \\\") > Expr.cacheLength) {\\n\\t\\t\\t\\t\\t// Only keep the most recent entries\\n\\t\\t\\t\\t\\tdelete cache[keys.shift()];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn cache[key + \\\" \\\"] = value;\\n\\t\\t\\t}\\n\\t\\t\\treturn cache;\\n\\t\\t}\\n\\n\\t\\t/**\\n   * Mark a function for special use by Sizzle\\n   * @param {Function} fn The function to mark\\n   */\\n\\t\\tfunction markFunction(fn) {\\n\\t\\t\\tfn[expando] = true;\\n\\t\\t\\treturn fn;\\n\\t\\t}\\n\\n\\t\\t/**\\n   * Support testing using an element\\n   * @param {Function} fn Passed the created element and returns a boolean result\\n   */\\n\\t\\tfunction assert(fn) {\\n\\t\\t\\tvar el = document.createElement(\\\"fieldset\\\");\\n\\n\\t\\t\\ttry {\\n\\t\\t\\t\\treturn !!fn(el);\\n\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t} finally {\\n\\t\\t\\t\\t// Remove from its parent by default\\n\\t\\t\\t\\tif (el.parentNode) {\\n\\t\\t\\t\\t\\tel.parentNode.removeChild(el);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// release memory in IE\\n\\t\\t\\t\\tel = null;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t/**\\n   * Adds the same handler for all of the specified attrs\\n   * @param {String} attrs Pipe-separated list of attributes\\n   * @param {Function} handler The method that will be applied\\n   */\\n\\t\\tfunction addHandle(attrs, handler) {\\n\\t\\t\\tvar arr = attrs.split(\\\"|\\\"),\\n\\t\\t\\t    i = arr.length;\\n\\n\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\tExpr.attrHandle[arr[i]] = handler;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t/**\\n   * Checks document order of two siblings\\n   * @param {Element} a\\n   * @param {Element} b\\n   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\\n   */\\n\\t\\tfunction siblingCheck(a, b) {\\n\\t\\t\\tvar cur = b && a,\\n\\t\\t\\t    diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;\\n\\n\\t\\t\\t// Use IE sourceIndex if available on both nodes\\n\\t\\t\\tif (diff) {\\n\\t\\t\\t\\treturn diff;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check if b follows a\\n\\t\\t\\tif (cur) {\\n\\t\\t\\t\\twhile (cur = cur.nextSibling) {\\n\\t\\t\\t\\t\\tif (cur === b) {\\n\\t\\t\\t\\t\\t\\treturn -1;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn a ? 1 : -1;\\n\\t\\t}\\n\\n\\t\\t/**\\n   * Returns a function to use in pseudos for input types\\n   * @param {String} type\\n   */\\n\\t\\tfunction createInputPseudo(type) {\\n\\t\\t\\treturn function (elem) {\\n\\t\\t\\t\\tvar name = elem.nodeName.toLowerCase();\\n\\t\\t\\t\\treturn name === \\\"input\\\" && elem.type === type;\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\t/**\\n   * Returns a function to use in pseudos for buttons\\n   * @param {String} type\\n   */\\n\\t\\tfunction createButtonPseudo(type) {\\n\\t\\t\\treturn function (elem) {\\n\\t\\t\\t\\tvar name = elem.nodeName.toLowerCase();\\n\\t\\t\\t\\treturn (name === \\\"input\\\" || name === \\\"button\\\") && elem.type === type;\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\t/**\\n   * Returns a function to use in pseudos for :enabled/:disabled\\n   * @param {Boolean} disabled true for :disabled; false for :enabled\\n   */\\n\\t\\tfunction createDisabledPseudo(disabled) {\\n\\n\\t\\t\\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\\n\\t\\t\\treturn function (elem) {\\n\\n\\t\\t\\t\\t// Only certain elements can match :enabled or :disabled\\n\\t\\t\\t\\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\\n\\t\\t\\t\\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\\n\\t\\t\\t\\tif (\\\"form\\\" in elem) {\\n\\n\\t\\t\\t\\t\\t// Check for inherited disabledness on relevant non-disabled elements:\\n\\t\\t\\t\\t\\t// * listed form-associated elements in a disabled fieldset\\n\\t\\t\\t\\t\\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\\n\\t\\t\\t\\t\\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\\n\\t\\t\\t\\t\\t// * option elements in a disabled optgroup\\n\\t\\t\\t\\t\\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\\n\\t\\t\\t\\t\\t// All such elements have a \\\"form\\\" property.\\n\\t\\t\\t\\t\\tif (elem.parentNode && elem.disabled === false) {\\n\\n\\t\\t\\t\\t\\t\\t// Option elements defer to a parent optgroup if present\\n\\t\\t\\t\\t\\t\\tif (\\\"label\\\" in elem) {\\n\\t\\t\\t\\t\\t\\t\\tif (\\\"label\\\" in elem.parentNode) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn elem.parentNode.disabled === disabled;\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn elem.disabled === disabled;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Support: IE 6 - 11\\n\\t\\t\\t\\t\\t\\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\\n\\t\\t\\t\\t\\t\\treturn elem.isDisabled === disabled ||\\n\\n\\t\\t\\t\\t\\t\\t// Where there is no isDisabled, check manually\\n\\t\\t\\t\\t\\t\\t/* jshint -W018 */\\n\\t\\t\\t\\t\\t\\telem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn elem.disabled === disabled;\\n\\n\\t\\t\\t\\t\\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\\n\\t\\t\\t\\t\\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\\n\\t\\t\\t\\t\\t// even exist on them, let alone have a boolean value.\\n\\t\\t\\t\\t} else if (\\\"label\\\" in elem) {\\n\\t\\t\\t\\t\\treturn elem.disabled === disabled;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Remaining elements are neither :enabled nor :disabled\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\t/**\\n   * Returns a function to use in pseudos for positionals\\n   * @param {Function} fn\\n   */\\n\\t\\tfunction createPositionalPseudo(fn) {\\n\\t\\t\\treturn markFunction(function (argument) {\\n\\t\\t\\t\\targument = +argument;\\n\\t\\t\\t\\treturn markFunction(function (seed, matches) {\\n\\t\\t\\t\\t\\tvar j,\\n\\t\\t\\t\\t\\t    matchIndexes = fn([], seed.length, argument),\\n\\t\\t\\t\\t\\t    i = matchIndexes.length;\\n\\n\\t\\t\\t\\t\\t// Match elements found at the specified indexes\\n\\t\\t\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\t\\t\\tif (seed[j = matchIndexes[i]]) {\\n\\t\\t\\t\\t\\t\\t\\tseed[j] = !(matches[j] = seed[j]);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t/**\\n   * Checks a node for validity as a Sizzle context\\n   * @param {Element|Object=} context\\n   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\\n   */\\n\\t\\tfunction testContext(context) {\\n\\t\\t\\treturn context && typeof context.getElementsByTagName !== \\\"undefined\\\" && context;\\n\\t\\t}\\n\\n\\t\\t// Expose support vars for convenience\\n\\t\\tsupport = Sizzle.support = {};\\n\\n\\t\\t/**\\n   * Detects XML nodes\\n   * @param {Element|Object} elem An element or a document\\n   * @returns {Boolean} True iff elem is a non-HTML XML node\\n   */\\n\\t\\tisXML = Sizzle.isXML = function (elem) {\\n\\t\\t\\t// documentElement is verified for cases where it doesn't yet exist\\n\\t\\t\\t// (such as loading iframes in IE - #4833)\\n\\t\\t\\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\\n\\t\\t\\treturn documentElement ? documentElement.nodeName !== \\\"HTML\\\" : false;\\n\\t\\t};\\n\\n\\t\\t/**\\n   * Sets document-related variables once based on the current document\\n   * @param {Element|Object} [doc] An element or document object to use to set the document\\n   * @returns {Object} Returns the current document\\n   */\\n\\t\\tsetDocument = Sizzle.setDocument = function (node) {\\n\\t\\t\\tvar hasCompare,\\n\\t\\t\\t    subWindow,\\n\\t\\t\\t    doc = node ? node.ownerDocument || node : preferredDoc;\\n\\n\\t\\t\\t// Return early if doc is invalid or already selected\\n\\t\\t\\tif (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\\n\\t\\t\\t\\treturn document;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Update global variables\\n\\t\\t\\tdocument = doc;\\n\\t\\t\\tdocElem = document.documentElement;\\n\\t\\t\\tdocumentIsHTML = !isXML(document);\\n\\n\\t\\t\\t// Support: IE 9-11, Edge\\n\\t\\t\\t// Accessing iframe documents after unload throws \\\"permission denied\\\" errors (jQuery #13936)\\n\\t\\t\\tif (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\\n\\n\\t\\t\\t\\t// Support: IE 11, Edge\\n\\t\\t\\t\\tif (subWindow.addEventListener) {\\n\\t\\t\\t\\t\\tsubWindow.addEventListener(\\\"unload\\\", unloadHandler, false);\\n\\n\\t\\t\\t\\t\\t// Support: IE 9 - 10 only\\n\\t\\t\\t\\t} else if (subWindow.attachEvent) {\\n\\t\\t\\t\\t\\tsubWindow.attachEvent(\\\"onunload\\\", unloadHandler);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t/* Attributes\\n   ---------------------------------------------------------------------- */\\n\\n\\t\\t\\t// Support: IE<8\\n\\t\\t\\t// Verify that getAttribute really returns attributes and not properties\\n\\t\\t\\t// (excepting IE8 booleans)\\n\\t\\t\\tsupport.attributes = assert(function (el) {\\n\\t\\t\\t\\tel.className = \\\"i\\\";\\n\\t\\t\\t\\treturn !el.getAttribute(\\\"className\\\");\\n\\t\\t\\t});\\n\\n\\t\\t\\t/* getElement(s)By*\\n   ---------------------------------------------------------------------- */\\n\\n\\t\\t\\t// Check if getElementsByTagName(\\\"*\\\") returns only elements\\n\\t\\t\\tsupport.getElementsByTagName = assert(function (el) {\\n\\t\\t\\t\\tel.appendChild(document.createComment(\\\"\\\"));\\n\\t\\t\\t\\treturn !el.getElementsByTagName(\\\"*\\\").length;\\n\\t\\t\\t});\\n\\n\\t\\t\\t// Support: IE<9\\n\\t\\t\\tsupport.getElementsByClassName = rnative.test(document.getElementsByClassName);\\n\\n\\t\\t\\t// Support: IE<10\\n\\t\\t\\t// Check if getElementById returns elements by name\\n\\t\\t\\t// The broken getElementById methods don't pick up programmatically-set names,\\n\\t\\t\\t// so use a roundabout getElementsByName test\\n\\t\\t\\tsupport.getById = assert(function (el) {\\n\\t\\t\\t\\tdocElem.appendChild(el).id = expando;\\n\\t\\t\\t\\treturn !document.getElementsByName || !document.getElementsByName(expando).length;\\n\\t\\t\\t});\\n\\n\\t\\t\\t// ID filter and find\\n\\t\\t\\tif (support.getById) {\\n\\t\\t\\t\\tExpr.filter[\\\"ID\\\"] = function (id) {\\n\\t\\t\\t\\t\\tvar attrId = id.replace(runescape, funescape);\\n\\t\\t\\t\\t\\treturn function (elem) {\\n\\t\\t\\t\\t\\t\\treturn elem.getAttribute(\\\"id\\\") === attrId;\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t};\\n\\t\\t\\t\\tExpr.find[\\\"ID\\\"] = function (id, context) {\\n\\t\\t\\t\\t\\tif (typeof context.getElementById !== \\\"undefined\\\" && documentIsHTML) {\\n\\t\\t\\t\\t\\t\\tvar elem = context.getElementById(id);\\n\\t\\t\\t\\t\\t\\treturn elem ? [elem] : [];\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t};\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tExpr.filter[\\\"ID\\\"] = function (id) {\\n\\t\\t\\t\\t\\tvar attrId = id.replace(runescape, funescape);\\n\\t\\t\\t\\t\\treturn function (elem) {\\n\\t\\t\\t\\t\\t\\tvar node = typeof elem.getAttributeNode !== \\\"undefined\\\" && elem.getAttributeNode(\\\"id\\\");\\n\\t\\t\\t\\t\\t\\treturn node && node.value === attrId;\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t// Support: IE 6 - 7 only\\n\\t\\t\\t\\t// getElementById is not reliable as a find shortcut\\n\\t\\t\\t\\tExpr.find[\\\"ID\\\"] = function (id, context) {\\n\\t\\t\\t\\t\\tif (typeof context.getElementById !== \\\"undefined\\\" && documentIsHTML) {\\n\\t\\t\\t\\t\\t\\tvar node,\\n\\t\\t\\t\\t\\t\\t    i,\\n\\t\\t\\t\\t\\t\\t    elems,\\n\\t\\t\\t\\t\\t\\t    elem = context.getElementById(id);\\n\\n\\t\\t\\t\\t\\t\\tif (elem) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Verify the id attribute\\n\\t\\t\\t\\t\\t\\t\\tnode = elem.getAttributeNode(\\\"id\\\");\\n\\t\\t\\t\\t\\t\\t\\tif (node && node.value === id) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn [elem];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t// Fall back on getElementsByName\\n\\t\\t\\t\\t\\t\\t\\telems = context.getElementsByName(id);\\n\\t\\t\\t\\t\\t\\t\\ti = 0;\\n\\t\\t\\t\\t\\t\\t\\twhile (elem = elems[i++]) {\\n\\t\\t\\t\\t\\t\\t\\t\\tnode = elem.getAttributeNode(\\\"id\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\tif (node && node.value === id) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn [elem];\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\treturn [];\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Tag\\n\\t\\t\\tExpr.find[\\\"TAG\\\"] = support.getElementsByTagName ? function (tag, context) {\\n\\t\\t\\t\\tif (typeof context.getElementsByTagName !== \\\"undefined\\\") {\\n\\t\\t\\t\\t\\treturn context.getElementsByTagName(tag);\\n\\n\\t\\t\\t\\t\\t// DocumentFragment nodes don't have gEBTN\\n\\t\\t\\t\\t} else if (support.qsa) {\\n\\t\\t\\t\\t\\treturn context.querySelectorAll(tag);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} : function (tag, context) {\\n\\t\\t\\t\\tvar elem,\\n\\t\\t\\t\\t    tmp = [],\\n\\t\\t\\t\\t    i = 0,\\n\\n\\t\\t\\t\\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\\n\\t\\t\\t\\tresults = context.getElementsByTagName(tag);\\n\\n\\t\\t\\t\\t// Filter out possible comments\\n\\t\\t\\t\\tif (tag === \\\"*\\\") {\\n\\t\\t\\t\\t\\twhile (elem = results[i++]) {\\n\\t\\t\\t\\t\\t\\tif (elem.nodeType === 1) {\\n\\t\\t\\t\\t\\t\\t\\ttmp.push(elem);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn tmp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn results;\\n\\t\\t\\t};\\n\\n\\t\\t\\t// Class\\n\\t\\t\\tExpr.find[\\\"CLASS\\\"] = support.getElementsByClassName && function (className, context) {\\n\\t\\t\\t\\tif (typeof context.getElementsByClassName !== \\\"undefined\\\" && documentIsHTML) {\\n\\t\\t\\t\\t\\treturn context.getElementsByClassName(className);\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\t\\t\\t/* QSA/matchesSelector\\n   ---------------------------------------------------------------------- */\\n\\n\\t\\t\\t// QSA and matchesSelector support\\n\\n\\t\\t\\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\\n\\t\\t\\trbuggyMatches = [];\\n\\n\\t\\t\\t// qSa(:focus) reports false when true (Chrome 21)\\n\\t\\t\\t// We allow this because of a bug in IE8/9 that throws an error\\n\\t\\t\\t// whenever `document.activeElement` is accessed on an iframe\\n\\t\\t\\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\\n\\t\\t\\t// See https://bugs.jquery.com/ticket/13378\\n\\t\\t\\trbuggyQSA = [];\\n\\n\\t\\t\\tif (support.qsa = rnative.test(document.querySelectorAll)) {\\n\\t\\t\\t\\t// Build QSA regex\\n\\t\\t\\t\\t// Regex strategy adopted from Diego Perini\\n\\t\\t\\t\\tassert(function (el) {\\n\\t\\t\\t\\t\\t// Select is set to empty string on purpose\\n\\t\\t\\t\\t\\t// This is to test IE's treatment of not explicitly\\n\\t\\t\\t\\t\\t// setting a boolean content attribute,\\n\\t\\t\\t\\t\\t// since its presence should be enough\\n\\t\\t\\t\\t\\t// https://bugs.jquery.com/ticket/12359\\n\\t\\t\\t\\t\\tdocElem.appendChild(el).innerHTML = \\\"<a id='\\\" + expando + \\\"'></a>\\\" + \\\"<select id='\\\" + expando + \\\"-\\\\r\\\\\\\\' msallowcapture=''>\\\" + \\\"<option selected=''></option></select>\\\";\\n\\n\\t\\t\\t\\t\\t// Support: IE8, Opera 11-12.16\\n\\t\\t\\t\\t\\t// Nothing should be selected when empty strings follow ^= or $= or *=\\n\\t\\t\\t\\t\\t// The test attribute must be unknown in Opera but \\\"safe\\\" for WinRT\\n\\t\\t\\t\\t\\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\\n\\t\\t\\t\\t\\tif (el.querySelectorAll(\\\"[msallowcapture^='']\\\").length) {\\n\\t\\t\\t\\t\\t\\trbuggyQSA.push(\\\"[*^$]=\\\" + whitespace + \\\"*(?:''|\\\\\\\"\\\\\\\")\\\");\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Support: IE8\\n\\t\\t\\t\\t\\t// Boolean attributes and \\\"value\\\" are not treated correctly\\n\\t\\t\\t\\t\\tif (!el.querySelectorAll(\\\"[selected]\\\").length) {\\n\\t\\t\\t\\t\\t\\trbuggyQSA.push(\\\"\\\\\\\\[\\\" + whitespace + \\\"*(?:value|\\\" + booleans + \\\")\\\");\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\\n\\t\\t\\t\\t\\tif (!el.querySelectorAll(\\\"[id~=\\\" + expando + \\\"-]\\\").length) {\\n\\t\\t\\t\\t\\t\\trbuggyQSA.push(\\\"~=\\\");\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Webkit/Opera - :checked should return selected option elements\\n\\t\\t\\t\\t\\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\\n\\t\\t\\t\\t\\t// IE8 throws error here and will not see later tests\\n\\t\\t\\t\\t\\tif (!el.querySelectorAll(\\\":checked\\\").length) {\\n\\t\\t\\t\\t\\t\\trbuggyQSA.push(\\\":checked\\\");\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Support: Safari 8+, iOS 8+\\n\\t\\t\\t\\t\\t// https://bugs.webkit.org/show_bug.cgi?id=136851\\n\\t\\t\\t\\t\\t// In-page `selector#id sibling-combinator selector` fails\\n\\t\\t\\t\\t\\tif (!el.querySelectorAll(\\\"a#\\\" + expando + \\\"+*\\\").length) {\\n\\t\\t\\t\\t\\t\\trbuggyQSA.push(\\\".#.+[+~]\\\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tassert(function (el) {\\n\\t\\t\\t\\t\\tel.innerHTML = \\\"<a href='' disabled='disabled'></a>\\\" + \\\"<select disabled='disabled'><option/></select>\\\";\\n\\n\\t\\t\\t\\t\\t// Support: Windows 8 Native Apps\\n\\t\\t\\t\\t\\t// The type and name attributes are restricted during .innerHTML assignment\\n\\t\\t\\t\\t\\tvar input = document.createElement(\\\"input\\\");\\n\\t\\t\\t\\t\\tinput.setAttribute(\\\"type\\\", \\\"hidden\\\");\\n\\t\\t\\t\\t\\tel.appendChild(input).setAttribute(\\\"name\\\", \\\"D\\\");\\n\\n\\t\\t\\t\\t\\t// Support: IE8\\n\\t\\t\\t\\t\\t// Enforce case-sensitivity of name attribute\\n\\t\\t\\t\\t\\tif (el.querySelectorAll(\\\"[name=d]\\\").length) {\\n\\t\\t\\t\\t\\t\\trbuggyQSA.push(\\\"name\\\" + whitespace + \\\"*[*^$|!~]?=\\\");\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\\n\\t\\t\\t\\t\\t// IE8 throws error here and will not see later tests\\n\\t\\t\\t\\t\\tif (el.querySelectorAll(\\\":enabled\\\").length !== 2) {\\n\\t\\t\\t\\t\\t\\trbuggyQSA.push(\\\":enabled\\\", \\\":disabled\\\");\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Support: IE9-11+\\n\\t\\t\\t\\t\\t// IE's :disabled selector does not pick up the children of disabled fieldsets\\n\\t\\t\\t\\t\\tdocElem.appendChild(el).disabled = true;\\n\\t\\t\\t\\t\\tif (el.querySelectorAll(\\\":disabled\\\").length !== 2) {\\n\\t\\t\\t\\t\\t\\trbuggyQSA.push(\\\":enabled\\\", \\\":disabled\\\");\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Opera 10-11 does not throw on post-comma invalid pseudos\\n\\t\\t\\t\\t\\tel.querySelectorAll(\\\"*,:x\\\");\\n\\t\\t\\t\\t\\trbuggyQSA.push(\\\",.*:\\\");\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\\n\\n\\t\\t\\t\\tassert(function (el) {\\n\\t\\t\\t\\t\\t// Check to see if it's possible to do matchesSelector\\n\\t\\t\\t\\t\\t// on a disconnected node (IE 9)\\n\\t\\t\\t\\t\\tsupport.disconnectedMatch = matches.call(el, \\\"*\\\");\\n\\n\\t\\t\\t\\t\\t// This should fail with an exception\\n\\t\\t\\t\\t\\t// Gecko does not error, returns false instead\\n\\t\\t\\t\\t\\tmatches.call(el, \\\"[s!='']:x\\\");\\n\\t\\t\\t\\t\\trbuggyMatches.push(\\\"!=\\\", pseudos);\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\trbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(\\\"|\\\"));\\n\\t\\t\\trbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(\\\"|\\\"));\\n\\n\\t\\t\\t/* Contains\\n   ---------------------------------------------------------------------- */\\n\\t\\t\\thasCompare = rnative.test(docElem.compareDocumentPosition);\\n\\n\\t\\t\\t// Element contains another\\n\\t\\t\\t// Purposefully self-exclusive\\n\\t\\t\\t// As in, an element does not contain itself\\n\\t\\t\\tcontains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\\n\\t\\t\\t\\tvar adown = a.nodeType === 9 ? a.documentElement : a,\\n\\t\\t\\t\\t    bup = b && b.parentNode;\\n\\t\\t\\t\\treturn a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\\n\\t\\t\\t} : function (a, b) {\\n\\t\\t\\t\\tif (b) {\\n\\t\\t\\t\\t\\twhile (b = b.parentNode) {\\n\\t\\t\\t\\t\\t\\tif (b === a) {\\n\\t\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t};\\n\\n\\t\\t\\t/* Sorting\\n   ---------------------------------------------------------------------- */\\n\\n\\t\\t\\t// Document order sorting\\n\\t\\t\\tsortOrder = hasCompare ? function (a, b) {\\n\\n\\t\\t\\t\\t// Flag for duplicate removal\\n\\t\\t\\t\\tif (a === b) {\\n\\t\\t\\t\\t\\thasDuplicate = true;\\n\\t\\t\\t\\t\\treturn 0;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Sort on method existence if only one input has compareDocumentPosition\\n\\t\\t\\t\\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\\n\\t\\t\\t\\tif (compare) {\\n\\t\\t\\t\\t\\treturn compare;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Calculate position if both inputs belong to the same document\\n\\t\\t\\t\\tcompare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :\\n\\n\\t\\t\\t\\t// Otherwise we know they are disconnected\\n\\t\\t\\t\\t1;\\n\\n\\t\\t\\t\\t// Disconnected nodes\\n\\t\\t\\t\\tif (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\\n\\n\\t\\t\\t\\t\\t// Choose the first element that is related to our preferred document\\n\\t\\t\\t\\t\\tif (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {\\n\\t\\t\\t\\t\\t\\treturn -1;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {\\n\\t\\t\\t\\t\\t\\treturn 1;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Maintain original order\\n\\t\\t\\t\\t\\treturn sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn compare & 4 ? -1 : 1;\\n\\t\\t\\t} : function (a, b) {\\n\\t\\t\\t\\t// Exit early if the nodes are identical\\n\\t\\t\\t\\tif (a === b) {\\n\\t\\t\\t\\t\\thasDuplicate = true;\\n\\t\\t\\t\\t\\treturn 0;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar cur,\\n\\t\\t\\t\\t    i = 0,\\n\\t\\t\\t\\t    aup = a.parentNode,\\n\\t\\t\\t\\t    bup = b.parentNode,\\n\\t\\t\\t\\t    ap = [a],\\n\\t\\t\\t\\t    bp = [b];\\n\\n\\t\\t\\t\\t// Parentless nodes are either documents or disconnected\\n\\t\\t\\t\\tif (!aup || !bup) {\\n\\t\\t\\t\\t\\treturn a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\\n\\n\\t\\t\\t\\t\\t// If the nodes are siblings, we can do a quick check\\n\\t\\t\\t\\t} else if (aup === bup) {\\n\\t\\t\\t\\t\\treturn siblingCheck(a, b);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Otherwise we need full lists of their ancestors for comparison\\n\\t\\t\\t\\tcur = a;\\n\\t\\t\\t\\twhile (cur = cur.parentNode) {\\n\\t\\t\\t\\t\\tap.unshift(cur);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcur = b;\\n\\t\\t\\t\\twhile (cur = cur.parentNode) {\\n\\t\\t\\t\\t\\tbp.unshift(cur);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Walk down the tree looking for a discrepancy\\n\\t\\t\\t\\twhile (ap[i] === bp[i]) {\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn i ?\\n\\t\\t\\t\\t// Do a sibling check if the nodes have a common ancestor\\n\\t\\t\\t\\tsiblingCheck(ap[i], bp[i]) :\\n\\n\\t\\t\\t\\t// Otherwise nodes in our document sort first\\n\\t\\t\\t\\tap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\\n\\t\\t\\t};\\n\\n\\t\\t\\treturn document;\\n\\t\\t};\\n\\n\\t\\tSizzle.matches = function (expr, elements) {\\n\\t\\t\\treturn Sizzle(expr, null, null, elements);\\n\\t\\t};\\n\\n\\t\\tSizzle.matchesSelector = function (elem, expr) {\\n\\t\\t\\t// Set document vars if needed\\n\\t\\t\\tif ((elem.ownerDocument || elem) !== document) {\\n\\t\\t\\t\\tsetDocument(elem);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Make sure that attribute selectors are quoted\\n\\t\\t\\texpr = expr.replace(rattributeQuotes, \\\"='$1']\\\");\\n\\n\\t\\t\\tif (support.matchesSelector && documentIsHTML && !compilerCache[expr + \\\" \\\"] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\\n\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tvar ret = matches.call(elem, expr);\\n\\n\\t\\t\\t\\t\\t// IE 9's matchesSelector returns false on disconnected nodes\\n\\t\\t\\t\\t\\tif (ret || support.disconnectedMatch ||\\n\\t\\t\\t\\t\\t// As well, disconnected nodes are said to be in a document\\n\\t\\t\\t\\t\\t// fragment in IE 9\\n\\t\\t\\t\\t\\telem.document && elem.document.nodeType !== 11) {\\n\\t\\t\\t\\t\\t\\treturn ret;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} catch (e) {}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn Sizzle(expr, document, null, [elem]).length > 0;\\n\\t\\t};\\n\\n\\t\\tSizzle.contains = function (context, elem) {\\n\\t\\t\\t// Set document vars if needed\\n\\t\\t\\tif ((context.ownerDocument || context) !== document) {\\n\\t\\t\\t\\tsetDocument(context);\\n\\t\\t\\t}\\n\\t\\t\\treturn contains(context, elem);\\n\\t\\t};\\n\\n\\t\\tSizzle.attr = function (elem, name) {\\n\\t\\t\\t// Set document vars if needed\\n\\t\\t\\tif ((elem.ownerDocument || elem) !== document) {\\n\\t\\t\\t\\tsetDocument(elem);\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar fn = Expr.attrHandle[name.toLowerCase()],\\n\\n\\t\\t\\t// Don't get fooled by Object.prototype properties (jQuery #13807)\\n\\t\\t\\tval = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\\n\\n\\t\\t\\treturn val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\\n\\t\\t};\\n\\n\\t\\tSizzle.escape = function (sel) {\\n\\t\\t\\treturn (sel + \\\"\\\").replace(rcssescape, fcssescape);\\n\\t\\t};\\n\\n\\t\\tSizzle.error = function (msg) {\\n\\t\\t\\tthrow new Error(\\\"Syntax error, unrecognized expression: \\\" + msg);\\n\\t\\t};\\n\\n\\t\\t/**\\n   * Document sorting and removing duplicates\\n   * @param {ArrayLike} results\\n   */\\n\\t\\tSizzle.uniqueSort = function (results) {\\n\\t\\t\\tvar elem,\\n\\t\\t\\t    duplicates = [],\\n\\t\\t\\t    j = 0,\\n\\t\\t\\t    i = 0;\\n\\n\\t\\t\\t// Unless we *know* we can detect duplicates, assume their presence\\n\\t\\t\\thasDuplicate = !support.detectDuplicates;\\n\\t\\t\\tsortInput = !support.sortStable && results.slice(0);\\n\\t\\t\\tresults.sort(sortOrder);\\n\\n\\t\\t\\tif (hasDuplicate) {\\n\\t\\t\\t\\twhile (elem = results[i++]) {\\n\\t\\t\\t\\t\\tif (elem === results[i]) {\\n\\t\\t\\t\\t\\t\\tj = duplicates.push(i);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (j--) {\\n\\t\\t\\t\\t\\tresults.splice(duplicates[j], 1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Clear input after sorting to release objects\\n\\t\\t\\t// See https://github.com/jquery/sizzle/pull/225\\n\\t\\t\\tsortInput = null;\\n\\n\\t\\t\\treturn results;\\n\\t\\t};\\n\\n\\t\\t/**\\n   * Utility function for retrieving the text value of an array of DOM nodes\\n   * @param {Array|Element} elem\\n   */\\n\\t\\tgetText = Sizzle.getText = function (elem) {\\n\\t\\t\\tvar node,\\n\\t\\t\\t    ret = \\\"\\\",\\n\\t\\t\\t    i = 0,\\n\\t\\t\\t    nodeType = elem.nodeType;\\n\\n\\t\\t\\tif (!nodeType) {\\n\\t\\t\\t\\t// If no nodeType, this is expected to be an array\\n\\t\\t\\t\\twhile (node = elem[i++]) {\\n\\t\\t\\t\\t\\t// Do not traverse comment nodes\\n\\t\\t\\t\\t\\tret += getText(node);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\\n\\t\\t\\t\\t// Use textContent for elements\\n\\t\\t\\t\\t// innerText usage removed for consistency of new lines (jQuery #11153)\\n\\t\\t\\t\\tif (typeof elem.textContent === \\\"string\\\") {\\n\\t\\t\\t\\t\\treturn elem.textContent;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t// Traverse its children\\n\\t\\t\\t\\t\\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\\n\\t\\t\\t\\t\\t\\tret += getText(elem);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (nodeType === 3 || nodeType === 4) {\\n\\t\\t\\t\\treturn elem.nodeValue;\\n\\t\\t\\t}\\n\\t\\t\\t// Do not include comment or processing instruction nodes\\n\\n\\t\\t\\treturn ret;\\n\\t\\t};\\n\\n\\t\\tExpr = Sizzle.selectors = {\\n\\n\\t\\t\\t// Can be adjusted by the user\\n\\t\\t\\tcacheLength: 50,\\n\\n\\t\\t\\tcreatePseudo: markFunction,\\n\\n\\t\\t\\tmatch: matchExpr,\\n\\n\\t\\t\\tattrHandle: {},\\n\\n\\t\\t\\tfind: {},\\n\\n\\t\\t\\trelative: {\\n\\t\\t\\t\\t\\\">\\\": { dir: \\\"parentNode\\\", first: true },\\n\\t\\t\\t\\t\\\" \\\": { dir: \\\"parentNode\\\" },\\n\\t\\t\\t\\t\\\"+\\\": { dir: \\\"previousSibling\\\", first: true },\\n\\t\\t\\t\\t\\\"~\\\": { dir: \\\"previousSibling\\\" }\\n\\t\\t\\t},\\n\\n\\t\\t\\tpreFilter: {\\n\\t\\t\\t\\t\\\"ATTR\\\": function ATTR(match) {\\n\\t\\t\\t\\t\\tmatch[1] = match[1].replace(runescape, funescape);\\n\\n\\t\\t\\t\\t\\t// Move the given value to match[3] whether quoted or unquoted\\n\\t\\t\\t\\t\\tmatch[3] = (match[3] || match[4] || match[5] || \\\"\\\").replace(runescape, funescape);\\n\\n\\t\\t\\t\\t\\tif (match[2] === \\\"~=\\\") {\\n\\t\\t\\t\\t\\t\\tmatch[3] = \\\" \\\" + match[3] + \\\" \\\";\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn match.slice(0, 4);\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\\"CHILD\\\": function CHILD(match) {\\n\\t\\t\\t\\t\\t/* matches from matchExpr[\\\"CHILD\\\"]\\n     \\t1 type (only|nth|...)\\n     \\t2 what (child|of-type)\\n     \\t3 argument (even|odd|\\\\d*|\\\\d*n([+-]\\\\d+)?|...)\\n     \\t4 xn-component of xn+y argument ([+-]?\\\\d*n|)\\n     \\t5 sign of xn-component\\n     \\t6 x of xn-component\\n     \\t7 sign of y-component\\n     \\t8 y of y-component\\n     */\\n\\t\\t\\t\\t\\tmatch[1] = match[1].toLowerCase();\\n\\n\\t\\t\\t\\t\\tif (match[1].slice(0, 3) === \\\"nth\\\") {\\n\\t\\t\\t\\t\\t\\t// nth-* requires argument\\n\\t\\t\\t\\t\\t\\tif (!match[3]) {\\n\\t\\t\\t\\t\\t\\t\\tSizzle.error(match[0]);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// numeric x and y parameters for Expr.filter.CHILD\\n\\t\\t\\t\\t\\t\\t// remember that false/true cast respectively to 0/1\\n\\t\\t\\t\\t\\t\\tmatch[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \\\"even\\\" || match[3] === \\\"odd\\\"));\\n\\t\\t\\t\\t\\t\\tmatch[5] = +(match[7] + match[8] || match[3] === \\\"odd\\\");\\n\\n\\t\\t\\t\\t\\t\\t// other types prohibit arguments\\n\\t\\t\\t\\t\\t} else if (match[3]) {\\n\\t\\t\\t\\t\\t\\tSizzle.error(match[0]);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn match;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\\"PSEUDO\\\": function PSEUDO(match) {\\n\\t\\t\\t\\t\\tvar excess,\\n\\t\\t\\t\\t\\t    unquoted = !match[6] && match[2];\\n\\n\\t\\t\\t\\t\\tif (matchExpr[\\\"CHILD\\\"].test(match[0])) {\\n\\t\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Accept quoted arguments as-is\\n\\t\\t\\t\\t\\tif (match[3]) {\\n\\t\\t\\t\\t\\t\\tmatch[2] = match[4] || match[5] || \\\"\\\";\\n\\n\\t\\t\\t\\t\\t\\t// Strip excess characters from unquoted arguments\\n\\t\\t\\t\\t\\t} else if (unquoted && rpseudo.test(unquoted) && (\\n\\t\\t\\t\\t\\t// Get excess from tokenize (recursively)\\n\\t\\t\\t\\t\\texcess = tokenize(unquoted, true)) && (\\n\\t\\t\\t\\t\\t// advance to the next closing parenthesis\\n\\t\\t\\t\\t\\texcess = unquoted.indexOf(\\\")\\\", unquoted.length - excess) - unquoted.length)) {\\n\\n\\t\\t\\t\\t\\t\\t// excess is a negative index\\n\\t\\t\\t\\t\\t\\tmatch[0] = match[0].slice(0, excess);\\n\\t\\t\\t\\t\\t\\tmatch[2] = unquoted.slice(0, excess);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Return only captures needed by the pseudo filter method (type and argument)\\n\\t\\t\\t\\t\\treturn match.slice(0, 3);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\n\\t\\t\\tfilter: {\\n\\n\\t\\t\\t\\t\\\"TAG\\\": function TAG(nodeNameSelector) {\\n\\t\\t\\t\\t\\tvar nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\\n\\t\\t\\t\\t\\treturn nodeNameSelector === \\\"*\\\" ? function () {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t} : function (elem) {\\n\\t\\t\\t\\t\\t\\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\\"CLASS\\\": function CLASS(className) {\\n\\t\\t\\t\\t\\tvar pattern = classCache[className + \\\" \\\"];\\n\\n\\t\\t\\t\\t\\treturn pattern || (pattern = new RegExp(\\\"(^|\\\" + whitespace + \\\")\\\" + className + \\\"(\\\" + whitespace + \\\"|$)\\\")) && classCache(className, function (elem) {\\n\\t\\t\\t\\t\\t\\treturn pattern.test(typeof elem.className === \\\"string\\\" && elem.className || typeof elem.getAttribute !== \\\"undefined\\\" && elem.getAttribute(\\\"class\\\") || \\\"\\\");\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\\"ATTR\\\": function ATTR(name, operator, check) {\\n\\t\\t\\t\\t\\treturn function (elem) {\\n\\t\\t\\t\\t\\t\\tvar result = Sizzle.attr(elem, name);\\n\\n\\t\\t\\t\\t\\t\\tif (result == null) {\\n\\t\\t\\t\\t\\t\\t\\treturn operator === \\\"!=\\\";\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (!operator) {\\n\\t\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tresult += \\\"\\\";\\n\\n\\t\\t\\t\\t\\t\\treturn operator === \\\"=\\\" ? result === check : operator === \\\"!=\\\" ? result !== check : operator === \\\"^=\\\" ? check && result.indexOf(check) === 0 : operator === \\\"*=\\\" ? check && result.indexOf(check) > -1 : operator === \\\"$=\\\" ? check && result.slice(-check.length) === check : operator === \\\"~=\\\" ? (\\\" \\\" + result.replace(rwhitespace, \\\" \\\") + \\\" \\\").indexOf(check) > -1 : operator === \\\"|=\\\" ? result === check || result.slice(0, check.length + 1) === check + \\\"-\\\" : false;\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\\"CHILD\\\": function CHILD(type, what, argument, first, last) {\\n\\t\\t\\t\\t\\tvar simple = type.slice(0, 3) !== \\\"nth\\\",\\n\\t\\t\\t\\t\\t    forward = type.slice(-4) !== \\\"last\\\",\\n\\t\\t\\t\\t\\t    ofType = what === \\\"of-type\\\";\\n\\n\\t\\t\\t\\t\\treturn first === 1 && last === 0 ?\\n\\n\\t\\t\\t\\t\\t// Shortcut for :nth-*(n)\\n\\t\\t\\t\\t\\tfunction (elem) {\\n\\t\\t\\t\\t\\t\\treturn !!elem.parentNode;\\n\\t\\t\\t\\t\\t} : function (elem, context, xml) {\\n\\t\\t\\t\\t\\t\\tvar cache,\\n\\t\\t\\t\\t\\t\\t    uniqueCache,\\n\\t\\t\\t\\t\\t\\t    outerCache,\\n\\t\\t\\t\\t\\t\\t    node,\\n\\t\\t\\t\\t\\t\\t    nodeIndex,\\n\\t\\t\\t\\t\\t\\t    start,\\n\\t\\t\\t\\t\\t\\t    dir = simple !== forward ? \\\"nextSibling\\\" : \\\"previousSibling\\\",\\n\\t\\t\\t\\t\\t\\t    parent = elem.parentNode,\\n\\t\\t\\t\\t\\t\\t    name = ofType && elem.nodeName.toLowerCase(),\\n\\t\\t\\t\\t\\t\\t    useCache = !xml && !ofType,\\n\\t\\t\\t\\t\\t\\t    diff = false;\\n\\n\\t\\t\\t\\t\\t\\tif (parent) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// :(first|last|only)-(child|of-type)\\n\\t\\t\\t\\t\\t\\t\\tif (simple) {\\n\\t\\t\\t\\t\\t\\t\\t\\twhile (dir) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tnode = elem;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\twhile (node = node[dir]) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Reverse direction for :only-* (if we haven't yet done so)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tstart = dir = type === \\\"only\\\" && !start && \\\"nextSibling\\\";\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\tstart = [forward ? parent.firstChild : parent.lastChild];\\n\\n\\t\\t\\t\\t\\t\\t\\t// non-xml :nth-child(...) stores cache data on `parent`\\n\\t\\t\\t\\t\\t\\t\\tif (forward && useCache) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Seek `elem` from a previously-cached index\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// ...in a gzip-friendly way\\n\\t\\t\\t\\t\\t\\t\\t\\tnode = parent;\\n\\t\\t\\t\\t\\t\\t\\t\\touterCache = node[expando] || (node[expando] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Support: IE <9 only\\n\\t\\t\\t\\t\\t\\t\\t\\t// Defend against cloned attroperties (jQuery gh-1709)\\n\\t\\t\\t\\t\\t\\t\\t\\tuniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tcache = uniqueCache[type] || [];\\n\\t\\t\\t\\t\\t\\t\\t\\tnodeIndex = cache[0] === dirruns && cache[1];\\n\\t\\t\\t\\t\\t\\t\\t\\tdiff = nodeIndex && cache[2];\\n\\t\\t\\t\\t\\t\\t\\t\\tnode = nodeIndex && parent.childNodes[nodeIndex];\\n\\n\\t\\t\\t\\t\\t\\t\\t\\twhile (node = ++nodeIndex && node && node[dir] || (\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Fallback to seeking `elem` from the start\\n\\t\\t\\t\\t\\t\\t\\t\\tdiff = nodeIndex = 0) || start.pop()) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// When found, cache indexes on `parent` and break\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (node.nodeType === 1 && ++diff && node === elem) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tuniqueCache[type] = [dirruns, nodeIndex, diff];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t// Use previously-cached element index if available\\n\\t\\t\\t\\t\\t\\t\\t\\tif (useCache) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// ...in a gzip-friendly way\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tnode = elem;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\touterCache = node[expando] || (node[expando] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Support: IE <9 only\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Defend against cloned attroperties (jQuery gh-1709)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tuniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcache = uniqueCache[type] || [];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tnodeIndex = cache[0] === dirruns && cache[1];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdiff = nodeIndex;\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// xml :nth-child(...)\\n\\t\\t\\t\\t\\t\\t\\t\\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\\n\\t\\t\\t\\t\\t\\t\\t\\tif (diff === false) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Use the same loop as above to seek `elem` from the start\\n\\t\\t\\t\\t\\t\\t\\t\\t\\twhile (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Cache the index of each encountered element\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (useCache) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\touterCache = node[expando] || (node[expando] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Support: IE <9 only\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Defend against cloned attroperties (jQuery gh-1709)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tuniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tuniqueCache[type] = [dirruns, diff];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (node === elem) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t// Incorporate the offset, then check against cycle size\\n\\t\\t\\t\\t\\t\\t\\tdiff -= last;\\n\\t\\t\\t\\t\\t\\t\\treturn diff === first || diff % first === 0 && diff / first >= 0;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\\"PSEUDO\\\": function PSEUDO(pseudo, argument) {\\n\\t\\t\\t\\t\\t// pseudo-class names are case-insensitive\\n\\t\\t\\t\\t\\t// http://www.w3.org/TR/selectors/#pseudo-classes\\n\\t\\t\\t\\t\\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\\n\\t\\t\\t\\t\\t// Remember that setFilters inherits from pseudos\\n\\t\\t\\t\\t\\tvar args,\\n\\t\\t\\t\\t\\t    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\\\"unsupported pseudo: \\\" + pseudo);\\n\\n\\t\\t\\t\\t\\t// The user may use createPseudo to indicate that\\n\\t\\t\\t\\t\\t// arguments are needed to create the filter function\\n\\t\\t\\t\\t\\t// just as Sizzle does\\n\\t\\t\\t\\t\\tif (fn[expando]) {\\n\\t\\t\\t\\t\\t\\treturn fn(argument);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// But maintain support for old signatures\\n\\t\\t\\t\\t\\tif (fn.length > 1) {\\n\\t\\t\\t\\t\\t\\targs = [pseudo, pseudo, \\\"\\\", argument];\\n\\t\\t\\t\\t\\t\\treturn Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\\n\\t\\t\\t\\t\\t\\t\\tvar idx,\\n\\t\\t\\t\\t\\t\\t\\t    matched = fn(seed, argument),\\n\\t\\t\\t\\t\\t\\t\\t    i = matched.length;\\n\\t\\t\\t\\t\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\t\\t\\t\\t\\tidx = indexOf(seed, matched[i]);\\n\\t\\t\\t\\t\\t\\t\\t\\tseed[idx] = !(matches[idx] = matched[i]);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}) : function (elem) {\\n\\t\\t\\t\\t\\t\\t\\treturn fn(elem, 0, args);\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn fn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\n\\t\\t\\tpseudos: {\\n\\t\\t\\t\\t// Potentially complex pseudos\\n\\t\\t\\t\\t\\\"not\\\": markFunction(function (selector) {\\n\\t\\t\\t\\t\\t// Trim the selector passed to compile\\n\\t\\t\\t\\t\\t// to avoid treating leading and trailing\\n\\t\\t\\t\\t\\t// spaces as combinators\\n\\t\\t\\t\\t\\tvar input = [],\\n\\t\\t\\t\\t\\t    results = [],\\n\\t\\t\\t\\t\\t    matcher = compile(selector.replace(rtrim, \\\"$1\\\"));\\n\\n\\t\\t\\t\\t\\treturn matcher[expando] ? markFunction(function (seed, matches, context, xml) {\\n\\t\\t\\t\\t\\t\\tvar elem,\\n\\t\\t\\t\\t\\t\\t    unmatched = matcher(seed, null, xml, []),\\n\\t\\t\\t\\t\\t\\t    i = seed.length;\\n\\n\\t\\t\\t\\t\\t\\t// Match elements unmatched by `matcher`\\n\\t\\t\\t\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\t\\t\\t\\tif (elem = unmatched[i]) {\\n\\t\\t\\t\\t\\t\\t\\t\\tseed[i] = !(matches[i] = elem);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}) : function (elem, context, xml) {\\n\\t\\t\\t\\t\\t\\tinput[0] = elem;\\n\\t\\t\\t\\t\\t\\tmatcher(input, null, xml, results);\\n\\t\\t\\t\\t\\t\\t// Don't keep the element (issue #299)\\n\\t\\t\\t\\t\\t\\tinput[0] = null;\\n\\t\\t\\t\\t\\t\\treturn !results.pop();\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}),\\n\\n\\t\\t\\t\\t\\\"has\\\": markFunction(function (selector) {\\n\\t\\t\\t\\t\\treturn function (elem) {\\n\\t\\t\\t\\t\\t\\treturn Sizzle(selector, elem).length > 0;\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}),\\n\\n\\t\\t\\t\\t\\\"contains\\\": markFunction(function (text) {\\n\\t\\t\\t\\t\\ttext = text.replace(runescape, funescape);\\n\\t\\t\\t\\t\\treturn function (elem) {\\n\\t\\t\\t\\t\\t\\treturn (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}),\\n\\n\\t\\t\\t\\t// \\\"Whether an element is represented by a :lang() selector\\n\\t\\t\\t\\t// is based solely on the element's language value\\n\\t\\t\\t\\t// being equal to the identifier C,\\n\\t\\t\\t\\t// or beginning with the identifier C immediately followed by \\\"-\\\".\\n\\t\\t\\t\\t// The matching of C against the element's language value is performed case-insensitively.\\n\\t\\t\\t\\t// The identifier C does not have to be a valid language name.\\\"\\n\\t\\t\\t\\t// http://www.w3.org/TR/selectors/#lang-pseudo\\n\\t\\t\\t\\t\\\"lang\\\": markFunction(function (lang) {\\n\\t\\t\\t\\t\\t// lang value must be a valid identifier\\n\\t\\t\\t\\t\\tif (!ridentifier.test(lang || \\\"\\\")) {\\n\\t\\t\\t\\t\\t\\tSizzle.error(\\\"unsupported lang: \\\" + lang);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tlang = lang.replace(runescape, funescape).toLowerCase();\\n\\t\\t\\t\\t\\treturn function (elem) {\\n\\t\\t\\t\\t\\t\\tvar elemLang;\\n\\t\\t\\t\\t\\t\\tdo {\\n\\t\\t\\t\\t\\t\\t\\tif (elemLang = documentIsHTML ? elem.lang : elem.getAttribute(\\\"xml:lang\\\") || elem.getAttribute(\\\"lang\\\")) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\telemLang = elemLang.toLowerCase();\\n\\t\\t\\t\\t\\t\\t\\t\\treturn elemLang === lang || elemLang.indexOf(lang + \\\"-\\\") === 0;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t} while ((elem = elem.parentNode) && elem.nodeType === 1);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}),\\n\\n\\t\\t\\t\\t// Miscellaneous\\n\\t\\t\\t\\t\\\"target\\\": function target(elem) {\\n\\t\\t\\t\\t\\tvar hash = window.location && window.location.hash;\\n\\t\\t\\t\\t\\treturn hash && hash.slice(1) === elem.id;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\\"root\\\": function root(elem) {\\n\\t\\t\\t\\t\\treturn elem === docElem;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\\"focus\\\": function focus(elem) {\\n\\t\\t\\t\\t\\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Boolean properties\\n\\t\\t\\t\\t\\\"enabled\\\": createDisabledPseudo(false),\\n\\t\\t\\t\\t\\\"disabled\\\": createDisabledPseudo(true),\\n\\n\\t\\t\\t\\t\\\"checked\\\": function checked(elem) {\\n\\t\\t\\t\\t\\t// In CSS3, :checked should return both checked and selected elements\\n\\t\\t\\t\\t\\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\\n\\t\\t\\t\\t\\tvar nodeName = elem.nodeName.toLowerCase();\\n\\t\\t\\t\\t\\treturn nodeName === \\\"input\\\" && !!elem.checked || nodeName === \\\"option\\\" && !!elem.selected;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\\"selected\\\": function selected(elem) {\\n\\t\\t\\t\\t\\t// Accessing this property makes selected-by-default\\n\\t\\t\\t\\t\\t// options in Safari work properly\\n\\t\\t\\t\\t\\tif (elem.parentNode) {\\n\\t\\t\\t\\t\\t\\telem.parentNode.selectedIndex;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn elem.selected === true;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Contents\\n\\t\\t\\t\\t\\\"empty\\\": function empty(elem) {\\n\\t\\t\\t\\t\\t// http://www.w3.org/TR/selectors/#empty-pseudo\\n\\t\\t\\t\\t\\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\\n\\t\\t\\t\\t\\t//   but not by others (comment: 8; processing instruction: 7; etc.)\\n\\t\\t\\t\\t\\t// nodeType < 6 works because attributes (2) do not appear as children\\n\\t\\t\\t\\t\\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\\n\\t\\t\\t\\t\\t\\tif (elem.nodeType < 6) {\\n\\t\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\\"parent\\\": function parent(elem) {\\n\\t\\t\\t\\t\\treturn !Expr.pseudos[\\\"empty\\\"](elem);\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Element/input types\\n\\t\\t\\t\\t\\\"header\\\": function header(elem) {\\n\\t\\t\\t\\t\\treturn rheader.test(elem.nodeName);\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\\"input\\\": function input(elem) {\\n\\t\\t\\t\\t\\treturn rinputs.test(elem.nodeName);\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\\"button\\\": function button(elem) {\\n\\t\\t\\t\\t\\tvar name = elem.nodeName.toLowerCase();\\n\\t\\t\\t\\t\\treturn name === \\\"input\\\" && elem.type === \\\"button\\\" || name === \\\"button\\\";\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\\"text\\\": function text(elem) {\\n\\t\\t\\t\\t\\tvar attr;\\n\\t\\t\\t\\t\\treturn elem.nodeName.toLowerCase() === \\\"input\\\" && elem.type === \\\"text\\\" && (\\n\\n\\t\\t\\t\\t\\t// Support: IE<8\\n\\t\\t\\t\\t\\t// New HTML5 attribute values (e.g., \\\"search\\\") appear with elem.type === \\\"text\\\"\\n\\t\\t\\t\\t\\t(attr = elem.getAttribute(\\\"type\\\")) == null || attr.toLowerCase() === \\\"text\\\");\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Position-in-collection\\n\\t\\t\\t\\t\\\"first\\\": createPositionalPseudo(function () {\\n\\t\\t\\t\\t\\treturn [0];\\n\\t\\t\\t\\t}),\\n\\n\\t\\t\\t\\t\\\"last\\\": createPositionalPseudo(function (matchIndexes, length) {\\n\\t\\t\\t\\t\\treturn [length - 1];\\n\\t\\t\\t\\t}),\\n\\n\\t\\t\\t\\t\\\"eq\\\": createPositionalPseudo(function (matchIndexes, length, argument) {\\n\\t\\t\\t\\t\\treturn [argument < 0 ? argument + length : argument];\\n\\t\\t\\t\\t}),\\n\\n\\t\\t\\t\\t\\\"even\\\": createPositionalPseudo(function (matchIndexes, length) {\\n\\t\\t\\t\\t\\tvar i = 0;\\n\\t\\t\\t\\t\\tfor (; i < length; i += 2) {\\n\\t\\t\\t\\t\\t\\tmatchIndexes.push(i);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn matchIndexes;\\n\\t\\t\\t\\t}),\\n\\n\\t\\t\\t\\t\\\"odd\\\": createPositionalPseudo(function (matchIndexes, length) {\\n\\t\\t\\t\\t\\tvar i = 1;\\n\\t\\t\\t\\t\\tfor (; i < length; i += 2) {\\n\\t\\t\\t\\t\\t\\tmatchIndexes.push(i);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn matchIndexes;\\n\\t\\t\\t\\t}),\\n\\n\\t\\t\\t\\t\\\"lt\\\": createPositionalPseudo(function (matchIndexes, length, argument) {\\n\\t\\t\\t\\t\\tvar i = argument < 0 ? argument + length : argument;\\n\\t\\t\\t\\t\\tfor (; --i >= 0;) {\\n\\t\\t\\t\\t\\t\\tmatchIndexes.push(i);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn matchIndexes;\\n\\t\\t\\t\\t}),\\n\\n\\t\\t\\t\\t\\\"gt\\\": createPositionalPseudo(function (matchIndexes, length, argument) {\\n\\t\\t\\t\\t\\tvar i = argument < 0 ? argument + length : argument;\\n\\t\\t\\t\\t\\tfor (; ++i < length;) {\\n\\t\\t\\t\\t\\t\\tmatchIndexes.push(i);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn matchIndexes;\\n\\t\\t\\t\\t})\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tExpr.pseudos[\\\"nth\\\"] = Expr.pseudos[\\\"eq\\\"];\\n\\n\\t\\t// Add button/input type pseudos\\n\\t\\tfor (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {\\n\\t\\t\\tExpr.pseudos[i] = createInputPseudo(i);\\n\\t\\t}\\n\\t\\tfor (i in { submit: true, reset: true }) {\\n\\t\\t\\tExpr.pseudos[i] = createButtonPseudo(i);\\n\\t\\t}\\n\\n\\t\\t// Easy API for creating new setFilters\\n\\t\\tfunction setFilters() {}\\n\\t\\tsetFilters.prototype = Expr.filters = Expr.pseudos;\\n\\t\\tExpr.setFilters = new setFilters();\\n\\n\\t\\ttokenize = Sizzle.tokenize = function (selector, parseOnly) {\\n\\t\\t\\tvar matched,\\n\\t\\t\\t    match,\\n\\t\\t\\t    tokens,\\n\\t\\t\\t    type,\\n\\t\\t\\t    soFar,\\n\\t\\t\\t    groups,\\n\\t\\t\\t    preFilters,\\n\\t\\t\\t    cached = tokenCache[selector + \\\" \\\"];\\n\\n\\t\\t\\tif (cached) {\\n\\t\\t\\t\\treturn parseOnly ? 0 : cached.slice(0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tsoFar = selector;\\n\\t\\t\\tgroups = [];\\n\\t\\t\\tpreFilters = Expr.preFilter;\\n\\n\\t\\t\\twhile (soFar) {\\n\\n\\t\\t\\t\\t// Comma and first run\\n\\t\\t\\t\\tif (!matched || (match = rcomma.exec(soFar))) {\\n\\t\\t\\t\\t\\tif (match) {\\n\\t\\t\\t\\t\\t\\t// Don't consume trailing commas as valid\\n\\t\\t\\t\\t\\t\\tsoFar = soFar.slice(match[0].length) || soFar;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tgroups.push(tokens = []);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tmatched = false;\\n\\n\\t\\t\\t\\t// Combinators\\n\\t\\t\\t\\tif (match = rcombinators.exec(soFar)) {\\n\\t\\t\\t\\t\\tmatched = match.shift();\\n\\t\\t\\t\\t\\ttokens.push({\\n\\t\\t\\t\\t\\t\\tvalue: matched,\\n\\t\\t\\t\\t\\t\\t// Cast descendant combinators to space\\n\\t\\t\\t\\t\\t\\ttype: match[0].replace(rtrim, \\\" \\\")\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\tsoFar = soFar.slice(matched.length);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Filters\\n\\t\\t\\t\\tfor (type in Expr.filter) {\\n\\t\\t\\t\\t\\tif ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\\n\\t\\t\\t\\t\\t\\tmatched = match.shift();\\n\\t\\t\\t\\t\\t\\ttokens.push({\\n\\t\\t\\t\\t\\t\\t\\tvalue: matched,\\n\\t\\t\\t\\t\\t\\t\\ttype: type,\\n\\t\\t\\t\\t\\t\\t\\tmatches: match\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\tsoFar = soFar.slice(matched.length);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (!matched) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Return the length of the invalid excess\\n\\t\\t\\t// if we're just parsing\\n\\t\\t\\t// Otherwise, throw an error or return tokens\\n\\t\\t\\treturn parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :\\n\\t\\t\\t// Cache the tokens\\n\\t\\t\\ttokenCache(selector, groups).slice(0);\\n\\t\\t};\\n\\n\\t\\tfunction toSelector(tokens) {\\n\\t\\t\\tvar i = 0,\\n\\t\\t\\t    len = tokens.length,\\n\\t\\t\\t    selector = \\\"\\\";\\n\\t\\t\\tfor (; i < len; i++) {\\n\\t\\t\\t\\tselector += tokens[i].value;\\n\\t\\t\\t}\\n\\t\\t\\treturn selector;\\n\\t\\t}\\n\\n\\t\\tfunction addCombinator(matcher, combinator, base) {\\n\\t\\t\\tvar dir = combinator.dir,\\n\\t\\t\\t    skip = combinator.next,\\n\\t\\t\\t    key = skip || dir,\\n\\t\\t\\t    checkNonElements = base && key === \\\"parentNode\\\",\\n\\t\\t\\t    doneName = done++;\\n\\n\\t\\t\\treturn combinator.first ?\\n\\t\\t\\t// Check against closest ancestor/preceding element\\n\\t\\t\\tfunction (elem, context, xml) {\\n\\t\\t\\t\\twhile (elem = elem[dir]) {\\n\\t\\t\\t\\t\\tif (elem.nodeType === 1 || checkNonElements) {\\n\\t\\t\\t\\t\\t\\treturn matcher(elem, context, xml);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t} :\\n\\n\\t\\t\\t// Check against all ancestor/preceding elements\\n\\t\\t\\tfunction (elem, context, xml) {\\n\\t\\t\\t\\tvar oldCache,\\n\\t\\t\\t\\t    uniqueCache,\\n\\t\\t\\t\\t    outerCache,\\n\\t\\t\\t\\t    newCache = [dirruns, doneName];\\n\\n\\t\\t\\t\\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\\n\\t\\t\\t\\tif (xml) {\\n\\t\\t\\t\\t\\twhile (elem = elem[dir]) {\\n\\t\\t\\t\\t\\t\\tif (elem.nodeType === 1 || checkNonElements) {\\n\\t\\t\\t\\t\\t\\t\\tif (matcher(elem, context, xml)) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\twhile (elem = elem[dir]) {\\n\\t\\t\\t\\t\\t\\tif (elem.nodeType === 1 || checkNonElements) {\\n\\t\\t\\t\\t\\t\\t\\touterCache = elem[expando] || (elem[expando] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\t// Support: IE <9 only\\n\\t\\t\\t\\t\\t\\t\\t// Defend against cloned attroperties (jQuery gh-1709)\\n\\t\\t\\t\\t\\t\\t\\tuniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});\\n\\n\\t\\t\\t\\t\\t\\t\\tif (skip && skip === elem.nodeName.toLowerCase()) {\\n\\t\\t\\t\\t\\t\\t\\t\\telem = elem[dir] || elem;\\n\\t\\t\\t\\t\\t\\t\\t} else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Assign to newCache so results back-propagate to previous elements\\n\\t\\t\\t\\t\\t\\t\\t\\treturn newCache[2] = oldCache[2];\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t// Reuse newcache so results back-propagate to previous elements\\n\\t\\t\\t\\t\\t\\t\\t\\tuniqueCache[key] = newCache;\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// A match means we're done; a fail means we have to keep checking\\n\\t\\t\\t\\t\\t\\t\\t\\tif (newCache[2] = matcher(elem, context, xml)) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\tfunction elementMatcher(matchers) {\\n\\t\\t\\treturn matchers.length > 1 ? function (elem, context, xml) {\\n\\t\\t\\t\\tvar i = matchers.length;\\n\\t\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\t\\tif (!matchers[i](elem, context, xml)) {\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t} : matchers[0];\\n\\t\\t}\\n\\n\\t\\tfunction multipleContexts(selector, contexts, results) {\\n\\t\\t\\tvar i = 0,\\n\\t\\t\\t    len = contexts.length;\\n\\t\\t\\tfor (; i < len; i++) {\\n\\t\\t\\t\\tSizzle(selector, contexts[i], results);\\n\\t\\t\\t}\\n\\t\\t\\treturn results;\\n\\t\\t}\\n\\n\\t\\tfunction condense(unmatched, map, filter, context, xml) {\\n\\t\\t\\tvar elem,\\n\\t\\t\\t    newUnmatched = [],\\n\\t\\t\\t    i = 0,\\n\\t\\t\\t    len = unmatched.length,\\n\\t\\t\\t    mapped = map != null;\\n\\n\\t\\t\\tfor (; i < len; i++) {\\n\\t\\t\\t\\tif (elem = unmatched[i]) {\\n\\t\\t\\t\\t\\tif (!filter || filter(elem, context, xml)) {\\n\\t\\t\\t\\t\\t\\tnewUnmatched.push(elem);\\n\\t\\t\\t\\t\\t\\tif (mapped) {\\n\\t\\t\\t\\t\\t\\t\\tmap.push(i);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn newUnmatched;\\n\\t\\t}\\n\\n\\t\\tfunction setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\\n\\t\\t\\tif (postFilter && !postFilter[expando]) {\\n\\t\\t\\t\\tpostFilter = setMatcher(postFilter);\\n\\t\\t\\t}\\n\\t\\t\\tif (postFinder && !postFinder[expando]) {\\n\\t\\t\\t\\tpostFinder = setMatcher(postFinder, postSelector);\\n\\t\\t\\t}\\n\\t\\t\\treturn markFunction(function (seed, results, context, xml) {\\n\\t\\t\\t\\tvar temp,\\n\\t\\t\\t\\t    i,\\n\\t\\t\\t\\t    elem,\\n\\t\\t\\t\\t    preMap = [],\\n\\t\\t\\t\\t    postMap = [],\\n\\t\\t\\t\\t    preexisting = results.length,\\n\\n\\n\\t\\t\\t\\t// Get initial elements from seed or context\\n\\t\\t\\t\\telems = seed || multipleContexts(selector || \\\"*\\\", context.nodeType ? [context] : context, []),\\n\\n\\n\\t\\t\\t\\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\\n\\t\\t\\t\\tmatcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\\n\\t\\t\\t\\t    matcherOut = matcher ?\\n\\t\\t\\t\\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\\n\\t\\t\\t\\tpostFinder || (seed ? preFilter : preexisting || postFilter) ?\\n\\n\\t\\t\\t\\t// ...intermediate processing is necessary\\n\\t\\t\\t\\t[] :\\n\\n\\t\\t\\t\\t// ...otherwise use results directly\\n\\t\\t\\t\\tresults : matcherIn;\\n\\n\\t\\t\\t\\t// Find primary matches\\n\\t\\t\\t\\tif (matcher) {\\n\\t\\t\\t\\t\\tmatcher(matcherIn, matcherOut, context, xml);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Apply postFilter\\n\\t\\t\\t\\tif (postFilter) {\\n\\t\\t\\t\\t\\ttemp = condense(matcherOut, postMap);\\n\\t\\t\\t\\t\\tpostFilter(temp, [], context, xml);\\n\\n\\t\\t\\t\\t\\t// Un-match failing elements by moving them back to matcherIn\\n\\t\\t\\t\\t\\ti = temp.length;\\n\\t\\t\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\t\\t\\tif (elem = temp[i]) {\\n\\t\\t\\t\\t\\t\\t\\tmatcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (seed) {\\n\\t\\t\\t\\t\\tif (postFinder || preFilter) {\\n\\t\\t\\t\\t\\t\\tif (postFinder) {\\n\\t\\t\\t\\t\\t\\t\\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\\n\\t\\t\\t\\t\\t\\t\\ttemp = [];\\n\\t\\t\\t\\t\\t\\t\\ti = matcherOut.length;\\n\\t\\t\\t\\t\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (elem = matcherOut[i]) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Restore matcherIn since elem is not yet a final match\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttemp.push(matcherIn[i] = elem);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tpostFinder(null, matcherOut = [], temp, xml);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Move matched elements from seed to results to keep them synchronized\\n\\t\\t\\t\\t\\t\\ti = matcherOut.length;\\n\\t\\t\\t\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\t\\t\\t\\tif ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tseed[temp] = !(results[temp] = elem);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Add elements to results, through postFinder if defined\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tmatcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\\n\\t\\t\\t\\t\\tif (postFinder) {\\n\\t\\t\\t\\t\\t\\tpostFinder(null, results, matcherOut, xml);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tpush.apply(results, matcherOut);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tfunction matcherFromTokens(tokens) {\\n\\t\\t\\tvar checkContext,\\n\\t\\t\\t    matcher,\\n\\t\\t\\t    j,\\n\\t\\t\\t    len = tokens.length,\\n\\t\\t\\t    leadingRelative = Expr.relative[tokens[0].type],\\n\\t\\t\\t    implicitRelative = leadingRelative || Expr.relative[\\\" \\\"],\\n\\t\\t\\t    i = leadingRelative ? 1 : 0,\\n\\n\\n\\t\\t\\t// The foundational matcher ensures that elements are reachable from top-level context(s)\\n\\t\\t\\tmatchContext = addCombinator(function (elem) {\\n\\t\\t\\t\\treturn elem === checkContext;\\n\\t\\t\\t}, implicitRelative, true),\\n\\t\\t\\t    matchAnyContext = addCombinator(function (elem) {\\n\\t\\t\\t\\treturn indexOf(checkContext, elem) > -1;\\n\\t\\t\\t}, implicitRelative, true),\\n\\t\\t\\t    matchers = [function (elem, context, xml) {\\n\\t\\t\\t\\tvar ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));\\n\\t\\t\\t\\t// Avoid hanging onto element (issue #299)\\n\\t\\t\\t\\tcheckContext = null;\\n\\t\\t\\t\\treturn ret;\\n\\t\\t\\t}];\\n\\n\\t\\t\\tfor (; i < len; i++) {\\n\\t\\t\\t\\tif (matcher = Expr.relative[tokens[i].type]) {\\n\\t\\t\\t\\t\\tmatchers = [addCombinator(elementMatcher(matchers), matcher)];\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tmatcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);\\n\\n\\t\\t\\t\\t\\t// Return special upon seeing a positional matcher\\n\\t\\t\\t\\t\\tif (matcher[expando]) {\\n\\t\\t\\t\\t\\t\\t// Find the next relative operator (if any) for proper handling\\n\\t\\t\\t\\t\\t\\tj = ++i;\\n\\t\\t\\t\\t\\t\\tfor (; j < len; j++) {\\n\\t\\t\\t\\t\\t\\t\\tif (Expr.relative[tokens[j].type]) {\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\treturn setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(\\n\\t\\t\\t\\t\\t\\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\\n\\t\\t\\t\\t\\t\\ttokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === \\\" \\\" ? \\\"*\\\" : \\\"\\\" })).replace(rtrim, \\\"$1\\\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tmatchers.push(matcher);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn elementMatcher(matchers);\\n\\t\\t}\\n\\n\\t\\tfunction matcherFromGroupMatchers(elementMatchers, setMatchers) {\\n\\t\\t\\tvar bySet = setMatchers.length > 0,\\n\\t\\t\\t    byElement = elementMatchers.length > 0,\\n\\t\\t\\t    superMatcher = function superMatcher(seed, context, xml, results, outermost) {\\n\\t\\t\\t\\tvar elem,\\n\\t\\t\\t\\t    j,\\n\\t\\t\\t\\t    matcher,\\n\\t\\t\\t\\t    matchedCount = 0,\\n\\t\\t\\t\\t    i = \\\"0\\\",\\n\\t\\t\\t\\t    unmatched = seed && [],\\n\\t\\t\\t\\t    setMatched = [],\\n\\t\\t\\t\\t    contextBackup = outermostContext,\\n\\n\\t\\t\\t\\t// We must always have either seed elements or outermost context\\n\\t\\t\\t\\telems = seed || byElement && Expr.find[\\\"TAG\\\"](\\\"*\\\", outermost),\\n\\n\\t\\t\\t\\t// Use integer dirruns iff this is the outermost matcher\\n\\t\\t\\t\\tdirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\\n\\t\\t\\t\\t    len = elems.length;\\n\\n\\t\\t\\t\\tif (outermost) {\\n\\t\\t\\t\\t\\toutermostContext = context === document || context || outermost;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Add elements passing elementMatchers directly to results\\n\\t\\t\\t\\t// Support: IE<9, Safari\\n\\t\\t\\t\\t// Tolerate NodeList properties (IE: \\\"length\\\"; Safari: <number>) matching elements by id\\n\\t\\t\\t\\tfor (; i !== len && (elem = elems[i]) != null; i++) {\\n\\t\\t\\t\\t\\tif (byElement && elem) {\\n\\t\\t\\t\\t\\t\\tj = 0;\\n\\t\\t\\t\\t\\t\\tif (!context && elem.ownerDocument !== document) {\\n\\t\\t\\t\\t\\t\\t\\tsetDocument(elem);\\n\\t\\t\\t\\t\\t\\t\\txml = !documentIsHTML;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\twhile (matcher = elementMatchers[j++]) {\\n\\t\\t\\t\\t\\t\\t\\tif (matcher(elem, context || document, xml)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tresults.push(elem);\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (outermost) {\\n\\t\\t\\t\\t\\t\\t\\tdirruns = dirrunsUnique;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Track unmatched elements for set filters\\n\\t\\t\\t\\t\\tif (bySet) {\\n\\t\\t\\t\\t\\t\\t// They will have gone through all possible matchers\\n\\t\\t\\t\\t\\t\\tif (elem = !matcher && elem) {\\n\\t\\t\\t\\t\\t\\t\\tmatchedCount--;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Lengthen the array for every element, matched or not\\n\\t\\t\\t\\t\\t\\tif (seed) {\\n\\t\\t\\t\\t\\t\\t\\tunmatched.push(elem);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\\n\\t\\t\\t\\t// makes the latter nonnegative.\\n\\t\\t\\t\\tmatchedCount += i;\\n\\n\\t\\t\\t\\t// Apply set filters to unmatched elements\\n\\t\\t\\t\\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\\n\\t\\t\\t\\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\\n\\t\\t\\t\\t// no element matchers and no seed.\\n\\t\\t\\t\\t// Incrementing an initially-string \\\"0\\\" `i` allows `i` to remain a string only in that\\n\\t\\t\\t\\t// case, which will result in a \\\"00\\\" `matchedCount` that differs from `i` but is also\\n\\t\\t\\t\\t// numerically zero.\\n\\t\\t\\t\\tif (bySet && i !== matchedCount) {\\n\\t\\t\\t\\t\\tj = 0;\\n\\t\\t\\t\\t\\twhile (matcher = setMatchers[j++]) {\\n\\t\\t\\t\\t\\t\\tmatcher(unmatched, setMatched, context, xml);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (seed) {\\n\\t\\t\\t\\t\\t\\t// Reintegrate element matches to eliminate the need for sorting\\n\\t\\t\\t\\t\\t\\tif (matchedCount > 0) {\\n\\t\\t\\t\\t\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (!(unmatched[i] || setMatched[i])) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsetMatched[i] = pop.call(results);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Discard index placeholder values to get only actual matches\\n\\t\\t\\t\\t\\t\\tsetMatched = condense(setMatched);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Add matches to results\\n\\t\\t\\t\\t\\tpush.apply(results, setMatched);\\n\\n\\t\\t\\t\\t\\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\\n\\t\\t\\t\\t\\tif (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\\n\\n\\t\\t\\t\\t\\t\\tSizzle.uniqueSort(results);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Override manipulation of globals by nested matchers\\n\\t\\t\\t\\tif (outermost) {\\n\\t\\t\\t\\t\\tdirruns = dirrunsUnique;\\n\\t\\t\\t\\t\\toutermostContext = contextBackup;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn unmatched;\\n\\t\\t\\t};\\n\\n\\t\\t\\treturn bySet ? markFunction(superMatcher) : superMatcher;\\n\\t\\t}\\n\\n\\t\\tcompile = Sizzle.compile = function (selector, match /* Internal Use Only */) {\\n\\t\\t\\tvar i,\\n\\t\\t\\t    setMatchers = [],\\n\\t\\t\\t    elementMatchers = [],\\n\\t\\t\\t    cached = compilerCache[selector + \\\" \\\"];\\n\\n\\t\\t\\tif (!cached) {\\n\\t\\t\\t\\t// Generate a function of recursive functions that can be used to check each element\\n\\t\\t\\t\\tif (!match) {\\n\\t\\t\\t\\t\\tmatch = tokenize(selector);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ti = match.length;\\n\\t\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\t\\tcached = matcherFromTokens(match[i]);\\n\\t\\t\\t\\t\\tif (cached[expando]) {\\n\\t\\t\\t\\t\\t\\tsetMatchers.push(cached);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\telementMatchers.push(cached);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Cache the compiled function\\n\\t\\t\\t\\tcached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));\\n\\n\\t\\t\\t\\t// Save selector and tokenization\\n\\t\\t\\t\\tcached.selector = selector;\\n\\t\\t\\t}\\n\\t\\t\\treturn cached;\\n\\t\\t};\\n\\n\\t\\t/**\\n   * A low-level selection function that works with Sizzle's compiled\\n   *  selector functions\\n   * @param {String|Function} selector A selector or a pre-compiled\\n   *  selector function built with Sizzle.compile\\n   * @param {Element} context\\n   * @param {Array} [results]\\n   * @param {Array} [seed] A set of elements to match against\\n   */\\n\\t\\tselect = Sizzle.select = function (selector, context, results, seed) {\\n\\t\\t\\tvar i,\\n\\t\\t\\t    tokens,\\n\\t\\t\\t    token,\\n\\t\\t\\t    type,\\n\\t\\t\\t    find,\\n\\t\\t\\t    compiled = typeof selector === \\\"function\\\" && selector,\\n\\t\\t\\t    match = !seed && tokenize(selector = compiled.selector || selector);\\n\\n\\t\\t\\tresults = results || [];\\n\\n\\t\\t\\t// Try to minimize operations if there is only one selector in the list and no seed\\n\\t\\t\\t// (the latter of which guarantees us context)\\n\\t\\t\\tif (match.length === 1) {\\n\\n\\t\\t\\t\\t// Reduce context if the leading compound selector is an ID\\n\\t\\t\\t\\ttokens = match[0] = match[0].slice(0);\\n\\t\\t\\t\\tif (tokens.length > 2 && (token = tokens[0]).type === \\\"ID\\\" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\\n\\n\\t\\t\\t\\t\\tcontext = (Expr.find[\\\"ID\\\"](token.matches[0].replace(runescape, funescape), context) || [])[0];\\n\\t\\t\\t\\t\\tif (!context) {\\n\\t\\t\\t\\t\\t\\treturn results;\\n\\n\\t\\t\\t\\t\\t\\t// Precompiled matchers will still verify ancestry, so step up a level\\n\\t\\t\\t\\t\\t} else if (compiled) {\\n\\t\\t\\t\\t\\t\\tcontext = context.parentNode;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tselector = selector.slice(tokens.shift().value.length);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Fetch a seed set for right-to-left matching\\n\\t\\t\\t\\ti = matchExpr[\\\"needsContext\\\"].test(selector) ? 0 : tokens.length;\\n\\t\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\t\\ttoken = tokens[i];\\n\\n\\t\\t\\t\\t\\t// Abort if we hit a combinator\\n\\t\\t\\t\\t\\tif (Expr.relative[type = token.type]) {\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif (find = Expr.find[type]) {\\n\\t\\t\\t\\t\\t\\t// Search, expanding context for leading sibling combinators\\n\\t\\t\\t\\t\\t\\tif (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// If seed is empty or no tokens remain, we can return early\\n\\t\\t\\t\\t\\t\\t\\ttokens.splice(i, 1);\\n\\t\\t\\t\\t\\t\\t\\tselector = seed.length && toSelector(tokens);\\n\\t\\t\\t\\t\\t\\t\\tif (!selector) {\\n\\t\\t\\t\\t\\t\\t\\t\\tpush.apply(results, seed);\\n\\t\\t\\t\\t\\t\\t\\t\\treturn results;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Compile and execute a filtering function if one is not provided\\n\\t\\t\\t// Provide `match` to avoid retokenization if we modified the selector above\\n\\t\\t\\t(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\\n\\t\\t\\treturn results;\\n\\t\\t};\\n\\n\\t\\t// One-time assignments\\n\\n\\t\\t// Sort stability\\n\\t\\tsupport.sortStable = expando.split(\\\"\\\").sort(sortOrder).join(\\\"\\\") === expando;\\n\\n\\t\\t// Support: Chrome 14-35+\\n\\t\\t// Always assume duplicates if they aren't passed to the comparison function\\n\\t\\tsupport.detectDuplicates = !!hasDuplicate;\\n\\n\\t\\t// Initialize against the default document\\n\\t\\tsetDocument();\\n\\n\\t\\t// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\\n\\t\\t// Detached nodes confoundingly follow *each other*\\n\\t\\tsupport.sortDetached = assert(function (el) {\\n\\t\\t\\t// Should return 1, but returns 4 (following)\\n\\t\\t\\treturn el.compareDocumentPosition(document.createElement(\\\"fieldset\\\")) & 1;\\n\\t\\t});\\n\\n\\t\\t// Support: IE<8\\n\\t\\t// Prevent attribute/property \\\"interpolation\\\"\\n\\t\\t// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\\n\\t\\tif (!assert(function (el) {\\n\\t\\t\\tel.innerHTML = \\\"<a href='#'></a>\\\";\\n\\t\\t\\treturn el.firstChild.getAttribute(\\\"href\\\") === \\\"#\\\";\\n\\t\\t})) {\\n\\t\\t\\taddHandle(\\\"type|href|height|width\\\", function (elem, name, isXML) {\\n\\t\\t\\t\\tif (!isXML) {\\n\\t\\t\\t\\t\\treturn elem.getAttribute(name, name.toLowerCase() === \\\"type\\\" ? 1 : 2);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Support: IE<9\\n\\t\\t// Use defaultValue in place of getAttribute(\\\"value\\\")\\n\\t\\tif (!support.attributes || !assert(function (el) {\\n\\t\\t\\tel.innerHTML = \\\"<input/>\\\";\\n\\t\\t\\tel.firstChild.setAttribute(\\\"value\\\", \\\"\\\");\\n\\t\\t\\treturn el.firstChild.getAttribute(\\\"value\\\") === \\\"\\\";\\n\\t\\t})) {\\n\\t\\t\\taddHandle(\\\"value\\\", function (elem, name, isXML) {\\n\\t\\t\\t\\tif (!isXML && elem.nodeName.toLowerCase() === \\\"input\\\") {\\n\\t\\t\\t\\t\\treturn elem.defaultValue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Support: IE<9\\n\\t\\t// Use getAttributeNode to fetch booleans when getAttribute lies\\n\\t\\tif (!assert(function (el) {\\n\\t\\t\\treturn el.getAttribute(\\\"disabled\\\") == null;\\n\\t\\t})) {\\n\\t\\t\\taddHandle(booleans, function (elem, name, isXML) {\\n\\t\\t\\t\\tvar val;\\n\\t\\t\\t\\tif (!isXML) {\\n\\t\\t\\t\\t\\treturn elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn Sizzle;\\n\\t}(window);\\n\\n\\tjQuery.find = Sizzle;\\n\\tjQuery.expr = Sizzle.selectors;\\n\\n\\t// Deprecated\\n\\tjQuery.expr[\\\":\\\"] = jQuery.expr.pseudos;\\n\\tjQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\\n\\tjQuery.text = Sizzle.getText;\\n\\tjQuery.isXMLDoc = Sizzle.isXML;\\n\\tjQuery.contains = Sizzle.contains;\\n\\tjQuery.escapeSelector = Sizzle.escape;\\n\\n\\tvar dir = function dir(elem, _dir, until) {\\n\\t\\tvar matched = [],\\n\\t\\t    truncate = until !== undefined;\\n\\n\\t\\twhile ((elem = elem[_dir]) && elem.nodeType !== 9) {\\n\\t\\t\\tif (elem.nodeType === 1) {\\n\\t\\t\\t\\tif (truncate && jQuery(elem).is(until)) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tmatched.push(elem);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn matched;\\n\\t};\\n\\n\\tvar _siblings = function _siblings(n, elem) {\\n\\t\\tvar matched = [];\\n\\n\\t\\tfor (; n; n = n.nextSibling) {\\n\\t\\t\\tif (n.nodeType === 1 && n !== elem) {\\n\\t\\t\\t\\tmatched.push(n);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn matched;\\n\\t};\\n\\n\\tvar rneedsContext = jQuery.expr.match.needsContext;\\n\\n\\tfunction nodeName(elem, name) {\\n\\n\\t\\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\\n\\t};\\n\\tvar rsingleTag = /^<([a-z][^\\\\/\\\\0>:\\\\x20\\\\t\\\\r\\\\n\\\\f]*)[\\\\x20\\\\t\\\\r\\\\n\\\\f]*\\\\/?>(?:<\\\\/\\\\1>|)$/i;\\n\\n\\t// Implement the identical functionality for filter and not\\n\\tfunction winnow(elements, qualifier, not) {\\n\\t\\tif (isFunction(qualifier)) {\\n\\t\\t\\treturn jQuery.grep(elements, function (elem, i) {\\n\\t\\t\\t\\treturn !!qualifier.call(elem, i, elem) !== not;\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Single element\\n\\t\\tif (qualifier.nodeType) {\\n\\t\\t\\treturn jQuery.grep(elements, function (elem) {\\n\\t\\t\\t\\treturn elem === qualifier !== not;\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Arraylike of elements (jQuery, arguments, Array)\\n\\t\\tif (typeof qualifier !== \\\"string\\\") {\\n\\t\\t\\treturn jQuery.grep(elements, function (elem) {\\n\\t\\t\\t\\treturn indexOf.call(qualifier, elem) > -1 !== not;\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Filtered directly for both simple and complex selectors\\n\\t\\treturn jQuery.filter(qualifier, elements, not);\\n\\t}\\n\\n\\tjQuery.filter = function (expr, elems, not) {\\n\\t\\tvar elem = elems[0];\\n\\n\\t\\tif (not) {\\n\\t\\t\\texpr = \\\":not(\\\" + expr + \\\")\\\";\\n\\t\\t}\\n\\n\\t\\tif (elems.length === 1 && elem.nodeType === 1) {\\n\\t\\t\\treturn jQuery.find.matchesSelector(elem, expr) ? [elem] : [];\\n\\t\\t}\\n\\n\\t\\treturn jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\\n\\t\\t\\treturn elem.nodeType === 1;\\n\\t\\t}));\\n\\t};\\n\\n\\tjQuery.fn.extend({\\n\\t\\tfind: function find(selector) {\\n\\t\\t\\tvar i,\\n\\t\\t\\t    ret,\\n\\t\\t\\t    len = this.length,\\n\\t\\t\\t    self = this;\\n\\n\\t\\t\\tif (typeof selector !== \\\"string\\\") {\\n\\t\\t\\t\\treturn this.pushStack(jQuery(selector).filter(function () {\\n\\t\\t\\t\\t\\tfor (i = 0; i < len; i++) {\\n\\t\\t\\t\\t\\t\\tif (jQuery.contains(self[i], this)) {\\n\\t\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}));\\n\\t\\t\\t}\\n\\n\\t\\t\\tret = this.pushStack([]);\\n\\n\\t\\t\\tfor (i = 0; i < len; i++) {\\n\\t\\t\\t\\tjQuery.find(selector, self[i], ret);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn len > 1 ? jQuery.uniqueSort(ret) : ret;\\n\\t\\t},\\n\\t\\tfilter: function filter(selector) {\\n\\t\\t\\treturn this.pushStack(winnow(this, selector || [], false));\\n\\t\\t},\\n\\t\\tnot: function not(selector) {\\n\\t\\t\\treturn this.pushStack(winnow(this, selector || [], true));\\n\\t\\t},\\n\\t\\tis: function is(selector) {\\n\\t\\t\\treturn !!winnow(this,\\n\\n\\t\\t\\t// If this is a positional/relative selector, check membership in the returned set\\n\\t\\t\\t// so $(\\\"p:first\\\").is(\\\"p:last\\\") won't return true for a doc with two \\\"p\\\".\\n\\t\\t\\ttypeof selector === \\\"string\\\" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\\n\\t\\t}\\n\\t});\\n\\n\\t// Initialize a jQuery object\\n\\n\\n\\t// A central reference to the root jQuery(document)\\n\\tvar rootjQuery,\\n\\n\\n\\t// A simple way to check for HTML strings\\n\\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\\n\\t// Strict HTML recognition (#11290: must start with <)\\n\\t// Shortcut simple #id case for speed\\n\\trquickExpr = /^(?:\\\\s*(<[\\\\w\\\\W]+>)[^>]*|#([\\\\w-]+))$/,\\n\\t    init = jQuery.fn.init = function (selector, context, root) {\\n\\t\\tvar match, elem;\\n\\n\\t\\t// HANDLE: $(\\\"\\\"), $(null), $(undefined), $(false)\\n\\t\\tif (!selector) {\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\t// Method init() accepts an alternate rootjQuery\\n\\t\\t// so migrate can support jQuery.sub (gh-2101)\\n\\t\\troot = root || rootjQuery;\\n\\n\\t\\t// Handle HTML strings\\n\\t\\tif (typeof selector === \\\"string\\\") {\\n\\t\\t\\tif (selector[0] === \\\"<\\\" && selector[selector.length - 1] === \\\">\\\" && selector.length >= 3) {\\n\\n\\t\\t\\t\\t// Assume that strings that start and end with <> are HTML and skip the regex check\\n\\t\\t\\t\\tmatch = [null, selector, null];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmatch = rquickExpr.exec(selector);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Match html or make sure no context is specified for #id\\n\\t\\t\\tif (match && (match[1] || !context)) {\\n\\n\\t\\t\\t\\t// HANDLE: $(html) -> $(array)\\n\\t\\t\\t\\tif (match[1]) {\\n\\t\\t\\t\\t\\tcontext = context instanceof jQuery ? context[0] : context;\\n\\n\\t\\t\\t\\t\\t// Option to run scripts is true for back-compat\\n\\t\\t\\t\\t\\t// Intentionally let the error be thrown if parseHTML is not present\\n\\t\\t\\t\\t\\tjQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));\\n\\n\\t\\t\\t\\t\\t// HANDLE: $(html, props)\\n\\t\\t\\t\\t\\tif (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\\n\\t\\t\\t\\t\\t\\tfor (match in context) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Properties of context are called as methods if possible\\n\\t\\t\\t\\t\\t\\t\\tif (isFunction(this[match])) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis[match](context[match]);\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// ...and otherwise set as attributes\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.attr(match, context[match]);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn this;\\n\\n\\t\\t\\t\\t\\t// HANDLE: $(#id)\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\telem = document.getElementById(match[2]);\\n\\n\\t\\t\\t\\t\\tif (elem) {\\n\\n\\t\\t\\t\\t\\t\\t// Inject the element directly into the jQuery object\\n\\t\\t\\t\\t\\t\\tthis[0] = elem;\\n\\t\\t\\t\\t\\t\\tthis.length = 1;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// HANDLE: $(expr, $(...))\\n\\t\\t\\t} else if (!context || context.jquery) {\\n\\t\\t\\t\\treturn (context || root).find(selector);\\n\\n\\t\\t\\t\\t// HANDLE: $(expr, context)\\n\\t\\t\\t\\t// (which is just equivalent to: $(context).find(expr)\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn this.constructor(context).find(selector);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// HANDLE: $(DOMElement)\\n\\t\\t} else if (selector.nodeType) {\\n\\t\\t\\tthis[0] = selector;\\n\\t\\t\\tthis.length = 1;\\n\\t\\t\\treturn this;\\n\\n\\t\\t\\t// HANDLE: $(function)\\n\\t\\t\\t// Shortcut for document ready\\n\\t\\t} else if (isFunction(selector)) {\\n\\t\\t\\treturn root.ready !== undefined ? root.ready(selector) :\\n\\n\\t\\t\\t// Execute immediately if ready is not present\\n\\t\\t\\tselector(jQuery);\\n\\t\\t}\\n\\n\\t\\treturn jQuery.makeArray(selector, this);\\n\\t};\\n\\n\\t// Give the init function the jQuery prototype for later instantiation\\n\\tinit.prototype = jQuery.fn;\\n\\n\\t// Initialize central reference\\n\\trootjQuery = jQuery(document);\\n\\n\\tvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\\n\\n\\n\\t// Methods guaranteed to produce a unique set when starting from a unique set\\n\\tguaranteedUnique = {\\n\\t\\tchildren: true,\\n\\t\\tcontents: true,\\n\\t\\tnext: true,\\n\\t\\tprev: true\\n\\t};\\n\\n\\tjQuery.fn.extend({\\n\\t\\thas: function has(target) {\\n\\t\\t\\tvar targets = jQuery(target, this),\\n\\t\\t\\t    l = targets.length;\\n\\n\\t\\t\\treturn this.filter(function () {\\n\\t\\t\\t\\tvar i = 0;\\n\\t\\t\\t\\tfor (; i < l; i++) {\\n\\t\\t\\t\\t\\tif (jQuery.contains(this, targets[i])) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t},\\n\\n\\t\\tclosest: function closest(selectors, context) {\\n\\t\\t\\tvar cur,\\n\\t\\t\\t    i = 0,\\n\\t\\t\\t    l = this.length,\\n\\t\\t\\t    matched = [],\\n\\t\\t\\t    targets = typeof selectors !== \\\"string\\\" && jQuery(selectors);\\n\\n\\t\\t\\t// Positional selectors never match, since there's no _selection_ context\\n\\t\\t\\tif (!rneedsContext.test(selectors)) {\\n\\t\\t\\t\\tfor (; i < l; i++) {\\n\\t\\t\\t\\t\\tfor (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\\n\\n\\t\\t\\t\\t\\t\\t// Always skip document fragments\\n\\t\\t\\t\\t\\t\\tif (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :\\n\\n\\t\\t\\t\\t\\t\\t// Don't pass non-elements to Sizzle\\n\\t\\t\\t\\t\\t\\tcur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\\n\\n\\t\\t\\t\\t\\t\\t\\tmatched.push(cur);\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);\\n\\t\\t},\\n\\n\\t\\t// Determine the position of an element within the set\\n\\t\\tindex: function index(elem) {\\n\\n\\t\\t\\t// No argument, return index in parent\\n\\t\\t\\tif (!elem) {\\n\\t\\t\\t\\treturn this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Index in selector\\n\\t\\t\\tif (typeof elem === \\\"string\\\") {\\n\\t\\t\\t\\treturn indexOf.call(jQuery(elem), this[0]);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Locate the position of the desired element\\n\\t\\t\\treturn indexOf.call(this,\\n\\n\\t\\t\\t// If it receives a jQuery object, the first element is used\\n\\t\\t\\telem.jquery ? elem[0] : elem);\\n\\t\\t},\\n\\n\\t\\tadd: function add(selector, context) {\\n\\t\\t\\treturn this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));\\n\\t\\t},\\n\\n\\t\\taddBack: function addBack(selector) {\\n\\t\\t\\treturn this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\\n\\t\\t}\\n\\t});\\n\\n\\tfunction sibling(cur, dir) {\\n\\t\\twhile ((cur = cur[dir]) && cur.nodeType !== 1) {}\\n\\t\\treturn cur;\\n\\t}\\n\\n\\tjQuery.each({\\n\\t\\tparent: function parent(elem) {\\n\\t\\t\\tvar parent = elem.parentNode;\\n\\t\\t\\treturn parent && parent.nodeType !== 11 ? parent : null;\\n\\t\\t},\\n\\t\\tparents: function parents(elem) {\\n\\t\\t\\treturn dir(elem, \\\"parentNode\\\");\\n\\t\\t},\\n\\t\\tparentsUntil: function parentsUntil(elem, i, until) {\\n\\t\\t\\treturn dir(elem, \\\"parentNode\\\", until);\\n\\t\\t},\\n\\t\\tnext: function next(elem) {\\n\\t\\t\\treturn sibling(elem, \\\"nextSibling\\\");\\n\\t\\t},\\n\\t\\tprev: function prev(elem) {\\n\\t\\t\\treturn sibling(elem, \\\"previousSibling\\\");\\n\\t\\t},\\n\\t\\tnextAll: function nextAll(elem) {\\n\\t\\t\\treturn dir(elem, \\\"nextSibling\\\");\\n\\t\\t},\\n\\t\\tprevAll: function prevAll(elem) {\\n\\t\\t\\treturn dir(elem, \\\"previousSibling\\\");\\n\\t\\t},\\n\\t\\tnextUntil: function nextUntil(elem, i, until) {\\n\\t\\t\\treturn dir(elem, \\\"nextSibling\\\", until);\\n\\t\\t},\\n\\t\\tprevUntil: function prevUntil(elem, i, until) {\\n\\t\\t\\treturn dir(elem, \\\"previousSibling\\\", until);\\n\\t\\t},\\n\\t\\tsiblings: function siblings(elem) {\\n\\t\\t\\treturn _siblings((elem.parentNode || {}).firstChild, elem);\\n\\t\\t},\\n\\t\\tchildren: function children(elem) {\\n\\t\\t\\treturn _siblings(elem.firstChild);\\n\\t\\t},\\n\\t\\tcontents: function contents(elem) {\\n\\t\\t\\tif (nodeName(elem, \\\"iframe\\\")) {\\n\\t\\t\\t\\treturn elem.contentDocument;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\\n\\t\\t\\t// Treat the template element as a regular one in browsers that\\n\\t\\t\\t// don't support it.\\n\\t\\t\\tif (nodeName(elem, \\\"template\\\")) {\\n\\t\\t\\t\\telem = elem.content || elem;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn jQuery.merge([], elem.childNodes);\\n\\t\\t}\\n\\t}, function (name, fn) {\\n\\t\\tjQuery.fn[name] = function (until, selector) {\\n\\t\\t\\tvar matched = jQuery.map(this, fn, until);\\n\\n\\t\\t\\tif (name.slice(-5) !== \\\"Until\\\") {\\n\\t\\t\\t\\tselector = until;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (selector && typeof selector === \\\"string\\\") {\\n\\t\\t\\t\\tmatched = jQuery.filter(selector, matched);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (this.length > 1) {\\n\\n\\t\\t\\t\\t// Remove duplicates\\n\\t\\t\\t\\tif (!guaranteedUnique[name]) {\\n\\t\\t\\t\\t\\tjQuery.uniqueSort(matched);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Reverse order for parents* and prev-derivatives\\n\\t\\t\\t\\tif (rparentsprev.test(name)) {\\n\\t\\t\\t\\t\\tmatched.reverse();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.pushStack(matched);\\n\\t\\t};\\n\\t});\\n\\tvar rnothtmlwhite = /[^\\\\x20\\\\t\\\\r\\\\n\\\\f]+/g;\\n\\n\\t// Convert String-formatted options into Object-formatted ones\\n\\tfunction createOptions(options) {\\n\\t\\tvar object = {};\\n\\t\\tjQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\\n\\t\\t\\tobject[flag] = true;\\n\\t\\t});\\n\\t\\treturn object;\\n\\t}\\n\\n\\t/*\\n  * Create a callback list using the following parameters:\\n  *\\n  *\\toptions: an optional list of space-separated options that will change how\\n  *\\t\\t\\tthe callback list behaves or a more traditional option object\\n  *\\n  * By default a callback list will act like an event callback list and can be\\n  * \\\"fired\\\" multiple times.\\n  *\\n  * Possible options:\\n  *\\n  *\\tonce:\\t\\t\\twill ensure the callback list can only be fired once (like a Deferred)\\n  *\\n  *\\tmemory:\\t\\t\\twill keep track of previous values and will call any callback added\\n  *\\t\\t\\t\\t\\tafter the list has been fired right away with the latest \\\"memorized\\\"\\n  *\\t\\t\\t\\t\\tvalues (like a Deferred)\\n  *\\n  *\\tunique:\\t\\t\\twill ensure a callback can only be added once (no duplicate in the list)\\n  *\\n  *\\tstopOnFalse:\\tinterrupt callings when a callback returns false\\n  *\\n  */\\n\\tjQuery.Callbacks = function (options) {\\n\\n\\t\\t// Convert options from String-formatted to Object-formatted if needed\\n\\t\\t// (we check in cache first)\\n\\t\\toptions = typeof options === \\\"string\\\" ? createOptions(options) : jQuery.extend({}, options);\\n\\n\\t\\tvar // Flag to know if list is currently firing\\n\\t\\tfiring,\\n\\n\\n\\t\\t// Last fire value for non-forgettable lists\\n\\t\\tmemory,\\n\\n\\n\\t\\t// Flag to know if list was already fired\\n\\t\\t_fired,\\n\\n\\n\\t\\t// Flag to prevent firing\\n\\t\\t_locked,\\n\\n\\n\\t\\t// Actual callback list\\n\\t\\tlist = [],\\n\\n\\n\\t\\t// Queue of execution data for repeatable lists\\n\\t\\tqueue = [],\\n\\n\\n\\t\\t// Index of currently firing callback (modified by add/remove as needed)\\n\\t\\tfiringIndex = -1,\\n\\n\\n\\t\\t// Fire callbacks\\n\\t\\tfire = function fire() {\\n\\n\\t\\t\\t// Enforce single-firing\\n\\t\\t\\t_locked = _locked || options.once;\\n\\n\\t\\t\\t// Execute callbacks for all pending executions,\\n\\t\\t\\t// respecting firingIndex overrides and runtime changes\\n\\t\\t\\t_fired = firing = true;\\n\\t\\t\\tfor (; queue.length; firingIndex = -1) {\\n\\t\\t\\t\\tmemory = queue.shift();\\n\\t\\t\\t\\twhile (++firingIndex < list.length) {\\n\\n\\t\\t\\t\\t\\t// Run callback and check for early termination\\n\\t\\t\\t\\t\\tif (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\\n\\n\\t\\t\\t\\t\\t\\t// Jump to end and forget the data so .add doesn't re-fire\\n\\t\\t\\t\\t\\t\\tfiringIndex = list.length;\\n\\t\\t\\t\\t\\t\\tmemory = false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Forget the data if we're done with it\\n\\t\\t\\tif (!options.memory) {\\n\\t\\t\\t\\tmemory = false;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfiring = false;\\n\\n\\t\\t\\t// Clean up if we're done firing for good\\n\\t\\t\\tif (_locked) {\\n\\n\\t\\t\\t\\t// Keep an empty list if we have data for future add calls\\n\\t\\t\\t\\tif (memory) {\\n\\t\\t\\t\\t\\tlist = [];\\n\\n\\t\\t\\t\\t\\t// Otherwise, this object is spent\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tlist = \\\"\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\n\\t\\t// Actual Callbacks object\\n\\t\\tself = {\\n\\n\\t\\t\\t// Add a callback or a collection of callbacks to the list\\n\\t\\t\\tadd: function add() {\\n\\t\\t\\t\\tif (list) {\\n\\n\\t\\t\\t\\t\\t// If we have memory from a past run, we should fire after adding\\n\\t\\t\\t\\t\\tif (memory && !firing) {\\n\\t\\t\\t\\t\\t\\tfiringIndex = list.length - 1;\\n\\t\\t\\t\\t\\t\\tqueue.push(memory);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t(function add(args) {\\n\\t\\t\\t\\t\\t\\tjQuery.each(args, function (_, arg) {\\n\\t\\t\\t\\t\\t\\t\\tif (isFunction(arg)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (!options.unique || !self.has(arg)) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tlist.push(arg);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t} else if (arg && arg.length && toType(arg) !== \\\"string\\\") {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Inspect recursively\\n\\t\\t\\t\\t\\t\\t\\t\\tadd(arg);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t})(arguments);\\n\\n\\t\\t\\t\\t\\tif (memory && !firing) {\\n\\t\\t\\t\\t\\t\\tfire();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Remove a callback from the list\\n\\t\\t\\tremove: function remove() {\\n\\t\\t\\t\\tjQuery.each(arguments, function (_, arg) {\\n\\t\\t\\t\\t\\tvar index;\\n\\t\\t\\t\\t\\twhile ((index = jQuery.inArray(arg, list, index)) > -1) {\\n\\t\\t\\t\\t\\t\\tlist.splice(index, 1);\\n\\n\\t\\t\\t\\t\\t\\t// Handle firing indexes\\n\\t\\t\\t\\t\\t\\tif (index <= firingIndex) {\\n\\t\\t\\t\\t\\t\\t\\tfiringIndex--;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Check if a given callback is in the list.\\n\\t\\t\\t// If no argument is given, return whether or not list has callbacks attached.\\n\\t\\t\\thas: function has(fn) {\\n\\t\\t\\t\\treturn fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Remove all callbacks from the list\\n\\t\\t\\tempty: function empty() {\\n\\t\\t\\t\\tif (list) {\\n\\t\\t\\t\\t\\tlist = [];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Disable .fire and .add\\n\\t\\t\\t// Abort any current/pending executions\\n\\t\\t\\t// Clear all callbacks and values\\n\\t\\t\\tdisable: function disable() {\\n\\t\\t\\t\\t_locked = queue = [];\\n\\t\\t\\t\\tlist = memory = \\\"\\\";\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\t\\t\\tdisabled: function disabled() {\\n\\t\\t\\t\\treturn !list;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Disable .fire\\n\\t\\t\\t// Also disable .add unless we have memory (since it would have no effect)\\n\\t\\t\\t// Abort any pending executions\\n\\t\\t\\tlock: function lock() {\\n\\t\\t\\t\\t_locked = queue = [];\\n\\t\\t\\t\\tif (!memory && !firing) {\\n\\t\\t\\t\\t\\tlist = memory = \\\"\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\t\\t\\tlocked: function locked() {\\n\\t\\t\\t\\treturn !!_locked;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Call all callbacks with the given context and arguments\\n\\t\\t\\tfireWith: function fireWith(context, args) {\\n\\t\\t\\t\\tif (!_locked) {\\n\\t\\t\\t\\t\\targs = args || [];\\n\\t\\t\\t\\t\\targs = [context, args.slice ? args.slice() : args];\\n\\t\\t\\t\\t\\tqueue.push(args);\\n\\t\\t\\t\\t\\tif (!firing) {\\n\\t\\t\\t\\t\\t\\tfire();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Call all the callbacks with the given arguments\\n\\t\\t\\tfire: function fire() {\\n\\t\\t\\t\\tself.fireWith(this, arguments);\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t},\\n\\n\\t\\t\\t// To know if the callbacks have already been called at least once\\n\\t\\t\\tfired: function fired() {\\n\\t\\t\\t\\treturn !!_fired;\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\treturn self;\\n\\t};\\n\\n\\tfunction Identity(v) {\\n\\t\\treturn v;\\n\\t}\\n\\tfunction Thrower(ex) {\\n\\t\\tthrow ex;\\n\\t}\\n\\n\\tfunction adoptValue(value, resolve, reject, noValue) {\\n\\t\\tvar method;\\n\\n\\t\\ttry {\\n\\n\\t\\t\\t// Check for promise aspect first to privilege synchronous behavior\\n\\t\\t\\tif (value && isFunction(method = value.promise)) {\\n\\t\\t\\t\\tmethod.call(value).done(resolve).fail(reject);\\n\\n\\t\\t\\t\\t// Other thenables\\n\\t\\t\\t} else if (value && isFunction(method = value.then)) {\\n\\t\\t\\t\\tmethod.call(value, resolve, reject);\\n\\n\\t\\t\\t\\t// Other non-thenables\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\\n\\t\\t\\t\\t// * false: [ value ].slice( 0 ) => resolve( value )\\n\\t\\t\\t\\t// * true: [ value ].slice( 1 ) => resolve()\\n\\t\\t\\t\\tresolve.apply(undefined, [value].slice(noValue));\\n\\t\\t\\t}\\n\\n\\t\\t\\t// For Promises/A+, convert exceptions into rejections\\n\\t\\t\\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\\n\\t\\t\\t// Deferred#then to conditionally suppress rejection.\\n\\t\\t} catch (value) {\\n\\n\\t\\t\\t// Support: Android 4.0 only\\n\\t\\t\\t// Strict mode functions invoked without .call/.apply get global-object context\\n\\t\\t\\treject.apply(undefined, [value]);\\n\\t\\t}\\n\\t}\\n\\n\\tjQuery.extend({\\n\\n\\t\\tDeferred: function Deferred(func) {\\n\\t\\t\\tvar tuples = [\\n\\n\\t\\t\\t// action, add listener, callbacks,\\n\\t\\t\\t// ... .then handlers, argument index, [final state]\\n\\t\\t\\t[\\\"notify\\\", \\\"progress\\\", jQuery.Callbacks(\\\"memory\\\"), jQuery.Callbacks(\\\"memory\\\"), 2], [\\\"resolve\\\", \\\"done\\\", jQuery.Callbacks(\\\"once memory\\\"), jQuery.Callbacks(\\\"once memory\\\"), 0, \\\"resolved\\\"], [\\\"reject\\\", \\\"fail\\\", jQuery.Callbacks(\\\"once memory\\\"), jQuery.Callbacks(\\\"once memory\\\"), 1, \\\"rejected\\\"]],\\n\\t\\t\\t    _state = \\\"pending\\\",\\n\\t\\t\\t    _promise = {\\n\\t\\t\\t\\tstate: function state() {\\n\\t\\t\\t\\t\\treturn _state;\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\talways: function always() {\\n\\t\\t\\t\\t\\tdeferred.done(arguments).fail(arguments);\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\\"catch\\\": function _catch(fn) {\\n\\t\\t\\t\\t\\treturn _promise.then(null, fn);\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Keep pipe for back-compat\\n\\t\\t\\t\\tpipe: function pipe() /* fnDone, fnFail, fnProgress */{\\n\\t\\t\\t\\t\\tvar fns = arguments;\\n\\n\\t\\t\\t\\t\\treturn jQuery.Deferred(function (newDefer) {\\n\\t\\t\\t\\t\\t\\tjQuery.each(tuples, function (i, tuple) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\\n\\t\\t\\t\\t\\t\\t\\tvar fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];\\n\\n\\t\\t\\t\\t\\t\\t\\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\\n\\t\\t\\t\\t\\t\\t\\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\\n\\t\\t\\t\\t\\t\\t\\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\\n\\t\\t\\t\\t\\t\\t\\tdeferred[tuple[1]](function () {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar returned = fn && fn.apply(this, arguments);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (returned && isFunction(returned.promise)) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tnewDefer[tuple[0] + \\\"With\\\"](this, fn ? [returned] : arguments);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\tfns = null;\\n\\t\\t\\t\\t\\t}).promise();\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tthen: function then(onFulfilled, onRejected, onProgress) {\\n\\t\\t\\t\\t\\tvar maxDepth = 0;\\n\\t\\t\\t\\t\\tfunction resolve(depth, deferred, handler, special) {\\n\\t\\t\\t\\t\\t\\treturn function () {\\n\\t\\t\\t\\t\\t\\t\\tvar that = this,\\n\\t\\t\\t\\t\\t\\t\\t    args = arguments,\\n\\t\\t\\t\\t\\t\\t\\t    mightThrow = function mightThrow() {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar returned, then;\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Support: Promises/A+ section 2.3.3.3.3\\n\\t\\t\\t\\t\\t\\t\\t\\t// https://promisesaplus.com/#point-59\\n\\t\\t\\t\\t\\t\\t\\t\\t// Ignore double-resolution attempts\\n\\t\\t\\t\\t\\t\\t\\t\\tif (depth < maxDepth) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\treturned = handler.apply(that, args);\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Support: Promises/A+ section 2.3.1\\n\\t\\t\\t\\t\\t\\t\\t\\t// https://promisesaplus.com/#point-48\\n\\t\\t\\t\\t\\t\\t\\t\\tif (returned === deferred.promise()) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tthrow new TypeError(\\\"Thenable self-resolution\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Support: Promises/A+ sections 2.3.3.1, 3.5\\n\\t\\t\\t\\t\\t\\t\\t\\t// https://promisesaplus.com/#point-54\\n\\t\\t\\t\\t\\t\\t\\t\\t// https://promisesaplus.com/#point-75\\n\\t\\t\\t\\t\\t\\t\\t\\t// Retrieve `then` only once\\n\\t\\t\\t\\t\\t\\t\\t\\tthen = returned && (\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Support: Promises/A+ section 2.3.4\\n\\t\\t\\t\\t\\t\\t\\t\\t// https://promisesaplus.com/#point-64\\n\\t\\t\\t\\t\\t\\t\\t\\t// Only check objects and functions for thenability\\n\\t\\t\\t\\t\\t\\t\\t\\t(typeof returned === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(returned)) === \\\"object\\\" || typeof returned === \\\"function\\\") && returned.then;\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Handle a returned thenable\\n\\t\\t\\t\\t\\t\\t\\t\\tif (isFunction(then)) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Special processors (notify) just wait for resolution\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (special) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthen.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Normal processors (resolve) also hook into progress\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// ...and disregard older resolution values\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tmaxDepth++;\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthen.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Handle all other returned values\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Only substitute handlers pass on context\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// and multiple values (non-spec behavior)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (handler !== Identity) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthat = undefined;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\targs = [returned];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Process the value(s)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Default process is resolve\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(special || deferred.resolveWith)(that, args);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\n\\n\\t\\t\\t\\t\\t\\t\\t// Only normal processors (resolve) catch and reject exceptions\\n\\t\\t\\t\\t\\t\\t\\tprocess = special ? mightThrow : function () {\\n\\t\\t\\t\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tmightThrow();\\n\\t\\t\\t\\t\\t\\t\\t\\t} catch (e) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (jQuery.Deferred.exceptionHook) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tjQuery.Deferred.exceptionHook(e, process.stackTrace);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Support: Promises/A+ section 2.3.3.3.4.1\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// https://promisesaplus.com/#point-61\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Ignore post-resolution exceptions\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (depth + 1 >= maxDepth) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Only substitute handlers pass on context\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// and multiple values (non-spec behavior)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (handler !== Thrower) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthat = undefined;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\targs = [e];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdeferred.rejectWith(that, args);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t\\t\\t\\t// Support: Promises/A+ section 2.3.3.3.1\\n\\t\\t\\t\\t\\t\\t\\t// https://promisesaplus.com/#point-57\\n\\t\\t\\t\\t\\t\\t\\t// Re-resolve promises immediately to dodge false rejection from\\n\\t\\t\\t\\t\\t\\t\\t// subsequent errors\\n\\t\\t\\t\\t\\t\\t\\tif (depth) {\\n\\t\\t\\t\\t\\t\\t\\t\\tprocess();\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Call an optional hook to record the stack, in case of exception\\n\\t\\t\\t\\t\\t\\t\\t\\t// since it's otherwise lost when execution goes async\\n\\t\\t\\t\\t\\t\\t\\t\\tif (jQuery.Deferred.getStackHook) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tprocess.stackTrace = jQuery.Deferred.getStackHook();\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\twindow.setTimeout(process);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn jQuery.Deferred(function (newDefer) {\\n\\n\\t\\t\\t\\t\\t\\t// progress_handlers.add( ... )\\n\\t\\t\\t\\t\\t\\ttuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));\\n\\n\\t\\t\\t\\t\\t\\t// fulfilled_handlers.add( ... )\\n\\t\\t\\t\\t\\t\\ttuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));\\n\\n\\t\\t\\t\\t\\t\\t// rejected_handlers.add( ... )\\n\\t\\t\\t\\t\\t\\ttuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));\\n\\t\\t\\t\\t\\t}).promise();\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Get a promise for this deferred\\n\\t\\t\\t\\t// If obj is provided, the promise aspect is added to the object\\n\\t\\t\\t\\tpromise: function promise(obj) {\\n\\t\\t\\t\\t\\treturn obj != null ? jQuery.extend(obj, _promise) : _promise;\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\t    deferred = {};\\n\\n\\t\\t\\t// Add list-specific methods\\n\\t\\t\\tjQuery.each(tuples, function (i, tuple) {\\n\\t\\t\\t\\tvar list = tuple[2],\\n\\t\\t\\t\\t    stateString = tuple[5];\\n\\n\\t\\t\\t\\t// promise.progress = list.add\\n\\t\\t\\t\\t// promise.done = list.add\\n\\t\\t\\t\\t// promise.fail = list.add\\n\\t\\t\\t\\t_promise[tuple[1]] = list.add;\\n\\n\\t\\t\\t\\t// Handle state\\n\\t\\t\\t\\tif (stateString) {\\n\\t\\t\\t\\t\\tlist.add(function () {\\n\\n\\t\\t\\t\\t\\t\\t// state = \\\"resolved\\\" (i.e., fulfilled)\\n\\t\\t\\t\\t\\t\\t// state = \\\"rejected\\\"\\n\\t\\t\\t\\t\\t\\t_state = stateString;\\n\\t\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t\\t// rejected_callbacks.disable\\n\\t\\t\\t\\t\\t// fulfilled_callbacks.disable\\n\\t\\t\\t\\t\\ttuples[3 - i][2].disable,\\n\\n\\t\\t\\t\\t\\t// rejected_handlers.disable\\n\\t\\t\\t\\t\\t// fulfilled_handlers.disable\\n\\t\\t\\t\\t\\ttuples[3 - i][3].disable,\\n\\n\\t\\t\\t\\t\\t// progress_callbacks.lock\\n\\t\\t\\t\\t\\ttuples[0][2].lock,\\n\\n\\t\\t\\t\\t\\t// progress_handlers.lock\\n\\t\\t\\t\\t\\ttuples[0][3].lock);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// progress_handlers.fire\\n\\t\\t\\t\\t// fulfilled_handlers.fire\\n\\t\\t\\t\\t// rejected_handlers.fire\\n\\t\\t\\t\\tlist.add(tuple[3].fire);\\n\\n\\t\\t\\t\\t// deferred.notify = function() { deferred.notifyWith(...) }\\n\\t\\t\\t\\t// deferred.resolve = function() { deferred.resolveWith(...) }\\n\\t\\t\\t\\t// deferred.reject = function() { deferred.rejectWith(...) }\\n\\t\\t\\t\\tdeferred[tuple[0]] = function () {\\n\\t\\t\\t\\t\\tdeferred[tuple[0] + \\\"With\\\"](this === deferred ? undefined : this, arguments);\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t// deferred.notifyWith = list.fireWith\\n\\t\\t\\t\\t// deferred.resolveWith = list.fireWith\\n\\t\\t\\t\\t// deferred.rejectWith = list.fireWith\\n\\t\\t\\t\\tdeferred[tuple[0] + \\\"With\\\"] = list.fireWith;\\n\\t\\t\\t});\\n\\n\\t\\t\\t// Make the deferred a promise\\n\\t\\t\\t_promise.promise(deferred);\\n\\n\\t\\t\\t// Call given func if any\\n\\t\\t\\tif (func) {\\n\\t\\t\\t\\tfunc.call(deferred, deferred);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// All done!\\n\\t\\t\\treturn deferred;\\n\\t\\t},\\n\\n\\t\\t// Deferred helper\\n\\t\\twhen: function when(singleValue) {\\n\\t\\t\\tvar\\n\\n\\t\\t\\t// count of uncompleted subordinates\\n\\t\\t\\tremaining = arguments.length,\\n\\n\\n\\t\\t\\t// count of unprocessed arguments\\n\\t\\t\\ti = remaining,\\n\\n\\n\\t\\t\\t// subordinate fulfillment data\\n\\t\\t\\tresolveContexts = Array(i),\\n\\t\\t\\t    resolveValues = _slice.call(arguments),\\n\\n\\n\\t\\t\\t// the master Deferred\\n\\t\\t\\tmaster = jQuery.Deferred(),\\n\\n\\n\\t\\t\\t// subordinate callback factory\\n\\t\\t\\tupdateFunc = function updateFunc(i) {\\n\\t\\t\\t\\treturn function (value) {\\n\\t\\t\\t\\t\\tresolveContexts[i] = this;\\n\\t\\t\\t\\t\\tresolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;\\n\\t\\t\\t\\t\\tif (! --remaining) {\\n\\t\\t\\t\\t\\t\\tmaster.resolveWith(resolveContexts, resolveValues);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t};\\n\\t\\t\\t};\\n\\n\\t\\t\\t// Single- and empty arguments are adopted like Promise.resolve\\n\\t\\t\\tif (remaining <= 1) {\\n\\t\\t\\t\\tadoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);\\n\\n\\t\\t\\t\\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\\n\\t\\t\\t\\tif (master.state() === \\\"pending\\\" || isFunction(resolveValues[i] && resolveValues[i].then)) {\\n\\n\\t\\t\\t\\t\\treturn master.then();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Multiple arguments are aggregated like Promise.all array elements\\n\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\tadoptValue(resolveValues[i], updateFunc(i), master.reject);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn master.promise();\\n\\t\\t}\\n\\t});\\n\\n\\t// These usually indicate a programmer mistake during development,\\n\\t// warn about them ASAP rather than swallowing them by default.\\n\\tvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\\n\\n\\tjQuery.Deferred.exceptionHook = function (error, stack) {\\n\\n\\t\\t// Support: IE 8 - 9 only\\n\\t\\t// Console exists when dev tools are open, which can happen at any time\\n\\t\\tif (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\\n\\t\\t\\twindow.console.warn(\\\"jQuery.Deferred exception: \\\" + error.message, error.stack, stack);\\n\\t\\t}\\n\\t};\\n\\n\\tjQuery.readyException = function (error) {\\n\\t\\twindow.setTimeout(function () {\\n\\t\\t\\tthrow error;\\n\\t\\t});\\n\\t};\\n\\n\\t// The deferred used on DOM ready\\n\\tvar readyList = jQuery.Deferred();\\n\\n\\tjQuery.fn.ready = function (fn) {\\n\\n\\t\\treadyList.then(fn)\\n\\n\\t\\t// Wrap jQuery.readyException in a function so that the lookup\\n\\t\\t// happens at the time of error handling instead of callback\\n\\t\\t// registration.\\n\\t\\t.catch(function (error) {\\n\\t\\t\\tjQuery.readyException(error);\\n\\t\\t});\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\tjQuery.extend({\\n\\n\\t\\t// Is the DOM ready to be used? Set to true once it occurs.\\n\\t\\tisReady: false,\\n\\n\\t\\t// A counter to track how many items to wait for before\\n\\t\\t// the ready event fires. See #6781\\n\\t\\treadyWait: 1,\\n\\n\\t\\t// Handle when the DOM is ready\\n\\t\\tready: function ready(wait) {\\n\\n\\t\\t\\t// Abort if there are pending holds or we're already ready\\n\\t\\t\\tif (wait === true ? --jQuery.readyWait : jQuery.isReady) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Remember that the DOM is ready\\n\\t\\t\\tjQuery.isReady = true;\\n\\n\\t\\t\\t// If a normal DOM Ready event fired, decrement, and wait if need be\\n\\t\\t\\tif (wait !== true && --jQuery.readyWait > 0) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If there are functions bound, to execute\\n\\t\\t\\treadyList.resolveWith(document, [jQuery]);\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.ready.then = readyList.then;\\n\\n\\t// The ready event handler and self cleanup method\\n\\tfunction completed() {\\n\\t\\tdocument.removeEventListener(\\\"DOMContentLoaded\\\", completed);\\n\\t\\twindow.removeEventListener(\\\"load\\\", completed);\\n\\t\\tjQuery.ready();\\n\\t}\\n\\n\\t// Catch cases where $(document).ready() is called\\n\\t// after the browser event has already occurred.\\n\\t// Support: IE <=9 - 10 only\\n\\t// Older IE sometimes signals \\\"interactive\\\" too soon\\n\\tif (document.readyState === \\\"complete\\\" || document.readyState !== \\\"loading\\\" && !document.documentElement.doScroll) {\\n\\n\\t\\t// Handle it asynchronously to allow scripts the opportunity to delay ready\\n\\t\\twindow.setTimeout(jQuery.ready);\\n\\t} else {\\n\\n\\t\\t// Use the handy event callback\\n\\t\\tdocument.addEventListener(\\\"DOMContentLoaded\\\", completed);\\n\\n\\t\\t// A fallback to window.onload, that will always work\\n\\t\\twindow.addEventListener(\\\"load\\\", completed);\\n\\t}\\n\\n\\t// Multifunctional method to get and set values of a collection\\n\\t// The value/s can optionally be executed if it's a function\\n\\tvar access = function access(elems, fn, key, value, chainable, emptyGet, raw) {\\n\\t\\tvar i = 0,\\n\\t\\t    len = elems.length,\\n\\t\\t    bulk = key == null;\\n\\n\\t\\t// Sets many values\\n\\t\\tif (toType(key) === \\\"object\\\") {\\n\\t\\t\\tchainable = true;\\n\\t\\t\\tfor (i in key) {\\n\\t\\t\\t\\taccess(elems, fn, i, key[i], true, emptyGet, raw);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Sets one value\\n\\t\\t} else if (value !== undefined) {\\n\\t\\t\\tchainable = true;\\n\\n\\t\\t\\tif (!isFunction(value)) {\\n\\t\\t\\t\\traw = true;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (bulk) {\\n\\n\\t\\t\\t\\t// Bulk operations run against the entire set\\n\\t\\t\\t\\tif (raw) {\\n\\t\\t\\t\\t\\tfn.call(elems, value);\\n\\t\\t\\t\\t\\tfn = null;\\n\\n\\t\\t\\t\\t\\t// ...except when executing function values\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tbulk = fn;\\n\\t\\t\\t\\t\\tfn = function fn(elem, key, value) {\\n\\t\\t\\t\\t\\t\\treturn bulk.call(jQuery(elem), value);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (fn) {\\n\\t\\t\\t\\tfor (; i < len; i++) {\\n\\t\\t\\t\\t\\tfn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (chainable) {\\n\\t\\t\\treturn elems;\\n\\t\\t}\\n\\n\\t\\t// Gets\\n\\t\\tif (bulk) {\\n\\t\\t\\treturn fn.call(elems);\\n\\t\\t}\\n\\n\\t\\treturn len ? fn(elems[0], key) : emptyGet;\\n\\t};\\n\\n\\t// Matches dashed string for camelizing\\n\\tvar rmsPrefix = /^-ms-/,\\n\\t    rdashAlpha = /-([a-z])/g;\\n\\n\\t// Used by camelCase as callback to replace()\\n\\tfunction fcamelCase(all, letter) {\\n\\t\\treturn letter.toUpperCase();\\n\\t}\\n\\n\\t// Convert dashed to camelCase; used by the css and data modules\\n\\t// Support: IE <=9 - 11, Edge 12 - 15\\n\\t// Microsoft forgot to hump their vendor prefix (#9572)\\n\\tfunction camelCase(string) {\\n\\t\\treturn string.replace(rmsPrefix, \\\"ms-\\\").replace(rdashAlpha, fcamelCase);\\n\\t}\\n\\tvar acceptData = function acceptData(owner) {\\n\\n\\t\\t// Accepts only:\\n\\t\\t//  - Node\\n\\t\\t//    - Node.ELEMENT_NODE\\n\\t\\t//    - Node.DOCUMENT_NODE\\n\\t\\t//  - Object\\n\\t\\t//    - Any\\n\\t\\treturn owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\\n\\t};\\n\\n\\tfunction Data() {\\n\\t\\tthis.expando = jQuery.expando + Data.uid++;\\n\\t}\\n\\n\\tData.uid = 1;\\n\\n\\tData.prototype = {\\n\\n\\t\\tcache: function cache(owner) {\\n\\n\\t\\t\\t// Check if the owner object already has a cache\\n\\t\\t\\tvar value = owner[this.expando];\\n\\n\\t\\t\\t// If not, create one\\n\\t\\t\\tif (!value) {\\n\\t\\t\\t\\tvalue = {};\\n\\n\\t\\t\\t\\t// We can accept data for non-element nodes in modern browsers,\\n\\t\\t\\t\\t// but we should not, see #8335.\\n\\t\\t\\t\\t// Always return an empty object.\\n\\t\\t\\t\\tif (acceptData(owner)) {\\n\\n\\t\\t\\t\\t\\t// If it is a node unlikely to be stringify-ed or looped over\\n\\t\\t\\t\\t\\t// use plain assignment\\n\\t\\t\\t\\t\\tif (owner.nodeType) {\\n\\t\\t\\t\\t\\t\\towner[this.expando] = value;\\n\\n\\t\\t\\t\\t\\t\\t// Otherwise secure it in a non-enumerable property\\n\\t\\t\\t\\t\\t\\t// configurable must be true to allow the property to be\\n\\t\\t\\t\\t\\t\\t// deleted when data is removed\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tObject.defineProperty(owner, this.expando, {\\n\\t\\t\\t\\t\\t\\t\\tvalue: value,\\n\\t\\t\\t\\t\\t\\t\\tconfigurable: true\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn value;\\n\\t\\t},\\n\\t\\tset: function set(owner, data, value) {\\n\\t\\t\\tvar prop,\\n\\t\\t\\t    cache = this.cache(owner);\\n\\n\\t\\t\\t// Handle: [ owner, key, value ] args\\n\\t\\t\\t// Always use camelCase key (gh-2257)\\n\\t\\t\\tif (typeof data === \\\"string\\\") {\\n\\t\\t\\t\\tcache[camelCase(data)] = value;\\n\\n\\t\\t\\t\\t// Handle: [ owner, { properties } ] args\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// Copy the properties one-by-one to the cache object\\n\\t\\t\\t\\tfor (prop in data) {\\n\\t\\t\\t\\t\\tcache[camelCase(prop)] = data[prop];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn cache;\\n\\t\\t},\\n\\t\\tget: function get(owner, key) {\\n\\t\\t\\treturn key === undefined ? this.cache(owner) :\\n\\n\\t\\t\\t// Always use camelCase key (gh-2257)\\n\\t\\t\\towner[this.expando] && owner[this.expando][camelCase(key)];\\n\\t\\t},\\n\\t\\taccess: function access(owner, key, value) {\\n\\n\\t\\t\\t// In cases where either:\\n\\t\\t\\t//\\n\\t\\t\\t//   1. No key was specified\\n\\t\\t\\t//   2. A string key was specified, but no value provided\\n\\t\\t\\t//\\n\\t\\t\\t// Take the \\\"read\\\" path and allow the get method to determine\\n\\t\\t\\t// which value to return, respectively either:\\n\\t\\t\\t//\\n\\t\\t\\t//   1. The entire cache object\\n\\t\\t\\t//   2. The data stored at the key\\n\\t\\t\\t//\\n\\t\\t\\tif (key === undefined || key && typeof key === \\\"string\\\" && value === undefined) {\\n\\n\\t\\t\\t\\treturn this.get(owner, key);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// When the key is not a string, or both a key and value\\n\\t\\t\\t// are specified, set or extend (existing objects) with either:\\n\\t\\t\\t//\\n\\t\\t\\t//   1. An object of properties\\n\\t\\t\\t//   2. A key and value\\n\\t\\t\\t//\\n\\t\\t\\tthis.set(owner, key, value);\\n\\n\\t\\t\\t// Since the \\\"set\\\" path can have two possible entry points\\n\\t\\t\\t// return the expected data based on which path was taken[*]\\n\\t\\t\\treturn value !== undefined ? value : key;\\n\\t\\t},\\n\\t\\tremove: function remove(owner, key) {\\n\\t\\t\\tvar i,\\n\\t\\t\\t    cache = owner[this.expando];\\n\\n\\t\\t\\tif (cache === undefined) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (key !== undefined) {\\n\\n\\t\\t\\t\\t// Support array or space separated string of keys\\n\\t\\t\\t\\tif (Array.isArray(key)) {\\n\\n\\t\\t\\t\\t\\t// If key is an array of keys...\\n\\t\\t\\t\\t\\t// We always set camelCase keys, so remove that.\\n\\t\\t\\t\\t\\tkey = key.map(camelCase);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tkey = camelCase(key);\\n\\n\\t\\t\\t\\t\\t// If a key with the spaces exists, use it.\\n\\t\\t\\t\\t\\t// Otherwise, create an array by matching non-whitespace\\n\\t\\t\\t\\t\\tkey = key in cache ? [key] : key.match(rnothtmlwhite) || [];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ti = key.length;\\n\\n\\t\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\t\\tdelete cache[key[i]];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Remove the expando if there's no more data\\n\\t\\t\\tif (key === undefined || jQuery.isEmptyObject(cache)) {\\n\\n\\t\\t\\t\\t// Support: Chrome <=35 - 45\\n\\t\\t\\t\\t// Webkit & Blink performance suffers when deleting properties\\n\\t\\t\\t\\t// from DOM nodes, so set to undefined instead\\n\\t\\t\\t\\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\\n\\t\\t\\t\\tif (owner.nodeType) {\\n\\t\\t\\t\\t\\towner[this.expando] = undefined;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tdelete owner[this.expando];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\thasData: function hasData(owner) {\\n\\t\\t\\tvar cache = owner[this.expando];\\n\\t\\t\\treturn cache !== undefined && !jQuery.isEmptyObject(cache);\\n\\t\\t}\\n\\t};\\n\\tvar dataPriv = new Data();\\n\\n\\tvar dataUser = new Data();\\n\\n\\t//\\tImplementation Summary\\n\\t//\\n\\t//\\t1. Enforce API surface and semantic compatibility with 1.9.x branch\\n\\t//\\t2. Improve the module's maintainability by reducing the storage\\n\\t//\\t\\tpaths to a single mechanism.\\n\\t//\\t3. Use the same single mechanism to support \\\"private\\\" and \\\"user\\\" data.\\n\\t//\\t4. _Never_ expose \\\"private\\\" data to user code (TODO: Drop _data, _removeData)\\n\\t//\\t5. Avoid exposing implementation details on user objects (eg. expando properties)\\n\\t//\\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\\n\\n\\tvar rbrace = /^(?:\\\\{[\\\\w\\\\W]*\\\\}|\\\\[[\\\\w\\\\W]*\\\\])$/,\\n\\t    rmultiDash = /[A-Z]/g;\\n\\n\\tfunction getData(data) {\\n\\t\\tif (data === \\\"true\\\") {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tif (data === \\\"false\\\") {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif (data === \\\"null\\\") {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\t// Only convert to a number if it doesn't change the string\\n\\t\\tif (data === +data + \\\"\\\") {\\n\\t\\t\\treturn +data;\\n\\t\\t}\\n\\n\\t\\tif (rbrace.test(data)) {\\n\\t\\t\\treturn JSON.parse(data);\\n\\t\\t}\\n\\n\\t\\treturn data;\\n\\t}\\n\\n\\tfunction dataAttr(elem, key, data) {\\n\\t\\tvar name;\\n\\n\\t\\t// If nothing was found internally, try to fetch any\\n\\t\\t// data from the HTML5 data-* attribute\\n\\t\\tif (data === undefined && elem.nodeType === 1) {\\n\\t\\t\\tname = \\\"data-\\\" + key.replace(rmultiDash, \\\"-$&\\\").toLowerCase();\\n\\t\\t\\tdata = elem.getAttribute(name);\\n\\n\\t\\t\\tif (typeof data === \\\"string\\\") {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tdata = getData(data);\\n\\t\\t\\t\\t} catch (e) {}\\n\\n\\t\\t\\t\\t// Make sure we set the data so it isn't changed later\\n\\t\\t\\t\\tdataUser.set(elem, key, data);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdata = undefined;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn data;\\n\\t}\\n\\n\\tjQuery.extend({\\n\\t\\thasData: function hasData(elem) {\\n\\t\\t\\treturn dataUser.hasData(elem) || dataPriv.hasData(elem);\\n\\t\\t},\\n\\n\\t\\tdata: function data(elem, name, _data) {\\n\\t\\t\\treturn dataUser.access(elem, name, _data);\\n\\t\\t},\\n\\n\\t\\tremoveData: function removeData(elem, name) {\\n\\t\\t\\tdataUser.remove(elem, name);\\n\\t\\t},\\n\\n\\t\\t// TODO: Now that all calls to _data and _removeData have been replaced\\n\\t\\t// with direct calls to dataPriv methods, these can be deprecated.\\n\\t\\t_data: function _data(elem, name, data) {\\n\\t\\t\\treturn dataPriv.access(elem, name, data);\\n\\t\\t},\\n\\n\\t\\t_removeData: function _removeData(elem, name) {\\n\\t\\t\\tdataPriv.remove(elem, name);\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.fn.extend({\\n\\t\\tdata: function data(key, value) {\\n\\t\\t\\tvar i,\\n\\t\\t\\t    name,\\n\\t\\t\\t    data,\\n\\t\\t\\t    elem = this[0],\\n\\t\\t\\t    attrs = elem && elem.attributes;\\n\\n\\t\\t\\t// Gets all values\\n\\t\\t\\tif (key === undefined) {\\n\\t\\t\\t\\tif (this.length) {\\n\\t\\t\\t\\t\\tdata = dataUser.get(elem);\\n\\n\\t\\t\\t\\t\\tif (elem.nodeType === 1 && !dataPriv.get(elem, \\\"hasDataAttrs\\\")) {\\n\\t\\t\\t\\t\\t\\ti = attrs.length;\\n\\t\\t\\t\\t\\t\\twhile (i--) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Support: IE 11 only\\n\\t\\t\\t\\t\\t\\t\\t// The attrs elements can be null (#14894)\\n\\t\\t\\t\\t\\t\\t\\tif (attrs[i]) {\\n\\t\\t\\t\\t\\t\\t\\t\\tname = attrs[i].name;\\n\\t\\t\\t\\t\\t\\t\\t\\tif (name.indexOf(\\\"data-\\\") === 0) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tname = camelCase(name.slice(5));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdataAttr(elem, name, data[name]);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tdataPriv.set(elem, \\\"hasDataAttrs\\\", true);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn data;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Sets multiple values\\n\\t\\t\\tif ((typeof key === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(key)) === \\\"object\\\") {\\n\\t\\t\\t\\treturn this.each(function () {\\n\\t\\t\\t\\t\\tdataUser.set(this, key);\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn access(this, function (value) {\\n\\t\\t\\t\\tvar data;\\n\\n\\t\\t\\t\\t// The calling jQuery object (element matches) is not empty\\n\\t\\t\\t\\t// (and therefore has an element appears at this[ 0 ]) and the\\n\\t\\t\\t\\t// `value` parameter was not undefined. An empty jQuery object\\n\\t\\t\\t\\t// will result in `undefined` for elem = this[ 0 ] which will\\n\\t\\t\\t\\t// throw an exception if an attempt to read a data cache is made.\\n\\t\\t\\t\\tif (elem && value === undefined) {\\n\\n\\t\\t\\t\\t\\t// Attempt to get data from the cache\\n\\t\\t\\t\\t\\t// The key will always be camelCased in Data\\n\\t\\t\\t\\t\\tdata = dataUser.get(elem, key);\\n\\t\\t\\t\\t\\tif (data !== undefined) {\\n\\t\\t\\t\\t\\t\\treturn data;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Attempt to \\\"discover\\\" the data in\\n\\t\\t\\t\\t\\t// HTML5 custom data-* attrs\\n\\t\\t\\t\\t\\tdata = dataAttr(elem, key);\\n\\t\\t\\t\\t\\tif (data !== undefined) {\\n\\t\\t\\t\\t\\t\\treturn data;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// We tried really hard, but the data doesn't exist.\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Set the data...\\n\\t\\t\\t\\tthis.each(function () {\\n\\n\\t\\t\\t\\t\\t// We always store the camelCased key\\n\\t\\t\\t\\t\\tdataUser.set(this, key, value);\\n\\t\\t\\t\\t});\\n\\t\\t\\t}, null, value, arguments.length > 1, null, true);\\n\\t\\t},\\n\\n\\t\\tremoveData: function removeData(key) {\\n\\t\\t\\treturn this.each(function () {\\n\\t\\t\\t\\tdataUser.remove(this, key);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.extend({\\n\\t\\tqueue: function queue(elem, type, data) {\\n\\t\\t\\tvar queue;\\n\\n\\t\\t\\tif (elem) {\\n\\t\\t\\t\\ttype = (type || \\\"fx\\\") + \\\"queue\\\";\\n\\t\\t\\t\\tqueue = dataPriv.get(elem, type);\\n\\n\\t\\t\\t\\t// Speed up dequeue by getting out quickly if this is just a lookup\\n\\t\\t\\t\\tif (data) {\\n\\t\\t\\t\\t\\tif (!queue || Array.isArray(data)) {\\n\\t\\t\\t\\t\\t\\tqueue = dataPriv.access(elem, type, jQuery.makeArray(data));\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tqueue.push(data);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn queue || [];\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tdequeue: function dequeue(elem, type) {\\n\\t\\t\\ttype = type || \\\"fx\\\";\\n\\n\\t\\t\\tvar queue = jQuery.queue(elem, type),\\n\\t\\t\\t    startLength = queue.length,\\n\\t\\t\\t    fn = queue.shift(),\\n\\t\\t\\t    hooks = jQuery._queueHooks(elem, type),\\n\\t\\t\\t    next = function next() {\\n\\t\\t\\t\\tjQuery.dequeue(elem, type);\\n\\t\\t\\t};\\n\\n\\t\\t\\t// If the fx queue is dequeued, always remove the progress sentinel\\n\\t\\t\\tif (fn === \\\"inprogress\\\") {\\n\\t\\t\\t\\tfn = queue.shift();\\n\\t\\t\\t\\tstartLength--;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (fn) {\\n\\n\\t\\t\\t\\t// Add a progress sentinel to prevent the fx queue from being\\n\\t\\t\\t\\t// automatically dequeued\\n\\t\\t\\t\\tif (type === \\\"fx\\\") {\\n\\t\\t\\t\\t\\tqueue.unshift(\\\"inprogress\\\");\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Clear up the last queue stop function\\n\\t\\t\\t\\tdelete hooks.stop;\\n\\t\\t\\t\\tfn.call(elem, next, hooks);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!startLength && hooks) {\\n\\t\\t\\t\\thooks.empty.fire();\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\t// Not public - generate a queueHooks object, or return the current one\\n\\t\\t_queueHooks: function _queueHooks(elem, type) {\\n\\t\\t\\tvar key = type + \\\"queueHooks\\\";\\n\\t\\t\\treturn dataPriv.get(elem, key) || dataPriv.access(elem, key, {\\n\\t\\t\\t\\tempty: jQuery.Callbacks(\\\"once memory\\\").add(function () {\\n\\t\\t\\t\\t\\tdataPriv.remove(elem, [type + \\\"queue\\\", key]);\\n\\t\\t\\t\\t})\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.fn.extend({\\n\\t\\tqueue: function queue(type, data) {\\n\\t\\t\\tvar setter = 2;\\n\\n\\t\\t\\tif (typeof type !== \\\"string\\\") {\\n\\t\\t\\t\\tdata = type;\\n\\t\\t\\t\\ttype = \\\"fx\\\";\\n\\t\\t\\t\\tsetter--;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (arguments.length < setter) {\\n\\t\\t\\t\\treturn jQuery.queue(this[0], type);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn data === undefined ? this : this.each(function () {\\n\\t\\t\\t\\tvar queue = jQuery.queue(this, type, data);\\n\\n\\t\\t\\t\\t// Ensure a hooks for this queue\\n\\t\\t\\t\\tjQuery._queueHooks(this, type);\\n\\n\\t\\t\\t\\tif (type === \\\"fx\\\" && queue[0] !== \\\"inprogress\\\") {\\n\\t\\t\\t\\t\\tjQuery.dequeue(this, type);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t},\\n\\t\\tdequeue: function dequeue(type) {\\n\\t\\t\\treturn this.each(function () {\\n\\t\\t\\t\\tjQuery.dequeue(this, type);\\n\\t\\t\\t});\\n\\t\\t},\\n\\t\\tclearQueue: function clearQueue(type) {\\n\\t\\t\\treturn this.queue(type || \\\"fx\\\", []);\\n\\t\\t},\\n\\n\\t\\t// Get a promise resolved when queues of a certain type\\n\\t\\t// are emptied (fx is the type by default)\\n\\t\\tpromise: function promise(type, obj) {\\n\\t\\t\\tvar tmp,\\n\\t\\t\\t    count = 1,\\n\\t\\t\\t    defer = jQuery.Deferred(),\\n\\t\\t\\t    elements = this,\\n\\t\\t\\t    i = this.length,\\n\\t\\t\\t    resolve = function resolve() {\\n\\t\\t\\t\\tif (! --count) {\\n\\t\\t\\t\\t\\tdefer.resolveWith(elements, [elements]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\t\\t\\tif (typeof type !== \\\"string\\\") {\\n\\t\\t\\t\\tobj = type;\\n\\t\\t\\t\\ttype = undefined;\\n\\t\\t\\t}\\n\\t\\t\\ttype = type || \\\"fx\\\";\\n\\n\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\ttmp = dataPriv.get(elements[i], type + \\\"queueHooks\\\");\\n\\t\\t\\t\\tif (tmp && tmp.empty) {\\n\\t\\t\\t\\t\\tcount++;\\n\\t\\t\\t\\t\\ttmp.empty.add(resolve);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tresolve();\\n\\t\\t\\treturn defer.promise(obj);\\n\\t\\t}\\n\\t});\\n\\tvar pnum = /[+-]?(?:\\\\d*\\\\.|)\\\\d+(?:[eE][+-]?\\\\d+|)/.source;\\n\\n\\tvar rcssNum = new RegExp(\\\"^(?:([+-])=|)(\\\" + pnum + \\\")([a-z%]*)$\\\", \\\"i\\\");\\n\\n\\tvar cssExpand = [\\\"Top\\\", \\\"Right\\\", \\\"Bottom\\\", \\\"Left\\\"];\\n\\n\\tvar isHiddenWithinTree = function isHiddenWithinTree(elem, el) {\\n\\n\\t\\t// isHiddenWithinTree might be called from jQuery#filter function;\\n\\t\\t// in that case, element will be second argument\\n\\t\\telem = el || elem;\\n\\n\\t\\t// Inline style trumps all\\n\\t\\treturn elem.style.display === \\\"none\\\" || elem.style.display === \\\"\\\" &&\\n\\n\\t\\t// Otherwise, check computed style\\n\\t\\t// Support: Firefox <=43 - 45\\n\\t\\t// Disconnected elements can have computed display: none, so first confirm that elem is\\n\\t\\t// in the document.\\n\\t\\tjQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, \\\"display\\\") === \\\"none\\\";\\n\\t};\\n\\n\\tvar swap = function swap(elem, options, callback, args) {\\n\\t\\tvar ret,\\n\\t\\t    name,\\n\\t\\t    old = {};\\n\\n\\t\\t// Remember the old values, and insert the new ones\\n\\t\\tfor (name in options) {\\n\\t\\t\\told[name] = elem.style[name];\\n\\t\\t\\telem.style[name] = options[name];\\n\\t\\t}\\n\\n\\t\\tret = callback.apply(elem, args || []);\\n\\n\\t\\t// Revert the old values\\n\\t\\tfor (name in options) {\\n\\t\\t\\telem.style[name] = old[name];\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t};\\n\\n\\tfunction adjustCSS(elem, prop, valueParts, tween) {\\n\\t\\tvar adjusted,\\n\\t\\t    scale,\\n\\t\\t    maxIterations = 20,\\n\\t\\t    currentValue = tween ? function () {\\n\\t\\t\\treturn tween.cur();\\n\\t\\t} : function () {\\n\\t\\t\\treturn jQuery.css(elem, prop, \\\"\\\");\\n\\t\\t},\\n\\t\\t    initial = currentValue(),\\n\\t\\t    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? \\\"\\\" : \\\"px\\\"),\\n\\n\\n\\t\\t// Starting value computation is required for potential unit mismatches\\n\\t\\tinitialInUnit = (jQuery.cssNumber[prop] || unit !== \\\"px\\\" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\\n\\n\\t\\tif (initialInUnit && initialInUnit[3] !== unit) {\\n\\n\\t\\t\\t// Support: Firefox <=54\\n\\t\\t\\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\\n\\t\\t\\tinitial = initial / 2;\\n\\n\\t\\t\\t// Trust units reported by jQuery.css\\n\\t\\t\\tunit = unit || initialInUnit[3];\\n\\n\\t\\t\\t// Iteratively approximate from a nonzero starting point\\n\\t\\t\\tinitialInUnit = +initial || 1;\\n\\n\\t\\t\\twhile (maxIterations--) {\\n\\n\\t\\t\\t\\t// Evaluate and update our best guess (doubling guesses that zero out).\\n\\t\\t\\t\\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\\n\\t\\t\\t\\tjQuery.style(elem, prop, initialInUnit + unit);\\n\\t\\t\\t\\tif ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {\\n\\t\\t\\t\\t\\tmaxIterations = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tinitialInUnit = initialInUnit / scale;\\n\\t\\t\\t}\\n\\n\\t\\t\\tinitialInUnit = initialInUnit * 2;\\n\\t\\t\\tjQuery.style(elem, prop, initialInUnit + unit);\\n\\n\\t\\t\\t// Make sure we update the tween properties later on\\n\\t\\t\\tvalueParts = valueParts || [];\\n\\t\\t}\\n\\n\\t\\tif (valueParts) {\\n\\t\\t\\tinitialInUnit = +initialInUnit || +initial || 0;\\n\\n\\t\\t\\t// Apply relative offset (+=/-=) if specified\\n\\t\\t\\tadjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\\n\\t\\t\\tif (tween) {\\n\\t\\t\\t\\ttween.unit = unit;\\n\\t\\t\\t\\ttween.start = initialInUnit;\\n\\t\\t\\t\\ttween.end = adjusted;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn adjusted;\\n\\t}\\n\\n\\tvar defaultDisplayMap = {};\\n\\n\\tfunction getDefaultDisplay(elem) {\\n\\t\\tvar temp,\\n\\t\\t    doc = elem.ownerDocument,\\n\\t\\t    nodeName = elem.nodeName,\\n\\t\\t    display = defaultDisplayMap[nodeName];\\n\\n\\t\\tif (display) {\\n\\t\\t\\treturn display;\\n\\t\\t}\\n\\n\\t\\ttemp = doc.body.appendChild(doc.createElement(nodeName));\\n\\t\\tdisplay = jQuery.css(temp, \\\"display\\\");\\n\\n\\t\\ttemp.parentNode.removeChild(temp);\\n\\n\\t\\tif (display === \\\"none\\\") {\\n\\t\\t\\tdisplay = \\\"block\\\";\\n\\t\\t}\\n\\t\\tdefaultDisplayMap[nodeName] = display;\\n\\n\\t\\treturn display;\\n\\t}\\n\\n\\tfunction showHide(elements, show) {\\n\\t\\tvar display,\\n\\t\\t    elem,\\n\\t\\t    values = [],\\n\\t\\t    index = 0,\\n\\t\\t    length = elements.length;\\n\\n\\t\\t// Determine new display value for elements that need to change\\n\\t\\tfor (; index < length; index++) {\\n\\t\\t\\telem = elements[index];\\n\\t\\t\\tif (!elem.style) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tdisplay = elem.style.display;\\n\\t\\t\\tif (show) {\\n\\n\\t\\t\\t\\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\\n\\t\\t\\t\\t// check is required in this first loop unless we have a nonempty display value (either\\n\\t\\t\\t\\t// inline or about-to-be-restored)\\n\\t\\t\\t\\tif (display === \\\"none\\\") {\\n\\t\\t\\t\\t\\tvalues[index] = dataPriv.get(elem, \\\"display\\\") || null;\\n\\t\\t\\t\\t\\tif (!values[index]) {\\n\\t\\t\\t\\t\\t\\telem.style.display = \\\"\\\";\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (elem.style.display === \\\"\\\" && isHiddenWithinTree(elem)) {\\n\\t\\t\\t\\t\\tvalues[index] = getDefaultDisplay(elem);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (display !== \\\"none\\\") {\\n\\t\\t\\t\\t\\tvalues[index] = \\\"none\\\";\\n\\n\\t\\t\\t\\t\\t// Remember what we're overwriting\\n\\t\\t\\t\\t\\tdataPriv.set(elem, \\\"display\\\", display);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Set the display of the elements in a second loop to avoid constant reflow\\n\\t\\tfor (index = 0; index < length; index++) {\\n\\t\\t\\tif (values[index] != null) {\\n\\t\\t\\t\\telements[index].style.display = values[index];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn elements;\\n\\t}\\n\\n\\tjQuery.fn.extend({\\n\\t\\tshow: function show() {\\n\\t\\t\\treturn showHide(this, true);\\n\\t\\t},\\n\\t\\thide: function hide() {\\n\\t\\t\\treturn showHide(this);\\n\\t\\t},\\n\\t\\ttoggle: function toggle(state) {\\n\\t\\t\\tif (typeof state === \\\"boolean\\\") {\\n\\t\\t\\t\\treturn state ? this.show() : this.hide();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.each(function () {\\n\\t\\t\\t\\tif (isHiddenWithinTree(this)) {\\n\\t\\t\\t\\t\\tjQuery(this).show();\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tjQuery(this).hide();\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\tvar rcheckableType = /^(?:checkbox|radio)$/i;\\n\\n\\tvar rtagName = /<([a-z][^\\\\/\\\\0>\\\\x20\\\\t\\\\r\\\\n\\\\f]+)/i;\\n\\n\\tvar rscriptType = /^$|^module$|\\\\/(?:java|ecma)script/i;\\n\\n\\t// We have to close these tags to support XHTML (#13200)\\n\\tvar wrapMap = {\\n\\n\\t\\t// Support: IE <=9 only\\n\\t\\toption: [1, \\\"<select multiple='multiple'>\\\", \\\"</select>\\\"],\\n\\n\\t\\t// XHTML parsers do not magically insert elements in the\\n\\t\\t// same way that tag soup parsers do. So we cannot shorten\\n\\t\\t// this by omitting <tbody> or other required elements.\\n\\t\\tthead: [1, \\\"<table>\\\", \\\"</table>\\\"],\\n\\t\\tcol: [2, \\\"<table><colgroup>\\\", \\\"</colgroup></table>\\\"],\\n\\t\\ttr: [2, \\\"<table><tbody>\\\", \\\"</tbody></table>\\\"],\\n\\t\\ttd: [3, \\\"<table><tbody><tr>\\\", \\\"</tr></tbody></table>\\\"],\\n\\n\\t\\t_default: [0, \\\"\\\", \\\"\\\"]\\n\\t};\\n\\n\\t// Support: IE <=9 only\\n\\twrapMap.optgroup = wrapMap.option;\\n\\n\\twrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\\n\\twrapMap.th = wrapMap.td;\\n\\n\\tfunction getAll(context, tag) {\\n\\n\\t\\t// Support: IE <=9 - 11 only\\n\\t\\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\\n\\t\\tvar ret;\\n\\n\\t\\tif (typeof context.getElementsByTagName !== \\\"undefined\\\") {\\n\\t\\t\\tret = context.getElementsByTagName(tag || \\\"*\\\");\\n\\t\\t} else if (typeof context.querySelectorAll !== \\\"undefined\\\") {\\n\\t\\t\\tret = context.querySelectorAll(tag || \\\"*\\\");\\n\\t\\t} else {\\n\\t\\t\\tret = [];\\n\\t\\t}\\n\\n\\t\\tif (tag === undefined || tag && nodeName(context, tag)) {\\n\\t\\t\\treturn jQuery.merge([context], ret);\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n\\t// Mark scripts as having already been evaluated\\n\\tfunction setGlobalEval(elems, refElements) {\\n\\t\\tvar i = 0,\\n\\t\\t    l = elems.length;\\n\\n\\t\\tfor (; i < l; i++) {\\n\\t\\t\\tdataPriv.set(elems[i], \\\"globalEval\\\", !refElements || dataPriv.get(refElements[i], \\\"globalEval\\\"));\\n\\t\\t}\\n\\t}\\n\\n\\tvar rhtml = /<|&#?\\\\w+;/;\\n\\n\\tfunction buildFragment(elems, context, scripts, selection, ignored) {\\n\\t\\tvar elem,\\n\\t\\t    tmp,\\n\\t\\t    tag,\\n\\t\\t    wrap,\\n\\t\\t    contains,\\n\\t\\t    j,\\n\\t\\t    fragment = context.createDocumentFragment(),\\n\\t\\t    nodes = [],\\n\\t\\t    i = 0,\\n\\t\\t    l = elems.length;\\n\\n\\t\\tfor (; i < l; i++) {\\n\\t\\t\\telem = elems[i];\\n\\n\\t\\t\\tif (elem || elem === 0) {\\n\\n\\t\\t\\t\\t// Add nodes directly\\n\\t\\t\\t\\tif (toType(elem) === \\\"object\\\") {\\n\\n\\t\\t\\t\\t\\t// Support: Android <=4.0 only, PhantomJS 1 only\\n\\t\\t\\t\\t\\t// push.apply(_, arraylike) throws on ancient WebKit\\n\\t\\t\\t\\t\\tjQuery.merge(nodes, elem.nodeType ? [elem] : elem);\\n\\n\\t\\t\\t\\t\\t// Convert non-html into a text node\\n\\t\\t\\t\\t} else if (!rhtml.test(elem)) {\\n\\t\\t\\t\\t\\tnodes.push(context.createTextNode(elem));\\n\\n\\t\\t\\t\\t\\t// Convert html into DOM nodes\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttmp = tmp || fragment.appendChild(context.createElement(\\\"div\\\"));\\n\\n\\t\\t\\t\\t\\t// Deserialize a standard representation\\n\\t\\t\\t\\t\\ttag = (rtagName.exec(elem) || [\\\"\\\", \\\"\\\"])[1].toLowerCase();\\n\\t\\t\\t\\t\\twrap = wrapMap[tag] || wrapMap._default;\\n\\t\\t\\t\\t\\ttmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];\\n\\n\\t\\t\\t\\t\\t// Descend through wrappers to the right content\\n\\t\\t\\t\\t\\tj = wrap[0];\\n\\t\\t\\t\\t\\twhile (j--) {\\n\\t\\t\\t\\t\\t\\ttmp = tmp.lastChild;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Support: Android <=4.0 only, PhantomJS 1 only\\n\\t\\t\\t\\t\\t// push.apply(_, arraylike) throws on ancient WebKit\\n\\t\\t\\t\\t\\tjQuery.merge(nodes, tmp.childNodes);\\n\\n\\t\\t\\t\\t\\t// Remember the top-level container\\n\\t\\t\\t\\t\\ttmp = fragment.firstChild;\\n\\n\\t\\t\\t\\t\\t// Ensure the created nodes are orphaned (#12392)\\n\\t\\t\\t\\t\\ttmp.textContent = \\\"\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Remove wrapper from fragment\\n\\t\\tfragment.textContent = \\\"\\\";\\n\\n\\t\\ti = 0;\\n\\t\\twhile (elem = nodes[i++]) {\\n\\n\\t\\t\\t// Skip elements already in the context collection (trac-4087)\\n\\t\\t\\tif (selection && jQuery.inArray(elem, selection) > -1) {\\n\\t\\t\\t\\tif (ignored) {\\n\\t\\t\\t\\t\\tignored.push(elem);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tcontains = jQuery.contains(elem.ownerDocument, elem);\\n\\n\\t\\t\\t// Append to fragment\\n\\t\\t\\ttmp = getAll(fragment.appendChild(elem), \\\"script\\\");\\n\\n\\t\\t\\t// Preserve script evaluation history\\n\\t\\t\\tif (contains) {\\n\\t\\t\\t\\tsetGlobalEval(tmp);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Capture executables\\n\\t\\t\\tif (scripts) {\\n\\t\\t\\t\\tj = 0;\\n\\t\\t\\t\\twhile (elem = tmp[j++]) {\\n\\t\\t\\t\\t\\tif (rscriptType.test(elem.type || \\\"\\\")) {\\n\\t\\t\\t\\t\\t\\tscripts.push(elem);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn fragment;\\n\\t}\\n\\n\\t(function () {\\n\\t\\tvar fragment = document.createDocumentFragment(),\\n\\t\\t    div = fragment.appendChild(document.createElement(\\\"div\\\")),\\n\\t\\t    input = document.createElement(\\\"input\\\");\\n\\n\\t\\t// Support: Android 4.0 - 4.3 only\\n\\t\\t// Check state lost if the name is set (#11217)\\n\\t\\t// Support: Windows Web Apps (WWA)\\n\\t\\t// `name` and `type` must use .setAttribute for WWA (#14901)\\n\\t\\tinput.setAttribute(\\\"type\\\", \\\"radio\\\");\\n\\t\\tinput.setAttribute(\\\"checked\\\", \\\"checked\\\");\\n\\t\\tinput.setAttribute(\\\"name\\\", \\\"t\\\");\\n\\n\\t\\tdiv.appendChild(input);\\n\\n\\t\\t// Support: Android <=4.1 only\\n\\t\\t// Older WebKit doesn't clone checked state correctly in fragments\\n\\t\\tsupport.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;\\n\\n\\t\\t// Support: IE <=11 only\\n\\t\\t// Make sure textarea (and checkbox) defaultValue is properly cloned\\n\\t\\tdiv.innerHTML = \\\"<textarea>x</textarea>\\\";\\n\\t\\tsupport.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;\\n\\t})();\\n\\tvar documentElement = document.documentElement;\\n\\n\\tvar rkeyEvent = /^key/,\\n\\t    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\\n\\t    rtypenamespace = /^([^.]*)(?:\\\\.(.+)|)/;\\n\\n\\tfunction returnTrue() {\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction returnFalse() {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// Support: IE <=9 only\\n\\t// See #13393 for more info\\n\\tfunction safeActiveElement() {\\n\\t\\ttry {\\n\\t\\t\\treturn document.activeElement;\\n\\t\\t} catch (err) {}\\n\\t}\\n\\n\\tfunction _on(elem, types, selector, data, fn, one) {\\n\\t\\tvar origFn, type;\\n\\n\\t\\t// Types can be a map of types/handlers\\n\\t\\tif ((typeof types === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(types)) === \\\"object\\\") {\\n\\n\\t\\t\\t// ( types-Object, selector, data )\\n\\t\\t\\tif (typeof selector !== \\\"string\\\") {\\n\\n\\t\\t\\t\\t// ( types-Object, data )\\n\\t\\t\\t\\tdata = data || selector;\\n\\t\\t\\t\\tselector = undefined;\\n\\t\\t\\t}\\n\\t\\t\\tfor (type in types) {\\n\\t\\t\\t\\t_on(elem, type, selector, data, types[type], one);\\n\\t\\t\\t}\\n\\t\\t\\treturn elem;\\n\\t\\t}\\n\\n\\t\\tif (data == null && fn == null) {\\n\\n\\t\\t\\t// ( types, fn )\\n\\t\\t\\tfn = selector;\\n\\t\\t\\tdata = selector = undefined;\\n\\t\\t} else if (fn == null) {\\n\\t\\t\\tif (typeof selector === \\\"string\\\") {\\n\\n\\t\\t\\t\\t// ( types, selector, fn )\\n\\t\\t\\t\\tfn = data;\\n\\t\\t\\t\\tdata = undefined;\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// ( types, data, fn )\\n\\t\\t\\t\\tfn = data;\\n\\t\\t\\t\\tdata = selector;\\n\\t\\t\\t\\tselector = undefined;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (fn === false) {\\n\\t\\t\\tfn = returnFalse;\\n\\t\\t} else if (!fn) {\\n\\t\\t\\treturn elem;\\n\\t\\t}\\n\\n\\t\\tif (one === 1) {\\n\\t\\t\\torigFn = fn;\\n\\t\\t\\tfn = function fn(event) {\\n\\n\\t\\t\\t\\t// Can use an empty set, since event contains the info\\n\\t\\t\\t\\tjQuery().off(event);\\n\\t\\t\\t\\treturn origFn.apply(this, arguments);\\n\\t\\t\\t};\\n\\n\\t\\t\\t// Use same guid so caller can remove using origFn\\n\\t\\t\\tfn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\\n\\t\\t}\\n\\t\\treturn elem.each(function () {\\n\\t\\t\\tjQuery.event.add(this, types, fn, data, selector);\\n\\t\\t});\\n\\t}\\n\\n\\t/*\\n  * Helper functions for managing events -- not part of the public interface.\\n  * Props to Dean Edwards' addEvent library for many of the ideas.\\n  */\\n\\tjQuery.event = {\\n\\n\\t\\tglobal: {},\\n\\n\\t\\tadd: function add(elem, types, handler, data, selector) {\\n\\n\\t\\t\\tvar handleObjIn,\\n\\t\\t\\t    eventHandle,\\n\\t\\t\\t    tmp,\\n\\t\\t\\t    events,\\n\\t\\t\\t    t,\\n\\t\\t\\t    handleObj,\\n\\t\\t\\t    special,\\n\\t\\t\\t    handlers,\\n\\t\\t\\t    type,\\n\\t\\t\\t    namespaces,\\n\\t\\t\\t    origType,\\n\\t\\t\\t    elemData = dataPriv.get(elem);\\n\\n\\t\\t\\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\\n\\t\\t\\tif (!elemData) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Caller can pass in an object of custom data in lieu of the handler\\n\\t\\t\\tif (handler.handler) {\\n\\t\\t\\t\\thandleObjIn = handler;\\n\\t\\t\\t\\thandler = handleObjIn.handler;\\n\\t\\t\\t\\tselector = handleObjIn.selector;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Ensure that invalid selectors throw exceptions at attach time\\n\\t\\t\\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\\n\\t\\t\\tif (selector) {\\n\\t\\t\\t\\tjQuery.find.matchesSelector(documentElement, selector);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Make sure that the handler has a unique ID, used to find/remove it later\\n\\t\\t\\tif (!handler.guid) {\\n\\t\\t\\t\\thandler.guid = jQuery.guid++;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Init the element's event structure and main handler, if this is the first\\n\\t\\t\\tif (!(events = elemData.events)) {\\n\\t\\t\\t\\tevents = elemData.events = {};\\n\\t\\t\\t}\\n\\t\\t\\tif (!(eventHandle = elemData.handle)) {\\n\\t\\t\\t\\teventHandle = elemData.handle = function (e) {\\n\\n\\t\\t\\t\\t\\t// Discard the second event of a jQuery.event.trigger() and\\n\\t\\t\\t\\t\\t// when an event is called after a page has unloaded\\n\\t\\t\\t\\t\\treturn typeof jQuery !== \\\"undefined\\\" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Handle multiple events separated by a space\\n\\t\\t\\ttypes = (types || \\\"\\\").match(rnothtmlwhite) || [\\\"\\\"];\\n\\t\\t\\tt = types.length;\\n\\t\\t\\twhile (t--) {\\n\\t\\t\\t\\ttmp = rtypenamespace.exec(types[t]) || [];\\n\\t\\t\\t\\ttype = origType = tmp[1];\\n\\t\\t\\t\\tnamespaces = (tmp[2] || \\\"\\\").split(\\\".\\\").sort();\\n\\n\\t\\t\\t\\t// There *must* be a type, no attaching namespace-only handlers\\n\\t\\t\\t\\tif (!type) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// If event changes its type, use the special event handlers for the changed type\\n\\t\\t\\t\\tspecial = jQuery.event.special[type] || {};\\n\\n\\t\\t\\t\\t// If selector defined, determine special event api type, otherwise given type\\n\\t\\t\\t\\ttype = (selector ? special.delegateType : special.bindType) || type;\\n\\n\\t\\t\\t\\t// Update special based on newly reset type\\n\\t\\t\\t\\tspecial = jQuery.event.special[type] || {};\\n\\n\\t\\t\\t\\t// handleObj is passed to all event handlers\\n\\t\\t\\t\\thandleObj = jQuery.extend({\\n\\t\\t\\t\\t\\ttype: type,\\n\\t\\t\\t\\t\\torigType: origType,\\n\\t\\t\\t\\t\\tdata: data,\\n\\t\\t\\t\\t\\thandler: handler,\\n\\t\\t\\t\\t\\tguid: handler.guid,\\n\\t\\t\\t\\t\\tselector: selector,\\n\\t\\t\\t\\t\\tneedsContext: selector && jQuery.expr.match.needsContext.test(selector),\\n\\t\\t\\t\\t\\tnamespace: namespaces.join(\\\".\\\")\\n\\t\\t\\t\\t}, handleObjIn);\\n\\n\\t\\t\\t\\t// Init the event handler queue if we're the first\\n\\t\\t\\t\\tif (!(handlers = events[type])) {\\n\\t\\t\\t\\t\\thandlers = events[type] = [];\\n\\t\\t\\t\\t\\thandlers.delegateCount = 0;\\n\\n\\t\\t\\t\\t\\t// Only use addEventListener if the special events handler returns false\\n\\t\\t\\t\\t\\tif (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\\n\\n\\t\\t\\t\\t\\t\\tif (elem.addEventListener) {\\n\\t\\t\\t\\t\\t\\t\\telem.addEventListener(type, eventHandle);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (special.add) {\\n\\t\\t\\t\\t\\tspecial.add.call(elem, handleObj);\\n\\n\\t\\t\\t\\t\\tif (!handleObj.handler.guid) {\\n\\t\\t\\t\\t\\t\\thandleObj.handler.guid = handler.guid;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Add to the element's handler list, delegates in front\\n\\t\\t\\t\\tif (selector) {\\n\\t\\t\\t\\t\\thandlers.splice(handlers.delegateCount++, 0, handleObj);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\thandlers.push(handleObj);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Keep track of which events have ever been used, for event optimization\\n\\t\\t\\t\\tjQuery.event.global[type] = true;\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\t// Detach an event or set of events from an element\\n\\t\\tremove: function remove(elem, types, handler, selector, mappedTypes) {\\n\\n\\t\\t\\tvar j,\\n\\t\\t\\t    origCount,\\n\\t\\t\\t    tmp,\\n\\t\\t\\t    events,\\n\\t\\t\\t    t,\\n\\t\\t\\t    handleObj,\\n\\t\\t\\t    special,\\n\\t\\t\\t    handlers,\\n\\t\\t\\t    type,\\n\\t\\t\\t    namespaces,\\n\\t\\t\\t    origType,\\n\\t\\t\\t    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);\\n\\n\\t\\t\\tif (!elemData || !(events = elemData.events)) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Once for each type.namespace in types; type may be omitted\\n\\t\\t\\ttypes = (types || \\\"\\\").match(rnothtmlwhite) || [\\\"\\\"];\\n\\t\\t\\tt = types.length;\\n\\t\\t\\twhile (t--) {\\n\\t\\t\\t\\ttmp = rtypenamespace.exec(types[t]) || [];\\n\\t\\t\\t\\ttype = origType = tmp[1];\\n\\t\\t\\t\\tnamespaces = (tmp[2] || \\\"\\\").split(\\\".\\\").sort();\\n\\n\\t\\t\\t\\t// Unbind all events (on this namespace, if provided) for the element\\n\\t\\t\\t\\tif (!type) {\\n\\t\\t\\t\\t\\tfor (type in events) {\\n\\t\\t\\t\\t\\t\\tjQuery.event.remove(elem, type + types[t], handler, selector, true);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tspecial = jQuery.event.special[type] || {};\\n\\t\\t\\t\\ttype = (selector ? special.delegateType : special.bindType) || type;\\n\\t\\t\\t\\thandlers = events[type] || [];\\n\\t\\t\\t\\ttmp = tmp[2] && new RegExp(\\\"(^|\\\\\\\\.)\\\" + namespaces.join(\\\"\\\\\\\\.(?:.*\\\\\\\\.|)\\\") + \\\"(\\\\\\\\.|$)\\\");\\n\\n\\t\\t\\t\\t// Remove matching events\\n\\t\\t\\t\\torigCount = j = handlers.length;\\n\\t\\t\\t\\twhile (j--) {\\n\\t\\t\\t\\t\\thandleObj = handlers[j];\\n\\n\\t\\t\\t\\t\\tif ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \\\"**\\\" && handleObj.selector)) {\\n\\t\\t\\t\\t\\t\\thandlers.splice(j, 1);\\n\\n\\t\\t\\t\\t\\t\\tif (handleObj.selector) {\\n\\t\\t\\t\\t\\t\\t\\thandlers.delegateCount--;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (special.remove) {\\n\\t\\t\\t\\t\\t\\t\\tspecial.remove.call(elem, handleObj);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Remove generic event handler if we removed something and no more handlers exist\\n\\t\\t\\t\\t// (avoids potential for endless recursion during removal of special event handlers)\\n\\t\\t\\t\\tif (origCount && !handlers.length) {\\n\\t\\t\\t\\t\\tif (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\\n\\n\\t\\t\\t\\t\\t\\tjQuery.removeEvent(elem, type, elemData.handle);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tdelete events[type];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Remove data and the expando if it's no longer used\\n\\t\\t\\tif (jQuery.isEmptyObject(events)) {\\n\\t\\t\\t\\tdataPriv.remove(elem, \\\"handle events\\\");\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tdispatch: function dispatch(nativeEvent) {\\n\\n\\t\\t\\t// Make a writable jQuery.Event from the native event object\\n\\t\\t\\tvar event = jQuery.event.fix(nativeEvent);\\n\\n\\t\\t\\tvar i,\\n\\t\\t\\t    j,\\n\\t\\t\\t    ret,\\n\\t\\t\\t    matched,\\n\\t\\t\\t    handleObj,\\n\\t\\t\\t    handlerQueue,\\n\\t\\t\\t    args = new Array(arguments.length),\\n\\t\\t\\t    handlers = (dataPriv.get(this, \\\"events\\\") || {})[event.type] || [],\\n\\t\\t\\t    special = jQuery.event.special[event.type] || {};\\n\\n\\t\\t\\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\\n\\t\\t\\targs[0] = event;\\n\\n\\t\\t\\tfor (i = 1; i < arguments.length; i++) {\\n\\t\\t\\t\\targs[i] = arguments[i];\\n\\t\\t\\t}\\n\\n\\t\\t\\tevent.delegateTarget = this;\\n\\n\\t\\t\\t// Call the preDispatch hook for the mapped type, and let it bail if desired\\n\\t\\t\\tif (special.preDispatch && special.preDispatch.call(this, event) === false) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Determine handlers\\n\\t\\t\\thandlerQueue = jQuery.event.handlers.call(this, event, handlers);\\n\\n\\t\\t\\t// Run delegates first; they may want to stop propagation beneath us\\n\\t\\t\\ti = 0;\\n\\t\\t\\twhile ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\\n\\t\\t\\t\\tevent.currentTarget = matched.elem;\\n\\n\\t\\t\\t\\tj = 0;\\n\\t\\t\\t\\twhile ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\\n\\n\\t\\t\\t\\t\\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\\n\\t\\t\\t\\t\\t// a subset or equal to those in the bound event (both can have no namespace).\\n\\t\\t\\t\\t\\tif (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {\\n\\n\\t\\t\\t\\t\\t\\tevent.handleObj = handleObj;\\n\\t\\t\\t\\t\\t\\tevent.data = handleObj.data;\\n\\n\\t\\t\\t\\t\\t\\tret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\\n\\n\\t\\t\\t\\t\\t\\tif (ret !== undefined) {\\n\\t\\t\\t\\t\\t\\t\\tif ((event.result = ret) === false) {\\n\\t\\t\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t\\t\\t\\tevent.stopPropagation();\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Call the postDispatch hook for the mapped type\\n\\t\\t\\tif (special.postDispatch) {\\n\\t\\t\\t\\tspecial.postDispatch.call(this, event);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn event.result;\\n\\t\\t},\\n\\n\\t\\thandlers: function handlers(event, _handlers) {\\n\\t\\t\\tvar i,\\n\\t\\t\\t    handleObj,\\n\\t\\t\\t    sel,\\n\\t\\t\\t    matchedHandlers,\\n\\t\\t\\t    matchedSelectors,\\n\\t\\t\\t    handlerQueue = [],\\n\\t\\t\\t    delegateCount = _handlers.delegateCount,\\n\\t\\t\\t    cur = event.target;\\n\\n\\t\\t\\t// Find delegate handlers\\n\\t\\t\\tif (delegateCount &&\\n\\n\\t\\t\\t// Support: IE <=9\\n\\t\\t\\t// Black-hole SVG <use> instance trees (trac-13180)\\n\\t\\t\\tcur.nodeType &&\\n\\n\\t\\t\\t// Support: Firefox <=42\\n\\t\\t\\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\\n\\t\\t\\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\\n\\t\\t\\t// Support: IE 11 only\\n\\t\\t\\t// ...but not arrow key \\\"clicks\\\" of radio inputs, which can have `button` -1 (gh-2343)\\n\\t\\t\\t!(event.type === \\\"click\\\" && event.button >= 1)) {\\n\\n\\t\\t\\t\\tfor (; cur !== this; cur = cur.parentNode || this) {\\n\\n\\t\\t\\t\\t\\t// Don't check non-elements (#13208)\\n\\t\\t\\t\\t\\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\\n\\t\\t\\t\\t\\tif (cur.nodeType === 1 && !(event.type === \\\"click\\\" && cur.disabled === true)) {\\n\\t\\t\\t\\t\\t\\tmatchedHandlers = [];\\n\\t\\t\\t\\t\\t\\tmatchedSelectors = {};\\n\\t\\t\\t\\t\\t\\tfor (i = 0; i < delegateCount; i++) {\\n\\t\\t\\t\\t\\t\\t\\thandleObj = _handlers[i];\\n\\n\\t\\t\\t\\t\\t\\t\\t// Don't conflict with Object.prototype properties (#13203)\\n\\t\\t\\t\\t\\t\\t\\tsel = handleObj.selector + \\\" \\\";\\n\\n\\t\\t\\t\\t\\t\\t\\tif (matchedSelectors[sel] === undefined) {\\n\\t\\t\\t\\t\\t\\t\\t\\tmatchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tif (matchedSelectors[sel]) {\\n\\t\\t\\t\\t\\t\\t\\t\\tmatchedHandlers.push(handleObj);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (matchedHandlers.length) {\\n\\t\\t\\t\\t\\t\\t\\thandlerQueue.push({ elem: cur, handlers: matchedHandlers });\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Add the remaining (directly-bound) handlers\\n\\t\\t\\tcur = this;\\n\\t\\t\\tif (delegateCount < _handlers.length) {\\n\\t\\t\\t\\thandlerQueue.push({ elem: cur, handlers: _handlers.slice(delegateCount) });\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn handlerQueue;\\n\\t\\t},\\n\\n\\t\\taddProp: function addProp(name, hook) {\\n\\t\\t\\tObject.defineProperty(jQuery.Event.prototype, name, {\\n\\t\\t\\t\\tenumerable: true,\\n\\t\\t\\t\\tconfigurable: true,\\n\\n\\t\\t\\t\\tget: isFunction(hook) ? function () {\\n\\t\\t\\t\\t\\tif (this.originalEvent) {\\n\\t\\t\\t\\t\\t\\treturn hook(this.originalEvent);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} : function () {\\n\\t\\t\\t\\t\\tif (this.originalEvent) {\\n\\t\\t\\t\\t\\t\\treturn this.originalEvent[name];\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tset: function set(value) {\\n\\t\\t\\t\\t\\tObject.defineProperty(this, name, {\\n\\t\\t\\t\\t\\t\\tenumerable: true,\\n\\t\\t\\t\\t\\t\\tconfigurable: true,\\n\\t\\t\\t\\t\\t\\twritable: true,\\n\\t\\t\\t\\t\\t\\tvalue: value\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t},\\n\\n\\t\\tfix: function fix(originalEvent) {\\n\\t\\t\\treturn originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);\\n\\t\\t},\\n\\n\\t\\tspecial: {\\n\\t\\t\\tload: {\\n\\n\\t\\t\\t\\t// Prevent triggered image.load events from bubbling to window.load\\n\\t\\t\\t\\tnoBubble: true\\n\\t\\t\\t},\\n\\t\\t\\tfocus: {\\n\\n\\t\\t\\t\\t// Fire native event if possible so blur/focus sequence is correct\\n\\t\\t\\t\\ttrigger: function trigger() {\\n\\t\\t\\t\\t\\tif (this !== safeActiveElement() && this.focus) {\\n\\t\\t\\t\\t\\t\\tthis.focus();\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tdelegateType: \\\"focusin\\\"\\n\\t\\t\\t},\\n\\t\\t\\tblur: {\\n\\t\\t\\t\\ttrigger: function trigger() {\\n\\t\\t\\t\\t\\tif (this === safeActiveElement() && this.blur) {\\n\\t\\t\\t\\t\\t\\tthis.blur();\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tdelegateType: \\\"focusout\\\"\\n\\t\\t\\t},\\n\\t\\t\\tclick: {\\n\\n\\t\\t\\t\\t// For checkbox, fire native event so checked state will be right\\n\\t\\t\\t\\ttrigger: function trigger() {\\n\\t\\t\\t\\t\\tif (this.type === \\\"checkbox\\\" && this.click && nodeName(this, \\\"input\\\")) {\\n\\t\\t\\t\\t\\t\\tthis.click();\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// For cross-browser consistency, don't fire native .click() on links\\n\\t\\t\\t\\t_default: function _default(event) {\\n\\t\\t\\t\\t\\treturn nodeName(event.target, \\\"a\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\n\\t\\t\\tbeforeunload: {\\n\\t\\t\\t\\tpostDispatch: function postDispatch(event) {\\n\\n\\t\\t\\t\\t\\t// Support: Firefox 20+\\n\\t\\t\\t\\t\\t// Firefox doesn't alert if the returnValue field is not set.\\n\\t\\t\\t\\t\\tif (event.result !== undefined && event.originalEvent) {\\n\\t\\t\\t\\t\\t\\tevent.originalEvent.returnValue = event.result;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\n\\tjQuery.removeEvent = function (elem, type, handle) {\\n\\n\\t\\t// This \\\"if\\\" is needed for plain objects\\n\\t\\tif (elem.removeEventListener) {\\n\\t\\t\\telem.removeEventListener(type, handle);\\n\\t\\t}\\n\\t};\\n\\n\\tjQuery.Event = function (src, props) {\\n\\n\\t\\t// Allow instantiation without the 'new' keyword\\n\\t\\tif (!(this instanceof jQuery.Event)) {\\n\\t\\t\\treturn new jQuery.Event(src, props);\\n\\t\\t}\\n\\n\\t\\t// Event object\\n\\t\\tif (src && src.type) {\\n\\t\\t\\tthis.originalEvent = src;\\n\\t\\t\\tthis.type = src.type;\\n\\n\\t\\t\\t// Events bubbling up the document may have been marked as prevented\\n\\t\\t\\t// by a handler lower down the tree; reflect the correct value.\\n\\t\\t\\tthis.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&\\n\\n\\t\\t\\t// Support: Android <=2.3 only\\n\\t\\t\\tsrc.returnValue === false ? returnTrue : returnFalse;\\n\\n\\t\\t\\t// Create target properties\\n\\t\\t\\t// Support: Safari <=6 - 7 only\\n\\t\\t\\t// Target should not be a text node (#504, #13143)\\n\\t\\t\\tthis.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;\\n\\n\\t\\t\\tthis.currentTarget = src.currentTarget;\\n\\t\\t\\tthis.relatedTarget = src.relatedTarget;\\n\\n\\t\\t\\t// Event type\\n\\t\\t} else {\\n\\t\\t\\tthis.type = src;\\n\\t\\t}\\n\\n\\t\\t// Put explicitly provided properties onto the event object\\n\\t\\tif (props) {\\n\\t\\t\\tjQuery.extend(this, props);\\n\\t\\t}\\n\\n\\t\\t// Create a timestamp if incoming event doesn't have one\\n\\t\\tthis.timeStamp = src && src.timeStamp || Date.now();\\n\\n\\t\\t// Mark it as fixed\\n\\t\\tthis[jQuery.expando] = true;\\n\\t};\\n\\n\\t// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\\n\\t// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\\n\\tjQuery.Event.prototype = {\\n\\t\\tconstructor: jQuery.Event,\\n\\t\\tisDefaultPrevented: returnFalse,\\n\\t\\tisPropagationStopped: returnFalse,\\n\\t\\tisImmediatePropagationStopped: returnFalse,\\n\\t\\tisSimulated: false,\\n\\n\\t\\tpreventDefault: function preventDefault() {\\n\\t\\t\\tvar e = this.originalEvent;\\n\\n\\t\\t\\tthis.isDefaultPrevented = returnTrue;\\n\\n\\t\\t\\tif (e && !this.isSimulated) {\\n\\t\\t\\t\\te.preventDefault();\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tstopPropagation: function stopPropagation() {\\n\\t\\t\\tvar e = this.originalEvent;\\n\\n\\t\\t\\tthis.isPropagationStopped = returnTrue;\\n\\n\\t\\t\\tif (e && !this.isSimulated) {\\n\\t\\t\\t\\te.stopPropagation();\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tstopImmediatePropagation: function stopImmediatePropagation() {\\n\\t\\t\\tvar e = this.originalEvent;\\n\\n\\t\\t\\tthis.isImmediatePropagationStopped = returnTrue;\\n\\n\\t\\t\\tif (e && !this.isSimulated) {\\n\\t\\t\\t\\te.stopImmediatePropagation();\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.stopPropagation();\\n\\t\\t}\\n\\t};\\n\\n\\t// Includes all common event props including KeyEvent and MouseEvent specific props\\n\\tjQuery.each({\\n\\t\\taltKey: true,\\n\\t\\tbubbles: true,\\n\\t\\tcancelable: true,\\n\\t\\tchangedTouches: true,\\n\\t\\tctrlKey: true,\\n\\t\\tdetail: true,\\n\\t\\teventPhase: true,\\n\\t\\tmetaKey: true,\\n\\t\\tpageX: true,\\n\\t\\tpageY: true,\\n\\t\\tshiftKey: true,\\n\\t\\tview: true,\\n\\t\\t\\\"char\\\": true,\\n\\t\\tcharCode: true,\\n\\t\\tkey: true,\\n\\t\\tkeyCode: true,\\n\\t\\tbutton: true,\\n\\t\\tbuttons: true,\\n\\t\\tclientX: true,\\n\\t\\tclientY: true,\\n\\t\\toffsetX: true,\\n\\t\\toffsetY: true,\\n\\t\\tpointerId: true,\\n\\t\\tpointerType: true,\\n\\t\\tscreenX: true,\\n\\t\\tscreenY: true,\\n\\t\\ttargetTouches: true,\\n\\t\\ttoElement: true,\\n\\t\\ttouches: true,\\n\\n\\t\\twhich: function which(event) {\\n\\t\\t\\tvar button = event.button;\\n\\n\\t\\t\\t// Add which for key events\\n\\t\\t\\tif (event.which == null && rkeyEvent.test(event.type)) {\\n\\t\\t\\t\\treturn event.charCode != null ? event.charCode : event.keyCode;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Add which for click: 1 === left; 2 === middle; 3 === right\\n\\t\\t\\tif (!event.which && button !== undefined && rmouseEvent.test(event.type)) {\\n\\t\\t\\t\\tif (button & 1) {\\n\\t\\t\\t\\t\\treturn 1;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (button & 2) {\\n\\t\\t\\t\\t\\treturn 3;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (button & 4) {\\n\\t\\t\\t\\t\\treturn 2;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn event.which;\\n\\t\\t}\\n\\t}, jQuery.event.addProp);\\n\\n\\t// Create mouseenter/leave events using mouseover/out and event-time checks\\n\\t// so that event delegation works in jQuery.\\n\\t// Do the same for pointerenter/pointerleave and pointerover/pointerout\\n\\t//\\n\\t// Support: Safari 7 only\\n\\t// Safari sends mouseenter too often; see:\\n\\t// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\\n\\t// for the description of the bug (it existed in older Chrome versions as well).\\n\\tjQuery.each({\\n\\t\\tmouseenter: \\\"mouseover\\\",\\n\\t\\tmouseleave: \\\"mouseout\\\",\\n\\t\\tpointerenter: \\\"pointerover\\\",\\n\\t\\tpointerleave: \\\"pointerout\\\"\\n\\t}, function (orig, fix) {\\n\\t\\tjQuery.event.special[orig] = {\\n\\t\\t\\tdelegateType: fix,\\n\\t\\t\\tbindType: fix,\\n\\n\\t\\t\\thandle: function handle(event) {\\n\\t\\t\\t\\tvar ret,\\n\\t\\t\\t\\t    target = this,\\n\\t\\t\\t\\t    related = event.relatedTarget,\\n\\t\\t\\t\\t    handleObj = event.handleObj;\\n\\n\\t\\t\\t\\t// For mouseenter/leave call the handler if related is outside the target.\\n\\t\\t\\t\\t// NB: No relatedTarget if the mouse left/entered the browser window\\n\\t\\t\\t\\tif (!related || related !== target && !jQuery.contains(target, related)) {\\n\\t\\t\\t\\t\\tevent.type = handleObj.origType;\\n\\t\\t\\t\\t\\tret = handleObj.handler.apply(this, arguments);\\n\\t\\t\\t\\t\\tevent.type = fix;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn ret;\\n\\t\\t\\t}\\n\\t\\t};\\n\\t});\\n\\n\\tjQuery.fn.extend({\\n\\n\\t\\ton: function on(types, selector, data, fn) {\\n\\t\\t\\treturn _on(this, types, selector, data, fn);\\n\\t\\t},\\n\\t\\tone: function one(types, selector, data, fn) {\\n\\t\\t\\treturn _on(this, types, selector, data, fn, 1);\\n\\t\\t},\\n\\t\\toff: function off(types, selector, fn) {\\n\\t\\t\\tvar handleObj, type;\\n\\t\\t\\tif (types && types.preventDefault && types.handleObj) {\\n\\n\\t\\t\\t\\t// ( event )  dispatched jQuery.Event\\n\\t\\t\\t\\thandleObj = types.handleObj;\\n\\t\\t\\t\\tjQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \\\".\\\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\t\\t\\tif ((typeof types === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(types)) === \\\"object\\\") {\\n\\n\\t\\t\\t\\t// ( types-object [, selector] )\\n\\t\\t\\t\\tfor (type in types) {\\n\\t\\t\\t\\t\\tthis.off(type, selector, types[type]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\t\\t\\tif (selector === false || typeof selector === \\\"function\\\") {\\n\\n\\t\\t\\t\\t// ( types [, fn] )\\n\\t\\t\\t\\tfn = selector;\\n\\t\\t\\t\\tselector = undefined;\\n\\t\\t\\t}\\n\\t\\t\\tif (fn === false) {\\n\\t\\t\\t\\tfn = returnFalse;\\n\\t\\t\\t}\\n\\t\\t\\treturn this.each(function () {\\n\\t\\t\\t\\tjQuery.event.remove(this, types, fn, selector);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\n\\tvar\\n\\n\\t/* eslint-disable max-len */\\n\\n\\t// See https://github.com/eslint/eslint/issues/3229\\n\\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\\\/\\\\0>\\\\x20\\\\t\\\\r\\\\n\\\\f]*)[^>]*)\\\\/>/gi,\\n\\n\\n\\t/* eslint-enable */\\n\\n\\t// Support: IE <=10 - 11, Edge 12 - 13 only\\n\\t// In IE/Edge using regex groups here causes severe slowdowns.\\n\\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\\n\\trnoInnerhtml = /<script|<style|<link/i,\\n\\n\\n\\t// checked=\\\"checked\\\" or checked\\n\\trchecked = /checked\\\\s*(?:[^=]|=\\\\s*.checked.)/i,\\n\\t    rcleanScript = /^\\\\s*<!(?:\\\\[CDATA\\\\[|--)|(?:\\\\]\\\\]|--)>\\\\s*$/g;\\n\\n\\t// Prefer a tbody over its parent table for containing new rows\\n\\tfunction manipulationTarget(elem, content) {\\n\\t\\tif (nodeName(elem, \\\"table\\\") && nodeName(content.nodeType !== 11 ? content : content.firstChild, \\\"tr\\\")) {\\n\\n\\t\\t\\treturn jQuery(elem).children(\\\"tbody\\\")[0] || elem;\\n\\t\\t}\\n\\n\\t\\treturn elem;\\n\\t}\\n\\n\\t// Replace/restore the type attribute of script elements for safe DOM manipulation\\n\\tfunction disableScript(elem) {\\n\\t\\telem.type = (elem.getAttribute(\\\"type\\\") !== null) + \\\"/\\\" + elem.type;\\n\\t\\treturn elem;\\n\\t}\\n\\tfunction restoreScript(elem) {\\n\\t\\tif ((elem.type || \\\"\\\").slice(0, 5) === \\\"true/\\\") {\\n\\t\\t\\telem.type = elem.type.slice(5);\\n\\t\\t} else {\\n\\t\\t\\telem.removeAttribute(\\\"type\\\");\\n\\t\\t}\\n\\n\\t\\treturn elem;\\n\\t}\\n\\n\\tfunction cloneCopyEvent(src, dest) {\\n\\t\\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\\n\\n\\t\\tif (dest.nodeType !== 1) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// 1. Copy private data: events, handlers, etc.\\n\\t\\tif (dataPriv.hasData(src)) {\\n\\t\\t\\tpdataOld = dataPriv.access(src);\\n\\t\\t\\tpdataCur = dataPriv.set(dest, pdataOld);\\n\\t\\t\\tevents = pdataOld.events;\\n\\n\\t\\t\\tif (events) {\\n\\t\\t\\t\\tdelete pdataCur.handle;\\n\\t\\t\\t\\tpdataCur.events = {};\\n\\n\\t\\t\\t\\tfor (type in events) {\\n\\t\\t\\t\\t\\tfor (i = 0, l = events[type].length; i < l; i++) {\\n\\t\\t\\t\\t\\t\\tjQuery.event.add(dest, type, events[type][i]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// 2. Copy user data\\n\\t\\tif (dataUser.hasData(src)) {\\n\\t\\t\\tudataOld = dataUser.access(src);\\n\\t\\t\\tudataCur = jQuery.extend({}, udataOld);\\n\\n\\t\\t\\tdataUser.set(dest, udataCur);\\n\\t\\t}\\n\\t}\\n\\n\\t// Fix IE bugs, see support tests\\n\\tfunction fixInput(src, dest) {\\n\\t\\tvar nodeName = dest.nodeName.toLowerCase();\\n\\n\\t\\t// Fails to persist the checked state of a cloned checkbox or radio button.\\n\\t\\tif (nodeName === \\\"input\\\" && rcheckableType.test(src.type)) {\\n\\t\\t\\tdest.checked = src.checked;\\n\\n\\t\\t\\t// Fails to return the selected option to the default selected state when cloning options\\n\\t\\t} else if (nodeName === \\\"input\\\" || nodeName === \\\"textarea\\\") {\\n\\t\\t\\tdest.defaultValue = src.defaultValue;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction domManip(collection, args, callback, ignored) {\\n\\n\\t\\t// Flatten any nested arrays\\n\\t\\targs = concat.apply([], args);\\n\\n\\t\\tvar fragment,\\n\\t\\t    first,\\n\\t\\t    scripts,\\n\\t\\t    hasScripts,\\n\\t\\t    node,\\n\\t\\t    doc,\\n\\t\\t    i = 0,\\n\\t\\t    l = collection.length,\\n\\t\\t    iNoClone = l - 1,\\n\\t\\t    value = args[0],\\n\\t\\t    valueIsFunction = isFunction(value);\\n\\n\\t\\t// We can't cloneNode fragments that contain checked, in WebKit\\n\\t\\tif (valueIsFunction || l > 1 && typeof value === \\\"string\\\" && !support.checkClone && rchecked.test(value)) {\\n\\t\\t\\treturn collection.each(function (index) {\\n\\t\\t\\t\\tvar self = collection.eq(index);\\n\\t\\t\\t\\tif (valueIsFunction) {\\n\\t\\t\\t\\t\\targs[0] = value.call(this, index, self.html());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdomManip(self, args, callback, ignored);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tif (l) {\\n\\t\\t\\tfragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);\\n\\t\\t\\tfirst = fragment.firstChild;\\n\\n\\t\\t\\tif (fragment.childNodes.length === 1) {\\n\\t\\t\\t\\tfragment = first;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Require either new content or an interest in ignored elements to invoke the callback\\n\\t\\t\\tif (first || ignored) {\\n\\t\\t\\t\\tscripts = jQuery.map(getAll(fragment, \\\"script\\\"), disableScript);\\n\\t\\t\\t\\thasScripts = scripts.length;\\n\\n\\t\\t\\t\\t// Use the original fragment for the last item\\n\\t\\t\\t\\t// instead of the first because it can end up\\n\\t\\t\\t\\t// being emptied incorrectly in certain situations (#8070).\\n\\t\\t\\t\\tfor (; i < l; i++) {\\n\\t\\t\\t\\t\\tnode = fragment;\\n\\n\\t\\t\\t\\t\\tif (i !== iNoClone) {\\n\\t\\t\\t\\t\\t\\tnode = jQuery.clone(node, true, true);\\n\\n\\t\\t\\t\\t\\t\\t// Keep references to cloned scripts for later restoration\\n\\t\\t\\t\\t\\t\\tif (hasScripts) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Support: Android <=4.0 only, PhantomJS 1 only\\n\\t\\t\\t\\t\\t\\t\\t// push.apply(_, arraylike) throws on ancient WebKit\\n\\t\\t\\t\\t\\t\\t\\tjQuery.merge(scripts, getAll(node, \\\"script\\\"));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tcallback.call(collection[i], node, i);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (hasScripts) {\\n\\t\\t\\t\\t\\tdoc = scripts[scripts.length - 1].ownerDocument;\\n\\n\\t\\t\\t\\t\\t// Reenable scripts\\n\\t\\t\\t\\t\\tjQuery.map(scripts, restoreScript);\\n\\n\\t\\t\\t\\t\\t// Evaluate executable scripts on first document insertion\\n\\t\\t\\t\\t\\tfor (i = 0; i < hasScripts; i++) {\\n\\t\\t\\t\\t\\t\\tnode = scripts[i];\\n\\t\\t\\t\\t\\t\\tif (rscriptType.test(node.type || \\\"\\\") && !dataPriv.access(node, \\\"globalEval\\\") && jQuery.contains(doc, node)) {\\n\\n\\t\\t\\t\\t\\t\\t\\tif (node.src && (node.type || \\\"\\\").toLowerCase() !== \\\"module\\\") {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Optional AJAX dependency, but won't run scripts if not present\\n\\t\\t\\t\\t\\t\\t\\t\\tif (jQuery._evalUrl) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tjQuery._evalUrl(node.src);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tDOMEval(node.textContent.replace(rcleanScript, \\\"\\\"), doc, node);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn collection;\\n\\t}\\n\\n\\tfunction _remove(elem, selector, keepData) {\\n\\t\\tvar node,\\n\\t\\t    nodes = selector ? jQuery.filter(selector, elem) : elem,\\n\\t\\t    i = 0;\\n\\n\\t\\tfor (; (node = nodes[i]) != null; i++) {\\n\\t\\t\\tif (!keepData && node.nodeType === 1) {\\n\\t\\t\\t\\tjQuery.cleanData(getAll(node));\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (node.parentNode) {\\n\\t\\t\\t\\tif (keepData && jQuery.contains(node.ownerDocument, node)) {\\n\\t\\t\\t\\t\\tsetGlobalEval(getAll(node, \\\"script\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnode.parentNode.removeChild(node);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn elem;\\n\\t}\\n\\n\\tjQuery.extend({\\n\\t\\thtmlPrefilter: function htmlPrefilter(html) {\\n\\t\\t\\treturn html.replace(rxhtmlTag, \\\"<$1></$2>\\\");\\n\\t\\t},\\n\\n\\t\\tclone: function clone(elem, dataAndEvents, deepDataAndEvents) {\\n\\t\\t\\tvar i,\\n\\t\\t\\t    l,\\n\\t\\t\\t    srcElements,\\n\\t\\t\\t    destElements,\\n\\t\\t\\t    clone = elem.cloneNode(true),\\n\\t\\t\\t    inPage = jQuery.contains(elem.ownerDocument, elem);\\n\\n\\t\\t\\t// Fix IE cloning issues\\n\\t\\t\\tif (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\\n\\n\\t\\t\\t\\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\\n\\t\\t\\t\\tdestElements = getAll(clone);\\n\\t\\t\\t\\tsrcElements = getAll(elem);\\n\\n\\t\\t\\t\\tfor (i = 0, l = srcElements.length; i < l; i++) {\\n\\t\\t\\t\\t\\tfixInput(srcElements[i], destElements[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Copy the events from the original to the clone\\n\\t\\t\\tif (dataAndEvents) {\\n\\t\\t\\t\\tif (deepDataAndEvents) {\\n\\t\\t\\t\\t\\tsrcElements = srcElements || getAll(elem);\\n\\t\\t\\t\\t\\tdestElements = destElements || getAll(clone);\\n\\n\\t\\t\\t\\t\\tfor (i = 0, l = srcElements.length; i < l; i++) {\\n\\t\\t\\t\\t\\t\\tcloneCopyEvent(srcElements[i], destElements[i]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tcloneCopyEvent(elem, clone);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Preserve script evaluation history\\n\\t\\t\\tdestElements = getAll(clone, \\\"script\\\");\\n\\t\\t\\tif (destElements.length > 0) {\\n\\t\\t\\t\\tsetGlobalEval(destElements, !inPage && getAll(elem, \\\"script\\\"));\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Return the cloned set\\n\\t\\t\\treturn clone;\\n\\t\\t},\\n\\n\\t\\tcleanData: function cleanData(elems) {\\n\\t\\t\\tvar data,\\n\\t\\t\\t    elem,\\n\\t\\t\\t    type,\\n\\t\\t\\t    special = jQuery.event.special,\\n\\t\\t\\t    i = 0;\\n\\n\\t\\t\\tfor (; (elem = elems[i]) !== undefined; i++) {\\n\\t\\t\\t\\tif (acceptData(elem)) {\\n\\t\\t\\t\\t\\tif (data = elem[dataPriv.expando]) {\\n\\t\\t\\t\\t\\t\\tif (data.events) {\\n\\t\\t\\t\\t\\t\\t\\tfor (type in data.events) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (special[type]) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tjQuery.event.remove(elem, type);\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// This is a shortcut to avoid jQuery.event.remove's overhead\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tjQuery.removeEvent(elem, type, data.handle);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Support: Chrome <=35 - 45+\\n\\t\\t\\t\\t\\t\\t// Assign undefined instead of using delete, see Data#remove\\n\\t\\t\\t\\t\\t\\telem[dataPriv.expando] = undefined;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif (elem[dataUser.expando]) {\\n\\n\\t\\t\\t\\t\\t\\t// Support: Chrome <=35 - 45+\\n\\t\\t\\t\\t\\t\\t// Assign undefined instead of using delete, see Data#remove\\n\\t\\t\\t\\t\\t\\telem[dataUser.expando] = undefined;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.fn.extend({\\n\\t\\tdetach: function detach(selector) {\\n\\t\\t\\treturn _remove(this, selector, true);\\n\\t\\t},\\n\\n\\t\\tremove: function remove(selector) {\\n\\t\\t\\treturn _remove(this, selector);\\n\\t\\t},\\n\\n\\t\\ttext: function text(value) {\\n\\t\\t\\treturn access(this, function (value) {\\n\\t\\t\\t\\treturn value === undefined ? jQuery.text(this) : this.empty().each(function () {\\n\\t\\t\\t\\t\\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\\n\\t\\t\\t\\t\\t\\tthis.textContent = value;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t}, null, value, arguments.length);\\n\\t\\t},\\n\\n\\t\\tappend: function append() {\\n\\t\\t\\treturn domManip(this, arguments, function (elem) {\\n\\t\\t\\t\\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\\n\\t\\t\\t\\t\\tvar target = manipulationTarget(this, elem);\\n\\t\\t\\t\\t\\ttarget.appendChild(elem);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t},\\n\\n\\t\\tprepend: function prepend() {\\n\\t\\t\\treturn domManip(this, arguments, function (elem) {\\n\\t\\t\\t\\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\\n\\t\\t\\t\\t\\tvar target = manipulationTarget(this, elem);\\n\\t\\t\\t\\t\\ttarget.insertBefore(elem, target.firstChild);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t},\\n\\n\\t\\tbefore: function before() {\\n\\t\\t\\treturn domManip(this, arguments, function (elem) {\\n\\t\\t\\t\\tif (this.parentNode) {\\n\\t\\t\\t\\t\\tthis.parentNode.insertBefore(elem, this);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t},\\n\\n\\t\\tafter: function after() {\\n\\t\\t\\treturn domManip(this, arguments, function (elem) {\\n\\t\\t\\t\\tif (this.parentNode) {\\n\\t\\t\\t\\t\\tthis.parentNode.insertBefore(elem, this.nextSibling);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t},\\n\\n\\t\\tempty: function empty() {\\n\\t\\t\\tvar elem,\\n\\t\\t\\t    i = 0;\\n\\n\\t\\t\\tfor (; (elem = this[i]) != null; i++) {\\n\\t\\t\\t\\tif (elem.nodeType === 1) {\\n\\n\\t\\t\\t\\t\\t// Prevent memory leaks\\n\\t\\t\\t\\t\\tjQuery.cleanData(getAll(elem, false));\\n\\n\\t\\t\\t\\t\\t// Remove any remaining nodes\\n\\t\\t\\t\\t\\telem.textContent = \\\"\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t},\\n\\n\\t\\tclone: function clone(dataAndEvents, deepDataAndEvents) {\\n\\t\\t\\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\\n\\t\\t\\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\\n\\n\\t\\t\\treturn this.map(function () {\\n\\t\\t\\t\\treturn jQuery.clone(this, dataAndEvents, deepDataAndEvents);\\n\\t\\t\\t});\\n\\t\\t},\\n\\n\\t\\thtml: function html(value) {\\n\\t\\t\\treturn access(this, function (value) {\\n\\t\\t\\t\\tvar elem = this[0] || {},\\n\\t\\t\\t\\t    i = 0,\\n\\t\\t\\t\\t    l = this.length;\\n\\n\\t\\t\\t\\tif (value === undefined && elem.nodeType === 1) {\\n\\t\\t\\t\\t\\treturn elem.innerHTML;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// See if we can take a shortcut and just use innerHTML\\n\\t\\t\\t\\tif (typeof value === \\\"string\\\" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [\\\"\\\", \\\"\\\"])[1].toLowerCase()]) {\\n\\n\\t\\t\\t\\t\\tvalue = jQuery.htmlPrefilter(value);\\n\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tfor (; i < l; i++) {\\n\\t\\t\\t\\t\\t\\t\\telem = this[i] || {};\\n\\n\\t\\t\\t\\t\\t\\t\\t// Remove element nodes and prevent memory leaks\\n\\t\\t\\t\\t\\t\\t\\tif (elem.nodeType === 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tjQuery.cleanData(getAll(elem, false));\\n\\t\\t\\t\\t\\t\\t\\t\\telem.innerHTML = value;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\telem = 0;\\n\\n\\t\\t\\t\\t\\t\\t// If using innerHTML throws an exception, use the fallback method\\n\\t\\t\\t\\t\\t} catch (e) {}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (elem) {\\n\\t\\t\\t\\t\\tthis.empty().append(value);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}, null, value, arguments.length);\\n\\t\\t},\\n\\n\\t\\treplaceWith: function replaceWith() {\\n\\t\\t\\tvar ignored = [];\\n\\n\\t\\t\\t// Make the changes, replacing each non-ignored context element with the new content\\n\\t\\t\\treturn domManip(this, arguments, function (elem) {\\n\\t\\t\\t\\tvar parent = this.parentNode;\\n\\n\\t\\t\\t\\tif (jQuery.inArray(this, ignored) < 0) {\\n\\t\\t\\t\\t\\tjQuery.cleanData(getAll(this));\\n\\t\\t\\t\\t\\tif (parent) {\\n\\t\\t\\t\\t\\t\\tparent.replaceChild(elem, this);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Force callback invocation\\n\\t\\t\\t}, ignored);\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.each({\\n\\t\\tappendTo: \\\"append\\\",\\n\\t\\tprependTo: \\\"prepend\\\",\\n\\t\\tinsertBefore: \\\"before\\\",\\n\\t\\tinsertAfter: \\\"after\\\",\\n\\t\\treplaceAll: \\\"replaceWith\\\"\\n\\t}, function (name, original) {\\n\\t\\tjQuery.fn[name] = function (selector) {\\n\\t\\t\\tvar elems,\\n\\t\\t\\t    ret = [],\\n\\t\\t\\t    insert = jQuery(selector),\\n\\t\\t\\t    last = insert.length - 1,\\n\\t\\t\\t    i = 0;\\n\\n\\t\\t\\tfor (; i <= last; i++) {\\n\\t\\t\\t\\telems = i === last ? this : this.clone(true);\\n\\t\\t\\t\\tjQuery(insert[i])[original](elems);\\n\\n\\t\\t\\t\\t// Support: Android <=4.0 only, PhantomJS 1 only\\n\\t\\t\\t\\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\\n\\t\\t\\t\\tpush.apply(ret, elems.get());\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.pushStack(ret);\\n\\t\\t};\\n\\t});\\n\\tvar rnumnonpx = new RegExp(\\\"^(\\\" + pnum + \\\")(?!px)[a-z%]+$\\\", \\\"i\\\");\\n\\n\\tvar getStyles = function getStyles(elem) {\\n\\n\\t\\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\\n\\t\\t// IE throws on elements created in popups\\n\\t\\t// FF meanwhile throws on frame elements through \\\"defaultView.getComputedStyle\\\"\\n\\t\\tvar view = elem.ownerDocument.defaultView;\\n\\n\\t\\tif (!view || !view.opener) {\\n\\t\\t\\tview = window;\\n\\t\\t}\\n\\n\\t\\treturn view.getComputedStyle(elem);\\n\\t};\\n\\n\\tvar rboxStyle = new RegExp(cssExpand.join(\\\"|\\\"), \\\"i\\\");\\n\\n\\t(function () {\\n\\n\\t\\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\\n\\t\\t// so they're executed at the same time to save the second computation.\\n\\t\\tfunction computeStyleTests() {\\n\\n\\t\\t\\t// This is a singleton, we need to execute it only once\\n\\t\\t\\tif (!div) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tcontainer.style.cssText = \\\"position:absolute;left:-11111px;width:60px;\\\" + \\\"margin-top:1px;padding:0;border:0\\\";\\n\\t\\t\\tdiv.style.cssText = \\\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\\\" + \\\"margin:auto;border:1px;padding:1px;\\\" + \\\"width:60%;top:1%\\\";\\n\\t\\t\\tdocumentElement.appendChild(container).appendChild(div);\\n\\n\\t\\t\\tvar divStyle = window.getComputedStyle(div);\\n\\t\\t\\tpixelPositionVal = divStyle.top !== \\\"1%\\\";\\n\\n\\t\\t\\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\\n\\t\\t\\treliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;\\n\\n\\t\\t\\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\\n\\t\\t\\t// Some styles come back with percentage values, even though they shouldn't\\n\\t\\t\\tdiv.style.right = \\\"60%\\\";\\n\\t\\t\\tpixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;\\n\\n\\t\\t\\t// Support: IE 9 - 11 only\\n\\t\\t\\t// Detect misreporting of content dimensions for box-sizing:border-box elements\\n\\t\\t\\tboxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;\\n\\n\\t\\t\\t// Support: IE 9 only\\n\\t\\t\\t// Detect overflow:scroll screwiness (gh-3699)\\n\\t\\t\\tdiv.style.position = \\\"absolute\\\";\\n\\t\\t\\tscrollboxSizeVal = div.offsetWidth === 36 || \\\"absolute\\\";\\n\\n\\t\\t\\tdocumentElement.removeChild(container);\\n\\n\\t\\t\\t// Nullify the div so it wouldn't be stored in the memory and\\n\\t\\t\\t// it will also be a sign that checks already performed\\n\\t\\t\\tdiv = null;\\n\\t\\t}\\n\\n\\t\\tfunction roundPixelMeasures(measure) {\\n\\t\\t\\treturn Math.round(parseFloat(measure));\\n\\t\\t}\\n\\n\\t\\tvar pixelPositionVal,\\n\\t\\t    boxSizingReliableVal,\\n\\t\\t    scrollboxSizeVal,\\n\\t\\t    pixelBoxStylesVal,\\n\\t\\t    reliableMarginLeftVal,\\n\\t\\t    container = document.createElement(\\\"div\\\"),\\n\\t\\t    div = document.createElement(\\\"div\\\");\\n\\n\\t\\t// Finish early in limited (non-browser) environments\\n\\t\\tif (!div.style) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Support: IE <=9 - 11 only\\n\\t\\t// Style of cloned element affects source element cloned (#8908)\\n\\t\\tdiv.style.backgroundClip = \\\"content-box\\\";\\n\\t\\tdiv.cloneNode(true).style.backgroundClip = \\\"\\\";\\n\\t\\tsupport.clearCloneStyle = div.style.backgroundClip === \\\"content-box\\\";\\n\\n\\t\\tjQuery.extend(support, {\\n\\t\\t\\tboxSizingReliable: function boxSizingReliable() {\\n\\t\\t\\t\\tcomputeStyleTests();\\n\\t\\t\\t\\treturn boxSizingReliableVal;\\n\\t\\t\\t},\\n\\t\\t\\tpixelBoxStyles: function pixelBoxStyles() {\\n\\t\\t\\t\\tcomputeStyleTests();\\n\\t\\t\\t\\treturn pixelBoxStylesVal;\\n\\t\\t\\t},\\n\\t\\t\\tpixelPosition: function pixelPosition() {\\n\\t\\t\\t\\tcomputeStyleTests();\\n\\t\\t\\t\\treturn pixelPositionVal;\\n\\t\\t\\t},\\n\\t\\t\\treliableMarginLeft: function reliableMarginLeft() {\\n\\t\\t\\t\\tcomputeStyleTests();\\n\\t\\t\\t\\treturn reliableMarginLeftVal;\\n\\t\\t\\t},\\n\\t\\t\\tscrollboxSize: function scrollboxSize() {\\n\\t\\t\\t\\tcomputeStyleTests();\\n\\t\\t\\t\\treturn scrollboxSizeVal;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t})();\\n\\n\\tfunction curCSS(elem, name, computed) {\\n\\t\\tvar width,\\n\\t\\t    minWidth,\\n\\t\\t    maxWidth,\\n\\t\\t    ret,\\n\\n\\n\\t\\t// Support: Firefox 51+\\n\\t\\t// Retrieving style before computed somehow\\n\\t\\t// fixes an issue with getting wrong values\\n\\t\\t// on detached elements\\n\\t\\tstyle = elem.style;\\n\\n\\t\\tcomputed = computed || getStyles(elem);\\n\\n\\t\\t// getPropertyValue is needed for:\\n\\t\\t//   .css('filter') (IE 9 only, #12537)\\n\\t\\t//   .css('--customProperty) (#3144)\\n\\t\\tif (computed) {\\n\\t\\t\\tret = computed.getPropertyValue(name) || computed[name];\\n\\n\\t\\t\\tif (ret === \\\"\\\" && !jQuery.contains(elem.ownerDocument, elem)) {\\n\\t\\t\\t\\tret = jQuery.style(elem, name);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// A tribute to the \\\"awesome hack by Dean Edwards\\\"\\n\\t\\t\\t// Android Browser returns percentage for some values,\\n\\t\\t\\t// but width seems to be reliably pixels.\\n\\t\\t\\t// This is against the CSSOM draft spec:\\n\\t\\t\\t// https://drafts.csswg.org/cssom/#resolved-values\\n\\t\\t\\tif (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {\\n\\n\\t\\t\\t\\t// Remember the original values\\n\\t\\t\\t\\twidth = style.width;\\n\\t\\t\\t\\tminWidth = style.minWidth;\\n\\t\\t\\t\\tmaxWidth = style.maxWidth;\\n\\n\\t\\t\\t\\t// Put in the new values to get a computed value out\\n\\t\\t\\t\\tstyle.minWidth = style.maxWidth = style.width = ret;\\n\\t\\t\\t\\tret = computed.width;\\n\\n\\t\\t\\t\\t// Revert the changed values\\n\\t\\t\\t\\tstyle.width = width;\\n\\t\\t\\t\\tstyle.minWidth = minWidth;\\n\\t\\t\\t\\tstyle.maxWidth = maxWidth;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn ret !== undefined ?\\n\\n\\t\\t// Support: IE <=9 - 11 only\\n\\t\\t// IE returns zIndex value as an integer.\\n\\t\\tret + \\\"\\\" : ret;\\n\\t}\\n\\n\\tfunction addGetHookIf(conditionFn, hookFn) {\\n\\n\\t\\t// Define the hook, we'll check on the first run if it's really needed.\\n\\t\\treturn {\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\tif (conditionFn()) {\\n\\n\\t\\t\\t\\t\\t// Hook not needed (or it's not possible to use it due\\n\\t\\t\\t\\t\\t// to missing dependency), remove it.\\n\\t\\t\\t\\t\\tdelete this.get;\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Hook needed; redefine it so that the support test is not executed again.\\n\\t\\t\\t\\treturn (this.get = hookFn).apply(this, arguments);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n\\n\\tvar\\n\\n\\t// Swappable if display is none or starts with table\\n\\t// except \\\"table\\\", \\\"table-cell\\\", or \\\"table-caption\\\"\\n\\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\\n\\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\\n\\t    rcustomProp = /^--/,\\n\\t    cssShow = { position: \\\"absolute\\\", visibility: \\\"hidden\\\", display: \\\"block\\\" },\\n\\t    cssNormalTransform = {\\n\\t\\tletterSpacing: \\\"0\\\",\\n\\t\\tfontWeight: \\\"400\\\"\\n\\t},\\n\\t    cssPrefixes = [\\\"Webkit\\\", \\\"Moz\\\", \\\"ms\\\"],\\n\\t    emptyStyle = document.createElement(\\\"div\\\").style;\\n\\n\\t// Return a css property mapped to a potentially vendor prefixed property\\n\\tfunction vendorPropName(name) {\\n\\n\\t\\t// Shortcut for names that are not vendor prefixed\\n\\t\\tif (name in emptyStyle) {\\n\\t\\t\\treturn name;\\n\\t\\t}\\n\\n\\t\\t// Check for vendor prefixed names\\n\\t\\tvar capName = name[0].toUpperCase() + name.slice(1),\\n\\t\\t    i = cssPrefixes.length;\\n\\n\\t\\twhile (i--) {\\n\\t\\t\\tname = cssPrefixes[i] + capName;\\n\\t\\t\\tif (name in emptyStyle) {\\n\\t\\t\\t\\treturn name;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Return a property mapped along what jQuery.cssProps suggests or to\\n\\t// a vendor prefixed property.\\n\\tfunction finalPropName(name) {\\n\\t\\tvar ret = jQuery.cssProps[name];\\n\\t\\tif (!ret) {\\n\\t\\t\\tret = jQuery.cssProps[name] = vendorPropName(name) || name;\\n\\t\\t}\\n\\t\\treturn ret;\\n\\t}\\n\\n\\tfunction setPositiveNumber(elem, value, subtract) {\\n\\n\\t\\t// Any relative (+/-) values have already been\\n\\t\\t// normalized at this point\\n\\t\\tvar matches = rcssNum.exec(value);\\n\\t\\treturn matches ?\\n\\n\\t\\t// Guard against undefined \\\"subtract\\\", e.g., when used as in cssHooks\\n\\t\\tMath.max(0, matches[2] - (subtract || 0)) + (matches[3] || \\\"px\\\") : value;\\n\\t}\\n\\n\\tfunction boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {\\n\\t\\tvar i = dimension === \\\"width\\\" ? 1 : 0,\\n\\t\\t    extra = 0,\\n\\t\\t    delta = 0;\\n\\n\\t\\t// Adjustment may not be necessary\\n\\t\\tif (box === (isBorderBox ? \\\"border\\\" : \\\"content\\\")) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tfor (; i < 4; i += 2) {\\n\\n\\t\\t\\t// Both box models exclude margin\\n\\t\\t\\tif (box === \\\"margin\\\") {\\n\\t\\t\\t\\tdelta += jQuery.css(elem, box + cssExpand[i], true, styles);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If we get here with a content-box, we're seeking \\\"padding\\\" or \\\"border\\\" or \\\"margin\\\"\\n\\t\\t\\tif (!isBorderBox) {\\n\\n\\t\\t\\t\\t// Add padding\\n\\t\\t\\t\\tdelta += jQuery.css(elem, \\\"padding\\\" + cssExpand[i], true, styles);\\n\\n\\t\\t\\t\\t// For \\\"border\\\" or \\\"margin\\\", add border\\n\\t\\t\\t\\tif (box !== \\\"padding\\\") {\\n\\t\\t\\t\\t\\tdelta += jQuery.css(elem, \\\"border\\\" + cssExpand[i] + \\\"Width\\\", true, styles);\\n\\n\\t\\t\\t\\t\\t// But still keep track of it otherwise\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\textra += jQuery.css(elem, \\\"border\\\" + cssExpand[i] + \\\"Width\\\", true, styles);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// If we get here with a border-box (content + padding + border), we're seeking \\\"content\\\" or\\n\\t\\t\\t\\t// \\\"padding\\\" or \\\"margin\\\"\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// For \\\"content\\\", subtract padding\\n\\t\\t\\t\\tif (box === \\\"content\\\") {\\n\\t\\t\\t\\t\\tdelta -= jQuery.css(elem, \\\"padding\\\" + cssExpand[i], true, styles);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// For \\\"content\\\" or \\\"padding\\\", subtract border\\n\\t\\t\\t\\tif (box !== \\\"margin\\\") {\\n\\t\\t\\t\\t\\tdelta -= jQuery.css(elem, \\\"border\\\" + cssExpand[i] + \\\"Width\\\", true, styles);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Account for positive content-box scroll gutter when requested by providing computedVal\\n\\t\\tif (!isBorderBox && computedVal >= 0) {\\n\\n\\t\\t\\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\\n\\t\\t\\t// Assuming integer scroll gutter, subtract the rest and round down\\n\\t\\t\\tdelta += Math.max(0, Math.ceil(elem[\\\"offset\\\" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5));\\n\\t\\t}\\n\\n\\t\\treturn delta;\\n\\t}\\n\\n\\tfunction getWidthOrHeight(elem, dimension, extra) {\\n\\n\\t\\t// Start with computed style\\n\\t\\tvar styles = getStyles(elem),\\n\\t\\t    val = curCSS(elem, dimension, styles),\\n\\t\\t    isBorderBox = jQuery.css(elem, \\\"boxSizing\\\", false, styles) === \\\"border-box\\\",\\n\\t\\t    valueIsBorderBox = isBorderBox;\\n\\n\\t\\t// Support: Firefox <=54\\n\\t\\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\\n\\t\\tif (rnumnonpx.test(val)) {\\n\\t\\t\\tif (!extra) {\\n\\t\\t\\t\\treturn val;\\n\\t\\t\\t}\\n\\t\\t\\tval = \\\"auto\\\";\\n\\t\\t}\\n\\n\\t\\t// Check for style in case a browser which returns unreliable values\\n\\t\\t// for getComputedStyle silently falls back to the reliable elem.style\\n\\t\\tvalueIsBorderBox = valueIsBorderBox && (support.boxSizingReliable() || val === elem.style[dimension]);\\n\\n\\t\\t// Fall back to offsetWidth/offsetHeight when value is \\\"auto\\\"\\n\\t\\t// This happens for inline elements with no explicit setting (gh-3571)\\n\\t\\t// Support: Android <=4.1 - 4.3 only\\n\\t\\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\\n\\t\\tif (val === \\\"auto\\\" || !parseFloat(val) && jQuery.css(elem, \\\"display\\\", false, styles) === \\\"inline\\\") {\\n\\n\\t\\t\\tval = elem[\\\"offset\\\" + dimension[0].toUpperCase() + dimension.slice(1)];\\n\\n\\t\\t\\t// offsetWidth/offsetHeight provide border-box values\\n\\t\\t\\tvalueIsBorderBox = true;\\n\\t\\t}\\n\\n\\t\\t// Normalize \\\"\\\" and auto\\n\\t\\tval = parseFloat(val) || 0;\\n\\n\\t\\t// Adjust for the element's box model\\n\\t\\treturn val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? \\\"border\\\" : \\\"content\\\"), valueIsBorderBox, styles,\\n\\n\\t\\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\\n\\t\\tval) + \\\"px\\\";\\n\\t}\\n\\n\\tjQuery.extend({\\n\\n\\t\\t// Add in style property hooks for overriding the default\\n\\t\\t// behavior of getting and setting a style property\\n\\t\\tcssHooks: {\\n\\t\\t\\topacity: {\\n\\t\\t\\t\\tget: function get(elem, computed) {\\n\\t\\t\\t\\t\\tif (computed) {\\n\\n\\t\\t\\t\\t\\t\\t// We should always get a number back from opacity\\n\\t\\t\\t\\t\\t\\tvar ret = curCSS(elem, \\\"opacity\\\");\\n\\t\\t\\t\\t\\t\\treturn ret === \\\"\\\" ? \\\"1\\\" : ret;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\t// Don't automatically add \\\"px\\\" to these possibly-unitless properties\\n\\t\\tcssNumber: {\\n\\t\\t\\t\\\"animationIterationCount\\\": true,\\n\\t\\t\\t\\\"columnCount\\\": true,\\n\\t\\t\\t\\\"fillOpacity\\\": true,\\n\\t\\t\\t\\\"flexGrow\\\": true,\\n\\t\\t\\t\\\"flexShrink\\\": true,\\n\\t\\t\\t\\\"fontWeight\\\": true,\\n\\t\\t\\t\\\"lineHeight\\\": true,\\n\\t\\t\\t\\\"opacity\\\": true,\\n\\t\\t\\t\\\"order\\\": true,\\n\\t\\t\\t\\\"orphans\\\": true,\\n\\t\\t\\t\\\"widows\\\": true,\\n\\t\\t\\t\\\"zIndex\\\": true,\\n\\t\\t\\t\\\"zoom\\\": true\\n\\t\\t},\\n\\n\\t\\t// Add in properties whose names you wish to fix before\\n\\t\\t// setting or getting the value\\n\\t\\tcssProps: {},\\n\\n\\t\\t// Get and set the style property on a DOM Node\\n\\t\\tstyle: function style(elem, name, value, extra) {\\n\\n\\t\\t\\t// Don't set styles on text and comment nodes\\n\\t\\t\\tif (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Make sure that we're working with the right name\\n\\t\\t\\tvar ret,\\n\\t\\t\\t    type,\\n\\t\\t\\t    hooks,\\n\\t\\t\\t    origName = camelCase(name),\\n\\t\\t\\t    isCustomProp = rcustomProp.test(name),\\n\\t\\t\\t    style = elem.style;\\n\\n\\t\\t\\t// Make sure that we're working with the right name. We don't\\n\\t\\t\\t// want to query the value if it is a CSS custom property\\n\\t\\t\\t// since they are user-defined.\\n\\t\\t\\tif (!isCustomProp) {\\n\\t\\t\\t\\tname = finalPropName(origName);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Gets hook for the prefixed version, then unprefixed version\\n\\t\\t\\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\\n\\n\\t\\t\\t// Check if we're setting a value\\n\\t\\t\\tif (value !== undefined) {\\n\\t\\t\\t\\ttype = typeof value === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(value);\\n\\n\\t\\t\\t\\t// Convert \\\"+=\\\" or \\\"-=\\\" to relative numbers (#7345)\\n\\t\\t\\t\\tif (type === \\\"string\\\" && (ret = rcssNum.exec(value)) && ret[1]) {\\n\\t\\t\\t\\t\\tvalue = adjustCSS(elem, name, ret);\\n\\n\\t\\t\\t\\t\\t// Fixes bug #9237\\n\\t\\t\\t\\t\\ttype = \\\"number\\\";\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Make sure that null and NaN values aren't set (#7116)\\n\\t\\t\\t\\tif (value == null || value !== value) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// If a number was passed in, add the unit (except for certain CSS properties)\\n\\t\\t\\t\\tif (type === \\\"number\\\") {\\n\\t\\t\\t\\t\\tvalue += ret && ret[3] || (jQuery.cssNumber[origName] ? \\\"\\\" : \\\"px\\\");\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// background-* props affect original clone's values\\n\\t\\t\\t\\tif (!support.clearCloneStyle && value === \\\"\\\" && name.indexOf(\\\"background\\\") === 0) {\\n\\t\\t\\t\\t\\tstyle[name] = \\\"inherit\\\";\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// If a hook was provided, use that value, otherwise just set the specified value\\n\\t\\t\\t\\tif (!hooks || !(\\\"set\\\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\\n\\n\\t\\t\\t\\t\\tif (isCustomProp) {\\n\\t\\t\\t\\t\\t\\tstyle.setProperty(name, value);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tstyle[name] = value;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t// If a hook was provided get the non-computed value from there\\n\\t\\t\\t\\tif (hooks && \\\"get\\\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\\n\\n\\t\\t\\t\\t\\treturn ret;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Otherwise just get the value from the style object\\n\\t\\t\\t\\treturn style[name];\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tcss: function css(elem, name, extra, styles) {\\n\\t\\t\\tvar val,\\n\\t\\t\\t    num,\\n\\t\\t\\t    hooks,\\n\\t\\t\\t    origName = camelCase(name),\\n\\t\\t\\t    isCustomProp = rcustomProp.test(name);\\n\\n\\t\\t\\t// Make sure that we're working with the right name. We don't\\n\\t\\t\\t// want to modify the value if it is a CSS custom property\\n\\t\\t\\t// since they are user-defined.\\n\\t\\t\\tif (!isCustomProp) {\\n\\t\\t\\t\\tname = finalPropName(origName);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Try prefixed name followed by the unprefixed name\\n\\t\\t\\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\\n\\n\\t\\t\\t// If a hook was provided get the computed value from there\\n\\t\\t\\tif (hooks && \\\"get\\\" in hooks) {\\n\\t\\t\\t\\tval = hooks.get(elem, true, extra);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Otherwise, if a way to get the computed value exists, use that\\n\\t\\t\\tif (val === undefined) {\\n\\t\\t\\t\\tval = curCSS(elem, name, styles);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Convert \\\"normal\\\" to computed value\\n\\t\\t\\tif (val === \\\"normal\\\" && name in cssNormalTransform) {\\n\\t\\t\\t\\tval = cssNormalTransform[name];\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Make numeric if forced or a qualifier was provided and val looks numeric\\n\\t\\t\\tif (extra === \\\"\\\" || extra) {\\n\\t\\t\\t\\tnum = parseFloat(val);\\n\\t\\t\\t\\treturn extra === true || isFinite(num) ? num || 0 : val;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn val;\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.each([\\\"height\\\", \\\"width\\\"], function (i, dimension) {\\n\\t\\tjQuery.cssHooks[dimension] = {\\n\\t\\t\\tget: function get(elem, computed, extra) {\\n\\t\\t\\t\\tif (computed) {\\n\\n\\t\\t\\t\\t\\t// Certain elements can have dimension info if we invisibly show them\\n\\t\\t\\t\\t\\t// but it must have a current display style that would benefit\\n\\t\\t\\t\\t\\treturn rdisplayswap.test(jQuery.css(elem, \\\"display\\\")) && (\\n\\n\\t\\t\\t\\t\\t// Support: Safari 8+\\n\\t\\t\\t\\t\\t// Table columns in Safari have non-zero offsetWidth & zero\\n\\t\\t\\t\\t\\t// getBoundingClientRect().width unless display is changed.\\n\\t\\t\\t\\t\\t// Support: IE <=11 only\\n\\t\\t\\t\\t\\t// Running getBoundingClientRect on a disconnected node\\n\\t\\t\\t\\t\\t// in IE throws an error.\\n\\t\\t\\t\\t\\t!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {\\n\\t\\t\\t\\t\\t\\treturn getWidthOrHeight(elem, dimension, extra);\\n\\t\\t\\t\\t\\t}) : getWidthOrHeight(elem, dimension, extra);\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\n\\t\\t\\tset: function set(elem, value, extra) {\\n\\t\\t\\t\\tvar matches,\\n\\t\\t\\t\\t    styles = getStyles(elem),\\n\\t\\t\\t\\t    isBorderBox = jQuery.css(elem, \\\"boxSizing\\\", false, styles) === \\\"border-box\\\",\\n\\t\\t\\t\\t    subtract = extra && boxModelAdjustment(elem, dimension, extra, isBorderBox, styles);\\n\\n\\t\\t\\t\\t// Account for unreliable border-box dimensions by comparing offset* to computed and\\n\\t\\t\\t\\t// faking a content-box to get border and padding (gh-3699)\\n\\t\\t\\t\\tif (isBorderBox && support.scrollboxSize() === styles.position) {\\n\\t\\t\\t\\t\\tsubtract -= Math.ceil(elem[\\\"offset\\\" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, \\\"border\\\", false, styles) - 0.5);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Convert to pixels if value adjustment is needed\\n\\t\\t\\t\\tif (subtract && (matches = rcssNum.exec(value)) && (matches[3] || \\\"px\\\") !== \\\"px\\\") {\\n\\n\\t\\t\\t\\t\\telem.style[dimension] = value;\\n\\t\\t\\t\\t\\tvalue = jQuery.css(elem, dimension);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn setPositiveNumber(elem, value, subtract);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t});\\n\\n\\tjQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {\\n\\t\\tif (computed) {\\n\\t\\t\\treturn (parseFloat(curCSS(elem, \\\"marginLeft\\\")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {\\n\\t\\t\\t\\treturn elem.getBoundingClientRect().left;\\n\\t\\t\\t})) + \\\"px\\\";\\n\\t\\t}\\n\\t});\\n\\n\\t// These hooks are used by animate to expand properties\\n\\tjQuery.each({\\n\\t\\tmargin: \\\"\\\",\\n\\t\\tpadding: \\\"\\\",\\n\\t\\tborder: \\\"Width\\\"\\n\\t}, function (prefix, suffix) {\\n\\t\\tjQuery.cssHooks[prefix + suffix] = {\\n\\t\\t\\texpand: function expand(value) {\\n\\t\\t\\t\\tvar i = 0,\\n\\t\\t\\t\\t    expanded = {},\\n\\n\\n\\t\\t\\t\\t// Assumes a single number if not a string\\n\\t\\t\\t\\tparts = typeof value === \\\"string\\\" ? value.split(\\\" \\\") : [value];\\n\\n\\t\\t\\t\\tfor (; i < 4; i++) {\\n\\t\\t\\t\\t\\texpanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn expanded;\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tif (prefix !== \\\"margin\\\") {\\n\\t\\t\\tjQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.fn.extend({\\n\\t\\tcss: function css(name, value) {\\n\\t\\t\\treturn access(this, function (elem, name, value) {\\n\\t\\t\\t\\tvar styles,\\n\\t\\t\\t\\t    len,\\n\\t\\t\\t\\t    map = {},\\n\\t\\t\\t\\t    i = 0;\\n\\n\\t\\t\\t\\tif (Array.isArray(name)) {\\n\\t\\t\\t\\t\\tstyles = getStyles(elem);\\n\\t\\t\\t\\t\\tlen = name.length;\\n\\n\\t\\t\\t\\t\\tfor (; i < len; i++) {\\n\\t\\t\\t\\t\\t\\tmap[name[i]] = jQuery.css(elem, name[i], false, styles);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn map;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\\n\\t\\t\\t}, name, value, arguments.length > 1);\\n\\t\\t}\\n\\t});\\n\\n\\tfunction Tween(elem, options, prop, end, easing) {\\n\\t\\treturn new Tween.prototype.init(elem, options, prop, end, easing);\\n\\t}\\n\\tjQuery.Tween = Tween;\\n\\n\\tTween.prototype = {\\n\\t\\tconstructor: Tween,\\n\\t\\tinit: function init(elem, options, prop, end, easing, unit) {\\n\\t\\t\\tthis.elem = elem;\\n\\t\\t\\tthis.prop = prop;\\n\\t\\t\\tthis.easing = easing || jQuery.easing._default;\\n\\t\\t\\tthis.options = options;\\n\\t\\t\\tthis.start = this.now = this.cur();\\n\\t\\t\\tthis.end = end;\\n\\t\\t\\tthis.unit = unit || (jQuery.cssNumber[prop] ? \\\"\\\" : \\\"px\\\");\\n\\t\\t},\\n\\t\\tcur: function cur() {\\n\\t\\t\\tvar hooks = Tween.propHooks[this.prop];\\n\\n\\t\\t\\treturn hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\\n\\t\\t},\\n\\t\\trun: function run(percent) {\\n\\t\\t\\tvar eased,\\n\\t\\t\\t    hooks = Tween.propHooks[this.prop];\\n\\n\\t\\t\\tif (this.options.duration) {\\n\\t\\t\\t\\tthis.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.pos = eased = percent;\\n\\t\\t\\t}\\n\\t\\t\\tthis.now = (this.end - this.start) * eased + this.start;\\n\\n\\t\\t\\tif (this.options.step) {\\n\\t\\t\\t\\tthis.options.step.call(this.elem, this.now, this);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (hooks && hooks.set) {\\n\\t\\t\\t\\thooks.set(this);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tTween.propHooks._default.set(this);\\n\\t\\t\\t}\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\t};\\n\\n\\tTween.prototype.init.prototype = Tween.prototype;\\n\\n\\tTween.propHooks = {\\n\\t\\t_default: {\\n\\t\\t\\tget: function get(tween) {\\n\\t\\t\\t\\tvar result;\\n\\n\\t\\t\\t\\t// Use a property on the element directly when it is not a DOM element,\\n\\t\\t\\t\\t// or when there is no matching style property that exists.\\n\\t\\t\\t\\tif (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\\n\\t\\t\\t\\t\\treturn tween.elem[tween.prop];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Passing an empty string as a 3rd parameter to .css will automatically\\n\\t\\t\\t\\t// attempt a parseFloat and fallback to a string if the parse fails.\\n\\t\\t\\t\\t// Simple values such as \\\"10px\\\" are parsed to Float;\\n\\t\\t\\t\\t// complex values such as \\\"rotate(1rad)\\\" are returned as-is.\\n\\t\\t\\t\\tresult = jQuery.css(tween.elem, tween.prop, \\\"\\\");\\n\\n\\t\\t\\t\\t// Empty strings, null, undefined and \\\"auto\\\" are converted to 0.\\n\\t\\t\\t\\treturn !result || result === \\\"auto\\\" ? 0 : result;\\n\\t\\t\\t},\\n\\t\\t\\tset: function set(tween) {\\n\\n\\t\\t\\t\\t// Use step hook for back compat.\\n\\t\\t\\t\\t// Use cssHook if its there.\\n\\t\\t\\t\\t// Use .style if available and use plain properties where available.\\n\\t\\t\\t\\tif (jQuery.fx.step[tween.prop]) {\\n\\t\\t\\t\\t\\tjQuery.fx.step[tween.prop](tween);\\n\\t\\t\\t\\t} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {\\n\\t\\t\\t\\t\\tjQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttween.elem[tween.prop] = tween.now;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\n\\t// Support: IE <=9 only\\n\\t// Panic based approach to setting things on disconnected nodes\\n\\tTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\\n\\t\\tset: function set(tween) {\\n\\t\\t\\tif (tween.elem.nodeType && tween.elem.parentNode) {\\n\\t\\t\\t\\ttween.elem[tween.prop] = tween.now;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\n\\tjQuery.easing = {\\n\\t\\tlinear: function linear(p) {\\n\\t\\t\\treturn p;\\n\\t\\t},\\n\\t\\tswing: function swing(p) {\\n\\t\\t\\treturn 0.5 - Math.cos(p * Math.PI) / 2;\\n\\t\\t},\\n\\t\\t_default: \\\"swing\\\"\\n\\t};\\n\\n\\tjQuery.fx = Tween.prototype.init;\\n\\n\\t// Back compat <1.8 extension point\\n\\tjQuery.fx.step = {};\\n\\n\\tvar fxNow,\\n\\t    inProgress,\\n\\t    rfxtypes = /^(?:toggle|show|hide)$/,\\n\\t    rrun = /queueHooks$/;\\n\\n\\tfunction schedule() {\\n\\t\\tif (inProgress) {\\n\\t\\t\\tif (document.hidden === false && window.requestAnimationFrame) {\\n\\t\\t\\t\\twindow.requestAnimationFrame(schedule);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\twindow.setTimeout(schedule, jQuery.fx.interval);\\n\\t\\t\\t}\\n\\n\\t\\t\\tjQuery.fx.tick();\\n\\t\\t}\\n\\t}\\n\\n\\t// Animations created synchronously will run synchronously\\n\\tfunction createFxNow() {\\n\\t\\twindow.setTimeout(function () {\\n\\t\\t\\tfxNow = undefined;\\n\\t\\t});\\n\\t\\treturn fxNow = Date.now();\\n\\t}\\n\\n\\t// Generate parameters to create a standard animation\\n\\tfunction genFx(type, includeWidth) {\\n\\t\\tvar which,\\n\\t\\t    i = 0,\\n\\t\\t    attrs = { height: type };\\n\\n\\t\\t// If we include width, step value is 1 to do all cssExpand values,\\n\\t\\t// otherwise step value is 2 to skip over Left and Right\\n\\t\\tincludeWidth = includeWidth ? 1 : 0;\\n\\t\\tfor (; i < 4; i += 2 - includeWidth) {\\n\\t\\t\\twhich = cssExpand[i];\\n\\t\\t\\tattrs[\\\"margin\\\" + which] = attrs[\\\"padding\\\" + which] = type;\\n\\t\\t}\\n\\n\\t\\tif (includeWidth) {\\n\\t\\t\\tattrs.opacity = attrs.width = type;\\n\\t\\t}\\n\\n\\t\\treturn attrs;\\n\\t}\\n\\n\\tfunction createTween(value, prop, animation) {\\n\\t\\tvar tween,\\n\\t\\t    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners[\\\"*\\\"]),\\n\\t\\t    index = 0,\\n\\t\\t    length = collection.length;\\n\\t\\tfor (; index < length; index++) {\\n\\t\\t\\tif (tween = collection[index].call(animation, prop, value)) {\\n\\n\\t\\t\\t\\t// We're done with this property\\n\\t\\t\\t\\treturn tween;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction defaultPrefilter(elem, props, opts) {\\n\\t\\tvar prop,\\n\\t\\t    value,\\n\\t\\t    toggle,\\n\\t\\t    hooks,\\n\\t\\t    oldfire,\\n\\t\\t    propTween,\\n\\t\\t    restoreDisplay,\\n\\t\\t    display,\\n\\t\\t    isBox = \\\"width\\\" in props || \\\"height\\\" in props,\\n\\t\\t    anim = this,\\n\\t\\t    orig = {},\\n\\t\\t    style = elem.style,\\n\\t\\t    hidden = elem.nodeType && isHiddenWithinTree(elem),\\n\\t\\t    dataShow = dataPriv.get(elem, \\\"fxshow\\\");\\n\\n\\t\\t// Queue-skipping animations hijack the fx hooks\\n\\t\\tif (!opts.queue) {\\n\\t\\t\\thooks = jQuery._queueHooks(elem, \\\"fx\\\");\\n\\t\\t\\tif (hooks.unqueued == null) {\\n\\t\\t\\t\\thooks.unqueued = 0;\\n\\t\\t\\t\\toldfire = hooks.empty.fire;\\n\\t\\t\\t\\thooks.empty.fire = function () {\\n\\t\\t\\t\\t\\tif (!hooks.unqueued) {\\n\\t\\t\\t\\t\\t\\toldfire();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\t\\t\\thooks.unqueued++;\\n\\n\\t\\t\\tanim.always(function () {\\n\\n\\t\\t\\t\\t// Ensure the complete handler is called before this completes\\n\\t\\t\\t\\tanim.always(function () {\\n\\t\\t\\t\\t\\thooks.unqueued--;\\n\\t\\t\\t\\t\\tif (!jQuery.queue(elem, \\\"fx\\\").length) {\\n\\t\\t\\t\\t\\t\\thooks.empty.fire();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Detect show/hide animations\\n\\t\\tfor (prop in props) {\\n\\t\\t\\tvalue = props[prop];\\n\\t\\t\\tif (rfxtypes.test(value)) {\\n\\t\\t\\t\\tdelete props[prop];\\n\\t\\t\\t\\ttoggle = toggle || value === \\\"toggle\\\";\\n\\t\\t\\t\\tif (value === (hidden ? \\\"hide\\\" : \\\"show\\\")) {\\n\\n\\t\\t\\t\\t\\t// Pretend to be hidden if this is a \\\"show\\\" and\\n\\t\\t\\t\\t\\t// there is still data from a stopped show/hide\\n\\t\\t\\t\\t\\tif (value === \\\"show\\\" && dataShow && dataShow[prop] !== undefined) {\\n\\t\\t\\t\\t\\t\\thidden = true;\\n\\n\\t\\t\\t\\t\\t\\t// Ignore all other no-op show/hide data\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\torig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Bail out if this is a no-op like .hide().hide()\\n\\t\\tpropTween = !jQuery.isEmptyObject(props);\\n\\t\\tif (!propTween && jQuery.isEmptyObject(orig)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Restrict \\\"overflow\\\" and \\\"display\\\" styles during box animations\\n\\t\\tif (isBox && elem.nodeType === 1) {\\n\\n\\t\\t\\t// Support: IE <=9 - 11, Edge 12 - 15\\n\\t\\t\\t// Record all 3 overflow attributes because IE does not infer the shorthand\\n\\t\\t\\t// from identically-valued overflowX and overflowY and Edge just mirrors\\n\\t\\t\\t// the overflowX value there.\\n\\t\\t\\topts.overflow = [style.overflow, style.overflowX, style.overflowY];\\n\\n\\t\\t\\t// Identify a display type, preferring old show/hide data over the CSS cascade\\n\\t\\t\\trestoreDisplay = dataShow && dataShow.display;\\n\\t\\t\\tif (restoreDisplay == null) {\\n\\t\\t\\t\\trestoreDisplay = dataPriv.get(elem, \\\"display\\\");\\n\\t\\t\\t}\\n\\t\\t\\tdisplay = jQuery.css(elem, \\\"display\\\");\\n\\t\\t\\tif (display === \\\"none\\\") {\\n\\t\\t\\t\\tif (restoreDisplay) {\\n\\t\\t\\t\\t\\tdisplay = restoreDisplay;\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t// Get nonempty value(s) by temporarily forcing visibility\\n\\t\\t\\t\\t\\tshowHide([elem], true);\\n\\t\\t\\t\\t\\trestoreDisplay = elem.style.display || restoreDisplay;\\n\\t\\t\\t\\t\\tdisplay = jQuery.css(elem, \\\"display\\\");\\n\\t\\t\\t\\t\\tshowHide([elem]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Animate inline elements as inline-block\\n\\t\\t\\tif (display === \\\"inline\\\" || display === \\\"inline-block\\\" && restoreDisplay != null) {\\n\\t\\t\\t\\tif (jQuery.css(elem, \\\"float\\\") === \\\"none\\\") {\\n\\n\\t\\t\\t\\t\\t// Restore the original display value at the end of pure show/hide animations\\n\\t\\t\\t\\t\\tif (!propTween) {\\n\\t\\t\\t\\t\\t\\tanim.done(function () {\\n\\t\\t\\t\\t\\t\\t\\tstyle.display = restoreDisplay;\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\tif (restoreDisplay == null) {\\n\\t\\t\\t\\t\\t\\t\\tdisplay = style.display;\\n\\t\\t\\t\\t\\t\\t\\trestoreDisplay = display === \\\"none\\\" ? \\\"\\\" : display;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tstyle.display = \\\"inline-block\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (opts.overflow) {\\n\\t\\t\\tstyle.overflow = \\\"hidden\\\";\\n\\t\\t\\tanim.always(function () {\\n\\t\\t\\t\\tstyle.overflow = opts.overflow[0];\\n\\t\\t\\t\\tstyle.overflowX = opts.overflow[1];\\n\\t\\t\\t\\tstyle.overflowY = opts.overflow[2];\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Implement show/hide animations\\n\\t\\tpropTween = false;\\n\\t\\tfor (prop in orig) {\\n\\n\\t\\t\\t// General show/hide setup for this element animation\\n\\t\\t\\tif (!propTween) {\\n\\t\\t\\t\\tif (dataShow) {\\n\\t\\t\\t\\t\\tif (\\\"hidden\\\" in dataShow) {\\n\\t\\t\\t\\t\\t\\thidden = dataShow.hidden;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tdataShow = dataPriv.access(elem, \\\"fxshow\\\", { display: restoreDisplay });\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Store hidden/visible for toggle so `.stop().toggle()` \\\"reverses\\\"\\n\\t\\t\\t\\tif (toggle) {\\n\\t\\t\\t\\t\\tdataShow.hidden = !hidden;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Show elements before animating them\\n\\t\\t\\t\\tif (hidden) {\\n\\t\\t\\t\\t\\tshowHide([elem], true);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/* eslint-disable no-loop-func */\\n\\n\\t\\t\\t\\tanim.done(function () {\\n\\n\\t\\t\\t\\t\\t/* eslint-enable no-loop-func */\\n\\n\\t\\t\\t\\t\\t// The final step of a \\\"hide\\\" animation is actually hiding the element\\n\\t\\t\\t\\t\\tif (!hidden) {\\n\\t\\t\\t\\t\\t\\tshowHide([elem]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdataPriv.remove(elem, \\\"fxshow\\\");\\n\\t\\t\\t\\t\\tfor (prop in orig) {\\n\\t\\t\\t\\t\\t\\tjQuery.style(elem, prop, orig[prop]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Per-property setup\\n\\t\\t\\tpropTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\\n\\t\\t\\tif (!(prop in dataShow)) {\\n\\t\\t\\t\\tdataShow[prop] = propTween.start;\\n\\t\\t\\t\\tif (hidden) {\\n\\t\\t\\t\\t\\tpropTween.end = propTween.start;\\n\\t\\t\\t\\t\\tpropTween.start = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction propFilter(props, specialEasing) {\\n\\t\\tvar index, name, easing, value, hooks;\\n\\n\\t\\t// camelCase, specialEasing and expand cssHook pass\\n\\t\\tfor (index in props) {\\n\\t\\t\\tname = camelCase(index);\\n\\t\\t\\teasing = specialEasing[name];\\n\\t\\t\\tvalue = props[index];\\n\\t\\t\\tif (Array.isArray(value)) {\\n\\t\\t\\t\\teasing = value[1];\\n\\t\\t\\t\\tvalue = props[index] = value[0];\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (index !== name) {\\n\\t\\t\\t\\tprops[name] = value;\\n\\t\\t\\t\\tdelete props[index];\\n\\t\\t\\t}\\n\\n\\t\\t\\thooks = jQuery.cssHooks[name];\\n\\t\\t\\tif (hooks && \\\"expand\\\" in hooks) {\\n\\t\\t\\t\\tvalue = hooks.expand(value);\\n\\t\\t\\t\\tdelete props[name];\\n\\n\\t\\t\\t\\t// Not quite $.extend, this won't overwrite existing keys.\\n\\t\\t\\t\\t// Reusing 'index' because we have the correct \\\"name\\\"\\n\\t\\t\\t\\tfor (index in value) {\\n\\t\\t\\t\\t\\tif (!(index in props)) {\\n\\t\\t\\t\\t\\t\\tprops[index] = value[index];\\n\\t\\t\\t\\t\\t\\tspecialEasing[index] = easing;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tspecialEasing[name] = easing;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction Animation(elem, properties, options) {\\n\\t\\tvar result,\\n\\t\\t    stopped,\\n\\t\\t    index = 0,\\n\\t\\t    length = Animation.prefilters.length,\\n\\t\\t    deferred = jQuery.Deferred().always(function () {\\n\\n\\t\\t\\t// Don't match elem in the :animated selector\\n\\t\\t\\tdelete tick.elem;\\n\\t\\t}),\\n\\t\\t    tick = function tick() {\\n\\t\\t\\tif (stopped) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\tvar currentTime = fxNow || createFxNow(),\\n\\t\\t\\t    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\\n\\n\\n\\t\\t\\t// Support: Android 2.3 only\\n\\t\\t\\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\\n\\t\\t\\ttemp = remaining / animation.duration || 0,\\n\\t\\t\\t    percent = 1 - temp,\\n\\t\\t\\t    index = 0,\\n\\t\\t\\t    length = animation.tweens.length;\\n\\n\\t\\t\\tfor (; index < length; index++) {\\n\\t\\t\\t\\tanimation.tweens[index].run(percent);\\n\\t\\t\\t}\\n\\n\\t\\t\\tdeferred.notifyWith(elem, [animation, percent, remaining]);\\n\\n\\t\\t\\t// If there's more to do, yield\\n\\t\\t\\tif (percent < 1 && length) {\\n\\t\\t\\t\\treturn remaining;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If this was an empty animation, synthesize a final progress notification\\n\\t\\t\\tif (!length) {\\n\\t\\t\\t\\tdeferred.notifyWith(elem, [animation, 1, 0]);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Resolve the animation and report its conclusion\\n\\t\\t\\tdeferred.resolveWith(elem, [animation]);\\n\\t\\t\\treturn false;\\n\\t\\t},\\n\\t\\t    animation = deferred.promise({\\n\\t\\t\\telem: elem,\\n\\t\\t\\tprops: jQuery.extend({}, properties),\\n\\t\\t\\topts: jQuery.extend(true, {\\n\\t\\t\\t\\tspecialEasing: {},\\n\\t\\t\\t\\teasing: jQuery.easing._default\\n\\t\\t\\t}, options),\\n\\t\\t\\toriginalProperties: properties,\\n\\t\\t\\toriginalOptions: options,\\n\\t\\t\\tstartTime: fxNow || createFxNow(),\\n\\t\\t\\tduration: options.duration,\\n\\t\\t\\ttweens: [],\\n\\t\\t\\tcreateTween: function createTween(prop, end) {\\n\\t\\t\\t\\tvar tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\\n\\t\\t\\t\\tanimation.tweens.push(tween);\\n\\t\\t\\t\\treturn tween;\\n\\t\\t\\t},\\n\\t\\t\\tstop: function stop(gotoEnd) {\\n\\t\\t\\t\\tvar index = 0,\\n\\n\\n\\t\\t\\t\\t// If we are going to the end, we want to run all the tweens\\n\\t\\t\\t\\t// otherwise we skip this part\\n\\t\\t\\t\\tlength = gotoEnd ? animation.tweens.length : 0;\\n\\t\\t\\t\\tif (stopped) {\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tstopped = true;\\n\\t\\t\\t\\tfor (; index < length; index++) {\\n\\t\\t\\t\\t\\tanimation.tweens[index].run(1);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Resolve when we played the last frame; otherwise, reject\\n\\t\\t\\t\\tif (gotoEnd) {\\n\\t\\t\\t\\t\\tdeferred.notifyWith(elem, [animation, 1, 0]);\\n\\t\\t\\t\\t\\tdeferred.resolveWith(elem, [animation, gotoEnd]);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tdeferred.rejectWith(elem, [animation, gotoEnd]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn this;\\n\\t\\t\\t}\\n\\t\\t}),\\n\\t\\t    props = animation.props;\\n\\n\\t\\tpropFilter(props, animation.opts.specialEasing);\\n\\n\\t\\tfor (; index < length; index++) {\\n\\t\\t\\tresult = Animation.prefilters[index].call(animation, elem, props, animation.opts);\\n\\t\\t\\tif (result) {\\n\\t\\t\\t\\tif (isFunction(result.stop)) {\\n\\t\\t\\t\\t\\tjQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn result;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tjQuery.map(props, createTween, animation);\\n\\n\\t\\tif (isFunction(animation.opts.start)) {\\n\\t\\t\\tanimation.opts.start.call(elem, animation);\\n\\t\\t}\\n\\n\\t\\t// Attach callbacks from options\\n\\t\\tanimation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\\n\\n\\t\\tjQuery.fx.timer(jQuery.extend(tick, {\\n\\t\\t\\telem: elem,\\n\\t\\t\\tanim: animation,\\n\\t\\t\\tqueue: animation.opts.queue\\n\\t\\t}));\\n\\n\\t\\treturn animation;\\n\\t}\\n\\n\\tjQuery.Animation = jQuery.extend(Animation, {\\n\\n\\t\\ttweeners: {\\n\\t\\t\\t\\\"*\\\": [function (prop, value) {\\n\\t\\t\\t\\tvar tween = this.createTween(prop, value);\\n\\t\\t\\t\\tadjustCSS(tween.elem, prop, rcssNum.exec(value), tween);\\n\\t\\t\\t\\treturn tween;\\n\\t\\t\\t}]\\n\\t\\t},\\n\\n\\t\\ttweener: function tweener(props, callback) {\\n\\t\\t\\tif (isFunction(props)) {\\n\\t\\t\\t\\tcallback = props;\\n\\t\\t\\t\\tprops = [\\\"*\\\"];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tprops = props.match(rnothtmlwhite);\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar prop,\\n\\t\\t\\t    index = 0,\\n\\t\\t\\t    length = props.length;\\n\\n\\t\\t\\tfor (; index < length; index++) {\\n\\t\\t\\t\\tprop = props[index];\\n\\t\\t\\t\\tAnimation.tweeners[prop] = Animation.tweeners[prop] || [];\\n\\t\\t\\t\\tAnimation.tweeners[prop].unshift(callback);\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tprefilters: [defaultPrefilter],\\n\\n\\t\\tprefilter: function prefilter(callback, prepend) {\\n\\t\\t\\tif (prepend) {\\n\\t\\t\\t\\tAnimation.prefilters.unshift(callback);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tAnimation.prefilters.push(callback);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.speed = function (speed, easing, fn) {\\n\\t\\tvar opt = speed && (typeof speed === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(speed)) === \\\"object\\\" ? jQuery.extend({}, speed) : {\\n\\t\\t\\tcomplete: fn || !fn && easing || isFunction(speed) && speed,\\n\\t\\t\\tduration: speed,\\n\\t\\t\\teasing: fn && easing || easing && !isFunction(easing) && easing\\n\\t\\t};\\n\\n\\t\\t// Go to the end state if fx are off\\n\\t\\tif (jQuery.fx.off) {\\n\\t\\t\\topt.duration = 0;\\n\\t\\t} else {\\n\\t\\t\\tif (typeof opt.duration !== \\\"number\\\") {\\n\\t\\t\\t\\tif (opt.duration in jQuery.fx.speeds) {\\n\\t\\t\\t\\t\\topt.duration = jQuery.fx.speeds[opt.duration];\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\topt.duration = jQuery.fx.speeds._default;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Normalize opt.queue - true/undefined/null -> \\\"fx\\\"\\n\\t\\tif (opt.queue == null || opt.queue === true) {\\n\\t\\t\\topt.queue = \\\"fx\\\";\\n\\t\\t}\\n\\n\\t\\t// Queueing\\n\\t\\topt.old = opt.complete;\\n\\n\\t\\topt.complete = function () {\\n\\t\\t\\tif (isFunction(opt.old)) {\\n\\t\\t\\t\\topt.old.call(this);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (opt.queue) {\\n\\t\\t\\t\\tjQuery.dequeue(this, opt.queue);\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\treturn opt;\\n\\t};\\n\\n\\tjQuery.fn.extend({\\n\\t\\tfadeTo: function fadeTo(speed, to, easing, callback) {\\n\\n\\t\\t\\t// Show any hidden elements after setting opacity to 0\\n\\t\\t\\treturn this.filter(isHiddenWithinTree).css(\\\"opacity\\\", 0).show()\\n\\n\\t\\t\\t// Animate to the value specified\\n\\t\\t\\t.end().animate({ opacity: to }, speed, easing, callback);\\n\\t\\t},\\n\\t\\tanimate: function animate(prop, speed, easing, callback) {\\n\\t\\t\\tvar empty = jQuery.isEmptyObject(prop),\\n\\t\\t\\t    optall = jQuery.speed(speed, easing, callback),\\n\\t\\t\\t    doAnimation = function doAnimation() {\\n\\n\\t\\t\\t\\t// Operate on a copy of prop so per-property easing won't be lost\\n\\t\\t\\t\\tvar anim = Animation(this, jQuery.extend({}, prop), optall);\\n\\n\\t\\t\\t\\t// Empty animations, or finishing resolves immediately\\n\\t\\t\\t\\tif (empty || dataPriv.get(this, \\\"finish\\\")) {\\n\\t\\t\\t\\t\\tanim.stop(true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t\\tdoAnimation.finish = doAnimation;\\n\\n\\t\\t\\treturn empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\\n\\t\\t},\\n\\t\\tstop: function stop(type, clearQueue, gotoEnd) {\\n\\t\\t\\tvar stopQueue = function stopQueue(hooks) {\\n\\t\\t\\t\\tvar stop = hooks.stop;\\n\\t\\t\\t\\tdelete hooks.stop;\\n\\t\\t\\t\\tstop(gotoEnd);\\n\\t\\t\\t};\\n\\n\\t\\t\\tif (typeof type !== \\\"string\\\") {\\n\\t\\t\\t\\tgotoEnd = clearQueue;\\n\\t\\t\\t\\tclearQueue = type;\\n\\t\\t\\t\\ttype = undefined;\\n\\t\\t\\t}\\n\\t\\t\\tif (clearQueue && type !== false) {\\n\\t\\t\\t\\tthis.queue(type || \\\"fx\\\", []);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.each(function () {\\n\\t\\t\\t\\tvar dequeue = true,\\n\\t\\t\\t\\t    index = type != null && type + \\\"queueHooks\\\",\\n\\t\\t\\t\\t    timers = jQuery.timers,\\n\\t\\t\\t\\t    data = dataPriv.get(this);\\n\\n\\t\\t\\t\\tif (index) {\\n\\t\\t\\t\\t\\tif (data[index] && data[index].stop) {\\n\\t\\t\\t\\t\\t\\tstopQueue(data[index]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tfor (index in data) {\\n\\t\\t\\t\\t\\t\\tif (data[index] && data[index].stop && rrun.test(index)) {\\n\\t\\t\\t\\t\\t\\t\\tstopQueue(data[index]);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfor (index = timers.length; index--;) {\\n\\t\\t\\t\\t\\tif (timers[index].elem === this && (type == null || timers[index].queue === type)) {\\n\\n\\t\\t\\t\\t\\t\\ttimers[index].anim.stop(gotoEnd);\\n\\t\\t\\t\\t\\t\\tdequeue = false;\\n\\t\\t\\t\\t\\t\\ttimers.splice(index, 1);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Start the next in the queue if the last step wasn't forced.\\n\\t\\t\\t\\t// Timers currently will call their complete callbacks, which\\n\\t\\t\\t\\t// will dequeue but only if they were gotoEnd.\\n\\t\\t\\t\\tif (dequeue || !gotoEnd) {\\n\\t\\t\\t\\t\\tjQuery.dequeue(this, type);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t},\\n\\t\\tfinish: function finish(type) {\\n\\t\\t\\tif (type !== false) {\\n\\t\\t\\t\\ttype = type || \\\"fx\\\";\\n\\t\\t\\t}\\n\\t\\t\\treturn this.each(function () {\\n\\t\\t\\t\\tvar index,\\n\\t\\t\\t\\t    data = dataPriv.get(this),\\n\\t\\t\\t\\t    queue = data[type + \\\"queue\\\"],\\n\\t\\t\\t\\t    hooks = data[type + \\\"queueHooks\\\"],\\n\\t\\t\\t\\t    timers = jQuery.timers,\\n\\t\\t\\t\\t    length = queue ? queue.length : 0;\\n\\n\\t\\t\\t\\t// Enable finishing flag on private data\\n\\t\\t\\t\\tdata.finish = true;\\n\\n\\t\\t\\t\\t// Empty the queue first\\n\\t\\t\\t\\tjQuery.queue(this, type, []);\\n\\n\\t\\t\\t\\tif (hooks && hooks.stop) {\\n\\t\\t\\t\\t\\thooks.stop.call(this, true);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Look for any active animations, and finish them\\n\\t\\t\\t\\tfor (index = timers.length; index--;) {\\n\\t\\t\\t\\t\\tif (timers[index].elem === this && timers[index].queue === type) {\\n\\t\\t\\t\\t\\t\\ttimers[index].anim.stop(true);\\n\\t\\t\\t\\t\\t\\ttimers.splice(index, 1);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Look for any animations in the old queue and finish them\\n\\t\\t\\t\\tfor (index = 0; index < length; index++) {\\n\\t\\t\\t\\t\\tif (queue[index] && queue[index].finish) {\\n\\t\\t\\t\\t\\t\\tqueue[index].finish.call(this);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Turn off finishing flag\\n\\t\\t\\t\\tdelete data.finish;\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.each([\\\"toggle\\\", \\\"show\\\", \\\"hide\\\"], function (i, name) {\\n\\t\\tvar cssFn = jQuery.fn[name];\\n\\t\\tjQuery.fn[name] = function (speed, easing, callback) {\\n\\t\\t\\treturn speed == null || typeof speed === \\\"boolean\\\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\\n\\t\\t};\\n\\t});\\n\\n\\t// Generate shortcuts for custom animations\\n\\tjQuery.each({\\n\\t\\tslideDown: genFx(\\\"show\\\"),\\n\\t\\tslideUp: genFx(\\\"hide\\\"),\\n\\t\\tslideToggle: genFx(\\\"toggle\\\"),\\n\\t\\tfadeIn: { opacity: \\\"show\\\" },\\n\\t\\tfadeOut: { opacity: \\\"hide\\\" },\\n\\t\\tfadeToggle: { opacity: \\\"toggle\\\" }\\n\\t}, function (name, props) {\\n\\t\\tjQuery.fn[name] = function (speed, easing, callback) {\\n\\t\\t\\treturn this.animate(props, speed, easing, callback);\\n\\t\\t};\\n\\t});\\n\\n\\tjQuery.timers = [];\\n\\tjQuery.fx.tick = function () {\\n\\t\\tvar timer,\\n\\t\\t    i = 0,\\n\\t\\t    timers = jQuery.timers;\\n\\n\\t\\tfxNow = Date.now();\\n\\n\\t\\tfor (; i < timers.length; i++) {\\n\\t\\t\\ttimer = timers[i];\\n\\n\\t\\t\\t// Run the timer and safely remove it when done (allowing for external removal)\\n\\t\\t\\tif (!timer() && timers[i] === timer) {\\n\\t\\t\\t\\ttimers.splice(i--, 1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!timers.length) {\\n\\t\\t\\tjQuery.fx.stop();\\n\\t\\t}\\n\\t\\tfxNow = undefined;\\n\\t};\\n\\n\\tjQuery.fx.timer = function (timer) {\\n\\t\\tjQuery.timers.push(timer);\\n\\t\\tjQuery.fx.start();\\n\\t};\\n\\n\\tjQuery.fx.interval = 13;\\n\\tjQuery.fx.start = function () {\\n\\t\\tif (inProgress) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tinProgress = true;\\n\\t\\tschedule();\\n\\t};\\n\\n\\tjQuery.fx.stop = function () {\\n\\t\\tinProgress = null;\\n\\t};\\n\\n\\tjQuery.fx.speeds = {\\n\\t\\tslow: 600,\\n\\t\\tfast: 200,\\n\\n\\t\\t// Default speed\\n\\t\\t_default: 400\\n\\t};\\n\\n\\t// Based off of the plugin by Clint Helfers, with permission.\\n\\t// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\\n\\tjQuery.fn.delay = function (time, type) {\\n\\t\\ttime = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\\n\\t\\ttype = type || \\\"fx\\\";\\n\\n\\t\\treturn this.queue(type, function (next, hooks) {\\n\\t\\t\\tvar timeout = window.setTimeout(next, time);\\n\\t\\t\\thooks.stop = function () {\\n\\t\\t\\t\\twindow.clearTimeout(timeout);\\n\\t\\t\\t};\\n\\t\\t});\\n\\t};\\n\\n\\t(function () {\\n\\t\\tvar input = document.createElement(\\\"input\\\"),\\n\\t\\t    select = document.createElement(\\\"select\\\"),\\n\\t\\t    opt = select.appendChild(document.createElement(\\\"option\\\"));\\n\\n\\t\\tinput.type = \\\"checkbox\\\";\\n\\n\\t\\t// Support: Android <=4.3 only\\n\\t\\t// Default value for a checkbox should be \\\"on\\\"\\n\\t\\tsupport.checkOn = input.value !== \\\"\\\";\\n\\n\\t\\t// Support: IE <=11 only\\n\\t\\t// Must access selectedIndex to make default options select\\n\\t\\tsupport.optSelected = opt.selected;\\n\\n\\t\\t// Support: IE <=11 only\\n\\t\\t// An input loses its value after becoming a radio\\n\\t\\tinput = document.createElement(\\\"input\\\");\\n\\t\\tinput.value = \\\"t\\\";\\n\\t\\tinput.type = \\\"radio\\\";\\n\\t\\tsupport.radioValue = input.value === \\\"t\\\";\\n\\t})();\\n\\n\\tvar boolHook,\\n\\t    attrHandle = jQuery.expr.attrHandle;\\n\\n\\tjQuery.fn.extend({\\n\\t\\tattr: function attr(name, value) {\\n\\t\\t\\treturn access(this, jQuery.attr, name, value, arguments.length > 1);\\n\\t\\t},\\n\\n\\t\\tremoveAttr: function removeAttr(name) {\\n\\t\\t\\treturn this.each(function () {\\n\\t\\t\\t\\tjQuery.removeAttr(this, name);\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.extend({\\n\\t\\tattr: function attr(elem, name, value) {\\n\\t\\t\\tvar ret,\\n\\t\\t\\t    hooks,\\n\\t\\t\\t    nType = elem.nodeType;\\n\\n\\t\\t\\t// Don't get/set attributes on text, comment and attribute nodes\\n\\t\\t\\tif (nType === 3 || nType === 8 || nType === 2) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Fallback to prop when attributes are not supported\\n\\t\\t\\tif (typeof elem.getAttribute === \\\"undefined\\\") {\\n\\t\\t\\t\\treturn jQuery.prop(elem, name, value);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Attribute hooks are determined by the lowercase version\\n\\t\\t\\t// Grab necessary hook if one is defined\\n\\t\\t\\tif (nType !== 1 || !jQuery.isXMLDoc(elem)) {\\n\\t\\t\\t\\thooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (value !== undefined) {\\n\\t\\t\\t\\tif (value === null) {\\n\\t\\t\\t\\t\\tjQuery.removeAttr(elem, name);\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (hooks && \\\"set\\\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\\n\\t\\t\\t\\t\\treturn ret;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\telem.setAttribute(name, value + \\\"\\\");\\n\\t\\t\\t\\treturn value;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (hooks && \\\"get\\\" in hooks && (ret = hooks.get(elem, name)) !== null) {\\n\\t\\t\\t\\treturn ret;\\n\\t\\t\\t}\\n\\n\\t\\t\\tret = jQuery.find.attr(elem, name);\\n\\n\\t\\t\\t// Non-existent attributes return null, we normalize to undefined\\n\\t\\t\\treturn ret == null ? undefined : ret;\\n\\t\\t},\\n\\n\\t\\tattrHooks: {\\n\\t\\t\\ttype: {\\n\\t\\t\\t\\tset: function set(elem, value) {\\n\\t\\t\\t\\t\\tif (!support.radioValue && value === \\\"radio\\\" && nodeName(elem, \\\"input\\\")) {\\n\\t\\t\\t\\t\\t\\tvar val = elem.value;\\n\\t\\t\\t\\t\\t\\telem.setAttribute(\\\"type\\\", value);\\n\\t\\t\\t\\t\\t\\tif (val) {\\n\\t\\t\\t\\t\\t\\t\\telem.value = val;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\treturn value;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tremoveAttr: function removeAttr(elem, value) {\\n\\t\\t\\tvar name,\\n\\t\\t\\t    i = 0,\\n\\n\\n\\t\\t\\t// Attribute names can contain non-HTML whitespace characters\\n\\t\\t\\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\\n\\t\\t\\tattrNames = value && value.match(rnothtmlwhite);\\n\\n\\t\\t\\tif (attrNames && elem.nodeType === 1) {\\n\\t\\t\\t\\twhile (name = attrNames[i++]) {\\n\\t\\t\\t\\t\\telem.removeAttribute(name);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t// Hooks for boolean attributes\\n\\tboolHook = {\\n\\t\\tset: function set(elem, value, name) {\\n\\t\\t\\tif (value === false) {\\n\\n\\t\\t\\t\\t// Remove boolean attributes when set to false\\n\\t\\t\\t\\tjQuery.removeAttr(elem, name);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\telem.setAttribute(name, name);\\n\\t\\t\\t}\\n\\t\\t\\treturn name;\\n\\t\\t}\\n\\t};\\n\\n\\tjQuery.each(jQuery.expr.match.bool.source.match(/\\\\w+/g), function (i, name) {\\n\\t\\tvar getter = attrHandle[name] || jQuery.find.attr;\\n\\n\\t\\tattrHandle[name] = function (elem, name, isXML) {\\n\\t\\t\\tvar ret,\\n\\t\\t\\t    handle,\\n\\t\\t\\t    lowercaseName = name.toLowerCase();\\n\\n\\t\\t\\tif (!isXML) {\\n\\n\\t\\t\\t\\t// Avoid an infinite loop by temporarily removing this function from the getter\\n\\t\\t\\t\\thandle = attrHandle[lowercaseName];\\n\\t\\t\\t\\tattrHandle[lowercaseName] = ret;\\n\\t\\t\\t\\tret = getter(elem, name, isXML) != null ? lowercaseName : null;\\n\\t\\t\\t\\tattrHandle[lowercaseName] = handle;\\n\\t\\t\\t}\\n\\t\\t\\treturn ret;\\n\\t\\t};\\n\\t});\\n\\n\\tvar rfocusable = /^(?:input|select|textarea|button)$/i,\\n\\t    rclickable = /^(?:a|area)$/i;\\n\\n\\tjQuery.fn.extend({\\n\\t\\tprop: function prop(name, value) {\\n\\t\\t\\treturn access(this, jQuery.prop, name, value, arguments.length > 1);\\n\\t\\t},\\n\\n\\t\\tremoveProp: function removeProp(name) {\\n\\t\\t\\treturn this.each(function () {\\n\\t\\t\\t\\tdelete this[jQuery.propFix[name] || name];\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.extend({\\n\\t\\tprop: function prop(elem, name, value) {\\n\\t\\t\\tvar ret,\\n\\t\\t\\t    hooks,\\n\\t\\t\\t    nType = elem.nodeType;\\n\\n\\t\\t\\t// Don't get/set properties on text, comment and attribute nodes\\n\\t\\t\\tif (nType === 3 || nType === 8 || nType === 2) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (nType !== 1 || !jQuery.isXMLDoc(elem)) {\\n\\n\\t\\t\\t\\t// Fix name and attach hooks\\n\\t\\t\\t\\tname = jQuery.propFix[name] || name;\\n\\t\\t\\t\\thooks = jQuery.propHooks[name];\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (value !== undefined) {\\n\\t\\t\\t\\tif (hooks && \\\"set\\\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\\n\\t\\t\\t\\t\\treturn ret;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn elem[name] = value;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (hooks && \\\"get\\\" in hooks && (ret = hooks.get(elem, name)) !== null) {\\n\\t\\t\\t\\treturn ret;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn elem[name];\\n\\t\\t},\\n\\n\\t\\tpropHooks: {\\n\\t\\t\\ttabIndex: {\\n\\t\\t\\t\\tget: function get(elem) {\\n\\n\\t\\t\\t\\t\\t// Support: IE <=9 - 11 only\\n\\t\\t\\t\\t\\t// elem.tabIndex doesn't always return the\\n\\t\\t\\t\\t\\t// correct value when it hasn't been explicitly set\\n\\t\\t\\t\\t\\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\\n\\t\\t\\t\\t\\t// Use proper attribute retrieval(#12072)\\n\\t\\t\\t\\t\\tvar tabindex = jQuery.find.attr(elem, \\\"tabindex\\\");\\n\\n\\t\\t\\t\\t\\tif (tabindex) {\\n\\t\\t\\t\\t\\t\\treturn parseInt(tabindex, 10);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {\\n\\t\\t\\t\\t\\t\\treturn 0;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn -1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tpropFix: {\\n\\t\\t\\t\\\"for\\\": \\\"htmlFor\\\",\\n\\t\\t\\t\\\"class\\\": \\\"className\\\"\\n\\t\\t}\\n\\t});\\n\\n\\t// Support: IE <=11 only\\n\\t// Accessing the selectedIndex property\\n\\t// forces the browser to respect setting selected\\n\\t// on the option\\n\\t// The getter ensures a default option is selected\\n\\t// when in an optgroup\\n\\t// eslint rule \\\"no-unused-expressions\\\" is disabled for this code\\n\\t// since it considers such accessions noop\\n\\tif (!support.optSelected) {\\n\\t\\tjQuery.propHooks.selected = {\\n\\t\\t\\tget: function get(elem) {\\n\\n\\t\\t\\t\\t/* eslint no-unused-expressions: \\\"off\\\" */\\n\\n\\t\\t\\t\\tvar parent = elem.parentNode;\\n\\t\\t\\t\\tif (parent && parent.parentNode) {\\n\\t\\t\\t\\t\\tparent.parentNode.selectedIndex;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t},\\n\\t\\t\\tset: function set(elem) {\\n\\n\\t\\t\\t\\t/* eslint no-unused-expressions: \\\"off\\\" */\\n\\n\\t\\t\\t\\tvar parent = elem.parentNode;\\n\\t\\t\\t\\tif (parent) {\\n\\t\\t\\t\\t\\tparent.selectedIndex;\\n\\n\\t\\t\\t\\t\\tif (parent.parentNode) {\\n\\t\\t\\t\\t\\t\\tparent.parentNode.selectedIndex;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n\\n\\tjQuery.each([\\\"tabIndex\\\", \\\"readOnly\\\", \\\"maxLength\\\", \\\"cellSpacing\\\", \\\"cellPadding\\\", \\\"rowSpan\\\", \\\"colSpan\\\", \\\"useMap\\\", \\\"frameBorder\\\", \\\"contentEditable\\\"], function () {\\n\\t\\tjQuery.propFix[this.toLowerCase()] = this;\\n\\t});\\n\\n\\t// Strip and collapse whitespace according to HTML spec\\n\\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\\n\\tfunction stripAndCollapse(value) {\\n\\t\\tvar tokens = value.match(rnothtmlwhite) || [];\\n\\t\\treturn tokens.join(\\\" \\\");\\n\\t}\\n\\n\\tfunction getClass(elem) {\\n\\t\\treturn elem.getAttribute && elem.getAttribute(\\\"class\\\") || \\\"\\\";\\n\\t}\\n\\n\\tfunction classesToArray(value) {\\n\\t\\tif (Array.isArray(value)) {\\n\\t\\t\\treturn value;\\n\\t\\t}\\n\\t\\tif (typeof value === \\\"string\\\") {\\n\\t\\t\\treturn value.match(rnothtmlwhite) || [];\\n\\t\\t}\\n\\t\\treturn [];\\n\\t}\\n\\n\\tjQuery.fn.extend({\\n\\t\\taddClass: function addClass(value) {\\n\\t\\t\\tvar classes,\\n\\t\\t\\t    elem,\\n\\t\\t\\t    cur,\\n\\t\\t\\t    curValue,\\n\\t\\t\\t    clazz,\\n\\t\\t\\t    j,\\n\\t\\t\\t    finalValue,\\n\\t\\t\\t    i = 0;\\n\\n\\t\\t\\tif (isFunction(value)) {\\n\\t\\t\\t\\treturn this.each(function (j) {\\n\\t\\t\\t\\t\\tjQuery(this).addClass(value.call(this, j, getClass(this)));\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\tclasses = classesToArray(value);\\n\\n\\t\\t\\tif (classes.length) {\\n\\t\\t\\t\\twhile (elem = this[i++]) {\\n\\t\\t\\t\\t\\tcurValue = getClass(elem);\\n\\t\\t\\t\\t\\tcur = elem.nodeType === 1 && \\\" \\\" + stripAndCollapse(curValue) + \\\" \\\";\\n\\n\\t\\t\\t\\t\\tif (cur) {\\n\\t\\t\\t\\t\\t\\tj = 0;\\n\\t\\t\\t\\t\\t\\twhile (clazz = classes[j++]) {\\n\\t\\t\\t\\t\\t\\t\\tif (cur.indexOf(\\\" \\\" + clazz + \\\" \\\") < 0) {\\n\\t\\t\\t\\t\\t\\t\\t\\tcur += clazz + \\\" \\\";\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Only assign if different to avoid unneeded rendering.\\n\\t\\t\\t\\t\\t\\tfinalValue = stripAndCollapse(cur);\\n\\t\\t\\t\\t\\t\\tif (curValue !== finalValue) {\\n\\t\\t\\t\\t\\t\\t\\telem.setAttribute(\\\"class\\\", finalValue);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t},\\n\\n\\t\\tremoveClass: function removeClass(value) {\\n\\t\\t\\tvar classes,\\n\\t\\t\\t    elem,\\n\\t\\t\\t    cur,\\n\\t\\t\\t    curValue,\\n\\t\\t\\t    clazz,\\n\\t\\t\\t    j,\\n\\t\\t\\t    finalValue,\\n\\t\\t\\t    i = 0;\\n\\n\\t\\t\\tif (isFunction(value)) {\\n\\t\\t\\t\\treturn this.each(function (j) {\\n\\t\\t\\t\\t\\tjQuery(this).removeClass(value.call(this, j, getClass(this)));\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!arguments.length) {\\n\\t\\t\\t\\treturn this.attr(\\\"class\\\", \\\"\\\");\\n\\t\\t\\t}\\n\\n\\t\\t\\tclasses = classesToArray(value);\\n\\n\\t\\t\\tif (classes.length) {\\n\\t\\t\\t\\twhile (elem = this[i++]) {\\n\\t\\t\\t\\t\\tcurValue = getClass(elem);\\n\\n\\t\\t\\t\\t\\t// This expression is here for better compressibility (see addClass)\\n\\t\\t\\t\\t\\tcur = elem.nodeType === 1 && \\\" \\\" + stripAndCollapse(curValue) + \\\" \\\";\\n\\n\\t\\t\\t\\t\\tif (cur) {\\n\\t\\t\\t\\t\\t\\tj = 0;\\n\\t\\t\\t\\t\\t\\twhile (clazz = classes[j++]) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Remove *all* instances\\n\\t\\t\\t\\t\\t\\t\\twhile (cur.indexOf(\\\" \\\" + clazz + \\\" \\\") > -1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tcur = cur.replace(\\\" \\\" + clazz + \\\" \\\", \\\" \\\");\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Only assign if different to avoid unneeded rendering.\\n\\t\\t\\t\\t\\t\\tfinalValue = stripAndCollapse(cur);\\n\\t\\t\\t\\t\\t\\tif (curValue !== finalValue) {\\n\\t\\t\\t\\t\\t\\t\\telem.setAttribute(\\\"class\\\", finalValue);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t},\\n\\n\\t\\ttoggleClass: function toggleClass(value, stateVal) {\\n\\t\\t\\tvar type = typeof value === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(value),\\n\\t\\t\\t    isValidValue = type === \\\"string\\\" || Array.isArray(value);\\n\\n\\t\\t\\tif (typeof stateVal === \\\"boolean\\\" && isValidValue) {\\n\\t\\t\\t\\treturn stateVal ? this.addClass(value) : this.removeClass(value);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (isFunction(value)) {\\n\\t\\t\\t\\treturn this.each(function (i) {\\n\\t\\t\\t\\t\\tjQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.each(function () {\\n\\t\\t\\t\\tvar className, i, self, classNames;\\n\\n\\t\\t\\t\\tif (isValidValue) {\\n\\n\\t\\t\\t\\t\\t// Toggle individual class names\\n\\t\\t\\t\\t\\ti = 0;\\n\\t\\t\\t\\t\\tself = jQuery(this);\\n\\t\\t\\t\\t\\tclassNames = classesToArray(value);\\n\\n\\t\\t\\t\\t\\twhile (className = classNames[i++]) {\\n\\n\\t\\t\\t\\t\\t\\t// Check each className given, space separated list\\n\\t\\t\\t\\t\\t\\tif (self.hasClass(className)) {\\n\\t\\t\\t\\t\\t\\t\\tself.removeClass(className);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tself.addClass(className);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Toggle whole class name\\n\\t\\t\\t\\t} else if (value === undefined || type === \\\"boolean\\\") {\\n\\t\\t\\t\\t\\tclassName = getClass(this);\\n\\t\\t\\t\\t\\tif (className) {\\n\\n\\t\\t\\t\\t\\t\\t// Store className if set\\n\\t\\t\\t\\t\\t\\tdataPriv.set(this, \\\"__className__\\\", className);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// If the element has a class name or if we're passed `false`,\\n\\t\\t\\t\\t\\t// then remove the whole classname (if there was one, the above saved it).\\n\\t\\t\\t\\t\\t// Otherwise bring back whatever was previously saved (if anything),\\n\\t\\t\\t\\t\\t// falling back to the empty string if nothing was stored.\\n\\t\\t\\t\\t\\tif (this.setAttribute) {\\n\\t\\t\\t\\t\\t\\tthis.setAttribute(\\\"class\\\", className || value === false ? \\\"\\\" : dataPriv.get(this, \\\"__className__\\\") || \\\"\\\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t},\\n\\n\\t\\thasClass: function hasClass(selector) {\\n\\t\\t\\tvar className,\\n\\t\\t\\t    elem,\\n\\t\\t\\t    i = 0;\\n\\n\\t\\t\\tclassName = \\\" \\\" + selector + \\\" \\\";\\n\\t\\t\\twhile (elem = this[i++]) {\\n\\t\\t\\t\\tif (elem.nodeType === 1 && (\\\" \\\" + stripAndCollapse(getClass(elem)) + \\\" \\\").indexOf(className) > -1) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t});\\n\\n\\tvar rreturn = /\\\\r/g;\\n\\n\\tjQuery.fn.extend({\\n\\t\\tval: function val(value) {\\n\\t\\t\\tvar hooks,\\n\\t\\t\\t    ret,\\n\\t\\t\\t    valueIsFunction,\\n\\t\\t\\t    elem = this[0];\\n\\n\\t\\t\\tif (!arguments.length) {\\n\\t\\t\\t\\tif (elem) {\\n\\t\\t\\t\\t\\thooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\\n\\n\\t\\t\\t\\t\\tif (hooks && \\\"get\\\" in hooks && (ret = hooks.get(elem, \\\"value\\\")) !== undefined) {\\n\\t\\t\\t\\t\\t\\treturn ret;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tret = elem.value;\\n\\n\\t\\t\\t\\t\\t// Handle most common string cases\\n\\t\\t\\t\\t\\tif (typeof ret === \\\"string\\\") {\\n\\t\\t\\t\\t\\t\\treturn ret.replace(rreturn, \\\"\\\");\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Handle cases where value is null/undef or number\\n\\t\\t\\t\\t\\treturn ret == null ? \\\"\\\" : ret;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvalueIsFunction = isFunction(value);\\n\\n\\t\\t\\treturn this.each(function (i) {\\n\\t\\t\\t\\tvar val;\\n\\n\\t\\t\\t\\tif (this.nodeType !== 1) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (valueIsFunction) {\\n\\t\\t\\t\\t\\tval = value.call(this, i, jQuery(this).val());\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tval = value;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Treat null/undefined as \\\"\\\"; convert numbers to string\\n\\t\\t\\t\\tif (val == null) {\\n\\t\\t\\t\\t\\tval = \\\"\\\";\\n\\t\\t\\t\\t} else if (typeof val === \\\"number\\\") {\\n\\t\\t\\t\\t\\tval += \\\"\\\";\\n\\t\\t\\t\\t} else if (Array.isArray(val)) {\\n\\t\\t\\t\\t\\tval = jQuery.map(val, function (value) {\\n\\t\\t\\t\\t\\t\\treturn value == null ? \\\"\\\" : value + \\\"\\\";\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\thooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];\\n\\n\\t\\t\\t\\t// If set returns undefined, fall back to normal setting\\n\\t\\t\\t\\tif (!hooks || !(\\\"set\\\" in hooks) || hooks.set(this, val, \\\"value\\\") === undefined) {\\n\\t\\t\\t\\t\\tthis.value = val;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.extend({\\n\\t\\tvalHooks: {\\n\\t\\t\\toption: {\\n\\t\\t\\t\\tget: function get(elem) {\\n\\n\\t\\t\\t\\t\\tvar val = jQuery.find.attr(elem, \\\"value\\\");\\n\\t\\t\\t\\t\\treturn val != null ? val :\\n\\n\\t\\t\\t\\t\\t// Support: IE <=10 - 11 only\\n\\t\\t\\t\\t\\t// option.text throws exceptions (#14686, #14858)\\n\\t\\t\\t\\t\\t// Strip and collapse whitespace\\n\\t\\t\\t\\t\\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\\n\\t\\t\\t\\t\\tstripAndCollapse(jQuery.text(elem));\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tselect: {\\n\\t\\t\\t\\tget: function get(elem) {\\n\\t\\t\\t\\t\\tvar value,\\n\\t\\t\\t\\t\\t    option,\\n\\t\\t\\t\\t\\t    i,\\n\\t\\t\\t\\t\\t    options = elem.options,\\n\\t\\t\\t\\t\\t    index = elem.selectedIndex,\\n\\t\\t\\t\\t\\t    one = elem.type === \\\"select-one\\\",\\n\\t\\t\\t\\t\\t    values = one ? null : [],\\n\\t\\t\\t\\t\\t    max = one ? index + 1 : options.length;\\n\\n\\t\\t\\t\\t\\tif (index < 0) {\\n\\t\\t\\t\\t\\t\\ti = max;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\ti = one ? index : 0;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Loop through all the selected options\\n\\t\\t\\t\\t\\tfor (; i < max; i++) {\\n\\t\\t\\t\\t\\t\\toption = options[i];\\n\\n\\t\\t\\t\\t\\t\\t// Support: IE <=9 only\\n\\t\\t\\t\\t\\t\\t// IE8-9 doesn't update selected after form reset (#2551)\\n\\t\\t\\t\\t\\t\\tif ((option.selected || i === index) &&\\n\\n\\t\\t\\t\\t\\t\\t// Don't return options that are disabled or in a disabled optgroup\\n\\t\\t\\t\\t\\t\\t!option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, \\\"optgroup\\\"))) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Get the specific value for the option\\n\\t\\t\\t\\t\\t\\t\\tvalue = jQuery(option).val();\\n\\n\\t\\t\\t\\t\\t\\t\\t// We don't need an array for one selects\\n\\t\\t\\t\\t\\t\\t\\tif (one) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn value;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t// Multi-Selects return an array\\n\\t\\t\\t\\t\\t\\t\\tvalues.push(value);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn values;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tset: function set(elem, value) {\\n\\t\\t\\t\\t\\tvar optionSet,\\n\\t\\t\\t\\t\\t    option,\\n\\t\\t\\t\\t\\t    options = elem.options,\\n\\t\\t\\t\\t\\t    values = jQuery.makeArray(value),\\n\\t\\t\\t\\t\\t    i = options.length;\\n\\n\\t\\t\\t\\t\\twhile (i--) {\\n\\t\\t\\t\\t\\t\\toption = options[i];\\n\\n\\t\\t\\t\\t\\t\\t/* eslint-disable no-cond-assign */\\n\\n\\t\\t\\t\\t\\t\\tif (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {\\n\\t\\t\\t\\t\\t\\t\\toptionSet = true;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t/* eslint-enable no-cond-assign */\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Force browsers to behave consistently when non-matching value is set\\n\\t\\t\\t\\t\\tif (!optionSet) {\\n\\t\\t\\t\\t\\t\\telem.selectedIndex = -1;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn values;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t// Radios and checkboxes getter/setter\\n\\tjQuery.each([\\\"radio\\\", \\\"checkbox\\\"], function () {\\n\\t\\tjQuery.valHooks[this] = {\\n\\t\\t\\tset: function set(elem, value) {\\n\\t\\t\\t\\tif (Array.isArray(value)) {\\n\\t\\t\\t\\t\\treturn elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tif (!support.checkOn) {\\n\\t\\t\\tjQuery.valHooks[this].get = function (elem) {\\n\\t\\t\\t\\treturn elem.getAttribute(\\\"value\\\") === null ? \\\"on\\\" : elem.value;\\n\\t\\t\\t};\\n\\t\\t}\\n\\t});\\n\\n\\t// Return jQuery for attributes-only inclusion\\n\\n\\n\\tsupport.focusin = \\\"onfocusin\\\" in window;\\n\\n\\tvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\\n\\t    stopPropagationCallback = function stopPropagationCallback(e) {\\n\\t\\te.stopPropagation();\\n\\t};\\n\\n\\tjQuery.extend(jQuery.event, {\\n\\n\\t\\ttrigger: function trigger(event, data, elem, onlyHandlers) {\\n\\n\\t\\t\\tvar i,\\n\\t\\t\\t    cur,\\n\\t\\t\\t    tmp,\\n\\t\\t\\t    bubbleType,\\n\\t\\t\\t    ontype,\\n\\t\\t\\t    handle,\\n\\t\\t\\t    special,\\n\\t\\t\\t    lastElement,\\n\\t\\t\\t    eventPath = [elem || document],\\n\\t\\t\\t    type = hasOwn.call(event, \\\"type\\\") ? event.type : event,\\n\\t\\t\\t    namespaces = hasOwn.call(event, \\\"namespace\\\") ? event.namespace.split(\\\".\\\") : [];\\n\\n\\t\\t\\tcur = lastElement = tmp = elem = elem || document;\\n\\n\\t\\t\\t// Don't do events on text and comment nodes\\n\\t\\t\\tif (elem.nodeType === 3 || elem.nodeType === 8) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\\n\\t\\t\\tif (rfocusMorph.test(type + jQuery.event.triggered)) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (type.indexOf(\\\".\\\") > -1) {\\n\\n\\t\\t\\t\\t// Namespaced trigger; create a regexp to match event type in handle()\\n\\t\\t\\t\\tnamespaces = type.split(\\\".\\\");\\n\\t\\t\\t\\ttype = namespaces.shift();\\n\\t\\t\\t\\tnamespaces.sort();\\n\\t\\t\\t}\\n\\t\\t\\tontype = type.indexOf(\\\":\\\") < 0 && \\\"on\\\" + type;\\n\\n\\t\\t\\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\\n\\t\\t\\tevent = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(event)) === \\\"object\\\" && event);\\n\\n\\t\\t\\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\\n\\t\\t\\tevent.isTrigger = onlyHandlers ? 2 : 3;\\n\\t\\t\\tevent.namespace = namespaces.join(\\\".\\\");\\n\\t\\t\\tevent.rnamespace = event.namespace ? new RegExp(\\\"(^|\\\\\\\\.)\\\" + namespaces.join(\\\"\\\\\\\\.(?:.*\\\\\\\\.|)\\\") + \\\"(\\\\\\\\.|$)\\\") : null;\\n\\n\\t\\t\\t// Clean up the event in case it is being reused\\n\\t\\t\\tevent.result = undefined;\\n\\t\\t\\tif (!event.target) {\\n\\t\\t\\t\\tevent.target = elem;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Clone any incoming data and prepend the event, creating the handler arg list\\n\\t\\t\\tdata = data == null ? [event] : jQuery.makeArray(data, [event]);\\n\\n\\t\\t\\t// Allow special events to draw outside the lines\\n\\t\\t\\tspecial = jQuery.event.special[type] || {};\\n\\t\\t\\tif (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Determine event propagation path in advance, per W3C events spec (#9951)\\n\\t\\t\\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\\n\\t\\t\\tif (!onlyHandlers && !special.noBubble && !isWindow(elem)) {\\n\\n\\t\\t\\t\\tbubbleType = special.delegateType || type;\\n\\t\\t\\t\\tif (!rfocusMorph.test(bubbleType + type)) {\\n\\t\\t\\t\\t\\tcur = cur.parentNode;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfor (; cur; cur = cur.parentNode) {\\n\\t\\t\\t\\t\\teventPath.push(cur);\\n\\t\\t\\t\\t\\ttmp = cur;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\\n\\t\\t\\t\\tif (tmp === (elem.ownerDocument || document)) {\\n\\t\\t\\t\\t\\teventPath.push(tmp.defaultView || tmp.parentWindow || window);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Fire handlers on the event path\\n\\t\\t\\ti = 0;\\n\\t\\t\\twhile ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\\n\\t\\t\\t\\tlastElement = cur;\\n\\t\\t\\t\\tevent.type = i > 1 ? bubbleType : special.bindType || type;\\n\\n\\t\\t\\t\\t// jQuery handler\\n\\t\\t\\t\\thandle = (dataPriv.get(cur, \\\"events\\\") || {})[event.type] && dataPriv.get(cur, \\\"handle\\\");\\n\\t\\t\\t\\tif (handle) {\\n\\t\\t\\t\\t\\thandle.apply(cur, data);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Native handler\\n\\t\\t\\t\\thandle = ontype && cur[ontype];\\n\\t\\t\\t\\tif (handle && handle.apply && acceptData(cur)) {\\n\\t\\t\\t\\t\\tevent.result = handle.apply(cur, data);\\n\\t\\t\\t\\t\\tif (event.result === false) {\\n\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tevent.type = type;\\n\\n\\t\\t\\t// If nobody prevented the default action, do it now\\n\\t\\t\\tif (!onlyHandlers && !event.isDefaultPrevented()) {\\n\\n\\t\\t\\t\\tif ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {\\n\\n\\t\\t\\t\\t\\t// Call a native DOM method on the target with the same name as the event.\\n\\t\\t\\t\\t\\t// Don't do default actions on window, that's where global variables be (#6170)\\n\\t\\t\\t\\t\\tif (ontype && isFunction(elem[type]) && !isWindow(elem)) {\\n\\n\\t\\t\\t\\t\\t\\t// Don't re-trigger an onFOO event when we call its FOO() method\\n\\t\\t\\t\\t\\t\\ttmp = elem[ontype];\\n\\n\\t\\t\\t\\t\\t\\tif (tmp) {\\n\\t\\t\\t\\t\\t\\t\\telem[ontype] = null;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Prevent re-triggering of the same event, since we already bubbled it above\\n\\t\\t\\t\\t\\t\\tjQuery.event.triggered = type;\\n\\n\\t\\t\\t\\t\\t\\tif (event.isPropagationStopped()) {\\n\\t\\t\\t\\t\\t\\t\\tlastElement.addEventListener(type, stopPropagationCallback);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\telem[type]();\\n\\n\\t\\t\\t\\t\\t\\tif (event.isPropagationStopped()) {\\n\\t\\t\\t\\t\\t\\t\\tlastElement.removeEventListener(type, stopPropagationCallback);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tjQuery.event.triggered = undefined;\\n\\n\\t\\t\\t\\t\\t\\tif (tmp) {\\n\\t\\t\\t\\t\\t\\t\\telem[ontype] = tmp;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn event.result;\\n\\t\\t},\\n\\n\\t\\t// Piggyback on a donor event to simulate a different one\\n\\t\\t// Used only for `focus(in | out)` events\\n\\t\\tsimulate: function simulate(type, elem, event) {\\n\\t\\t\\tvar e = jQuery.extend(new jQuery.Event(), event, {\\n\\t\\t\\t\\ttype: type,\\n\\t\\t\\t\\tisSimulated: true\\n\\t\\t\\t});\\n\\n\\t\\t\\tjQuery.event.trigger(e, null, elem);\\n\\t\\t}\\n\\n\\t});\\n\\n\\tjQuery.fn.extend({\\n\\n\\t\\ttrigger: function trigger(type, data) {\\n\\t\\t\\treturn this.each(function () {\\n\\t\\t\\t\\tjQuery.event.trigger(type, data, this);\\n\\t\\t\\t});\\n\\t\\t},\\n\\t\\ttriggerHandler: function triggerHandler(type, data) {\\n\\t\\t\\tvar elem = this[0];\\n\\t\\t\\tif (elem) {\\n\\t\\t\\t\\treturn jQuery.event.trigger(type, data, elem, true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t// Support: Firefox <=44\\n\\t// Firefox doesn't have focus(in | out) events\\n\\t// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\\n\\t//\\n\\t// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\\n\\t// focus(in | out) events fire after focus & blur events,\\n\\t// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\\n\\t// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\\n\\tif (!support.focusin) {\\n\\t\\tjQuery.each({ focus: \\\"focusin\\\", blur: \\\"focusout\\\" }, function (orig, fix) {\\n\\n\\t\\t\\t// Attach a single capturing handler on the document while someone wants focusin/focusout\\n\\t\\t\\tvar handler = function handler(event) {\\n\\t\\t\\t\\tjQuery.event.simulate(fix, event.target, jQuery.event.fix(event));\\n\\t\\t\\t};\\n\\n\\t\\t\\tjQuery.event.special[fix] = {\\n\\t\\t\\t\\tsetup: function setup() {\\n\\t\\t\\t\\t\\tvar doc = this.ownerDocument || this,\\n\\t\\t\\t\\t\\t    attaches = dataPriv.access(doc, fix);\\n\\n\\t\\t\\t\\t\\tif (!attaches) {\\n\\t\\t\\t\\t\\t\\tdoc.addEventListener(orig, handler, true);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdataPriv.access(doc, fix, (attaches || 0) + 1);\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tteardown: function teardown() {\\n\\t\\t\\t\\t\\tvar doc = this.ownerDocument || this,\\n\\t\\t\\t\\t\\t    attaches = dataPriv.access(doc, fix) - 1;\\n\\n\\t\\t\\t\\t\\tif (!attaches) {\\n\\t\\t\\t\\t\\t\\tdoc.removeEventListener(orig, handler, true);\\n\\t\\t\\t\\t\\t\\tdataPriv.remove(doc, fix);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tdataPriv.access(doc, fix, attaches);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t});\\n\\t}\\n\\tvar location = window.location;\\n\\n\\tvar nonce = Date.now();\\n\\n\\tvar rquery = /\\\\?/;\\n\\n\\t// Cross-browser xml parsing\\n\\tjQuery.parseXML = function (data) {\\n\\t\\tvar xml;\\n\\t\\tif (!data || typeof data !== \\\"string\\\") {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\t// Support: IE 9 - 11 only\\n\\t\\t// IE throws on parseFromString with invalid input.\\n\\t\\ttry {\\n\\t\\t\\txml = new window.DOMParser().parseFromString(data, \\\"text/xml\\\");\\n\\t\\t} catch (e) {\\n\\t\\t\\txml = undefined;\\n\\t\\t}\\n\\n\\t\\tif (!xml || xml.getElementsByTagName(\\\"parsererror\\\").length) {\\n\\t\\t\\tjQuery.error(\\\"Invalid XML: \\\" + data);\\n\\t\\t}\\n\\t\\treturn xml;\\n\\t};\\n\\n\\tvar rbracket = /\\\\[\\\\]$/,\\n\\t    rCRLF = /\\\\r?\\\\n/g,\\n\\t    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\\n\\t    rsubmittable = /^(?:input|select|textarea|keygen)/i;\\n\\n\\tfunction buildParams(prefix, obj, traditional, add) {\\n\\t\\tvar name;\\n\\n\\t\\tif (Array.isArray(obj)) {\\n\\n\\t\\t\\t// Serialize array item.\\n\\t\\t\\tjQuery.each(obj, function (i, v) {\\n\\t\\t\\t\\tif (traditional || rbracket.test(prefix)) {\\n\\n\\t\\t\\t\\t\\t// Treat each array item as a scalar.\\n\\t\\t\\t\\t\\tadd(prefix, v);\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t// Item is non-scalar (array or object), encode its numeric index.\\n\\t\\t\\t\\t\\tbuildParams(prefix + \\\"[\\\" + ((typeof v === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(v)) === \\\"object\\\" && v != null ? i : \\\"\\\") + \\\"]\\\", v, traditional, add);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t} else if (!traditional && toType(obj) === \\\"object\\\") {\\n\\n\\t\\t\\t// Serialize object item.\\n\\t\\t\\tfor (name in obj) {\\n\\t\\t\\t\\tbuildParams(prefix + \\\"[\\\" + name + \\\"]\\\", obj[name], traditional, add);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\n\\t\\t\\t// Serialize scalar item.\\n\\t\\t\\tadd(prefix, obj);\\n\\t\\t}\\n\\t}\\n\\n\\t// Serialize an array of form elements or a set of\\n\\t// key/values into a query string\\n\\tjQuery.param = function (a, traditional) {\\n\\t\\tvar prefix,\\n\\t\\t    s = [],\\n\\t\\t    add = function add(key, valueOrFunction) {\\n\\n\\t\\t\\t// If value is a function, invoke it and use its return value\\n\\t\\t\\tvar value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;\\n\\n\\t\\t\\ts[s.length] = encodeURIComponent(key) + \\\"=\\\" + encodeURIComponent(value == null ? \\\"\\\" : value);\\n\\t\\t};\\n\\n\\t\\t// If an array was passed in, assume that it is an array of form elements.\\n\\t\\tif (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\\n\\n\\t\\t\\t// Serialize the form elements\\n\\t\\t\\tjQuery.each(a, function () {\\n\\t\\t\\t\\tadd(this.name, this.value);\\n\\t\\t\\t});\\n\\t\\t} else {\\n\\n\\t\\t\\t// If traditional, encode the \\\"old\\\" way (the way 1.3.2 or older\\n\\t\\t\\t// did it), otherwise encode params recursively.\\n\\t\\t\\tfor (prefix in a) {\\n\\t\\t\\t\\tbuildParams(prefix, a[prefix], traditional, add);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Return the resulting serialization\\n\\t\\treturn s.join(\\\"&\\\");\\n\\t};\\n\\n\\tjQuery.fn.extend({\\n\\t\\tserialize: function serialize() {\\n\\t\\t\\treturn jQuery.param(this.serializeArray());\\n\\t\\t},\\n\\t\\tserializeArray: function serializeArray() {\\n\\t\\t\\treturn this.map(function () {\\n\\n\\t\\t\\t\\t// Can add propHook for \\\"elements\\\" to filter or add form elements\\n\\t\\t\\t\\tvar elements = jQuery.prop(this, \\\"elements\\\");\\n\\t\\t\\t\\treturn elements ? jQuery.makeArray(elements) : this;\\n\\t\\t\\t}).filter(function () {\\n\\t\\t\\t\\tvar type = this.type;\\n\\n\\t\\t\\t\\t// Use .is( \\\":disabled\\\" ) so that fieldset[disabled] works\\n\\t\\t\\t\\treturn this.name && !jQuery(this).is(\\\":disabled\\\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\\n\\t\\t\\t}).map(function (i, elem) {\\n\\t\\t\\t\\tvar val = jQuery(this).val();\\n\\n\\t\\t\\t\\tif (val == null) {\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (Array.isArray(val)) {\\n\\t\\t\\t\\t\\treturn jQuery.map(val, function (val) {\\n\\t\\t\\t\\t\\t\\treturn { name: elem.name, value: val.replace(rCRLF, \\\"\\\\r\\\\n\\\") };\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn { name: elem.name, value: val.replace(rCRLF, \\\"\\\\r\\\\n\\\") };\\n\\t\\t\\t}).get();\\n\\t\\t}\\n\\t});\\n\\n\\tvar r20 = /%20/g,\\n\\t    rhash = /#.*$/,\\n\\t    rantiCache = /([?&])_=[^&]*/,\\n\\t    rheaders = /^(.*?):[ \\\\t]*([^\\\\r\\\\n]*)$/mg,\\n\\n\\n\\t// #7653, #8125, #8152: local protocol detection\\n\\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\\n\\t    rnoContent = /^(?:GET|HEAD)$/,\\n\\t    rprotocol = /^\\\\/\\\\//,\\n\\n\\n\\t/* Prefilters\\n  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\\n  * 2) These are called:\\n  *    - BEFORE asking for a transport\\n  *    - AFTER param serialization (s.data is a string if s.processData is true)\\n  * 3) key is the dataType\\n  * 4) the catchall symbol \\\"*\\\" can be used\\n  * 5) execution will start with transport dataType and THEN continue down to \\\"*\\\" if needed\\n  */\\n\\tprefilters = {},\\n\\n\\n\\t/* Transports bindings\\n  * 1) key is the dataType\\n  * 2) the catchall symbol \\\"*\\\" can be used\\n  * 3) selection will start with transport dataType and THEN go to \\\"*\\\" if needed\\n  */\\n\\ttransports = {},\\n\\n\\n\\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\\n\\tallTypes = \\\"*/\\\".concat(\\\"*\\\"),\\n\\n\\n\\t// Anchor tag for parsing the document origin\\n\\toriginAnchor = document.createElement(\\\"a\\\");\\n\\toriginAnchor.href = location.href;\\n\\n\\t// Base \\\"constructor\\\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\\n\\tfunction addToPrefiltersOrTransports(structure) {\\n\\n\\t\\t// dataTypeExpression is optional and defaults to \\\"*\\\"\\n\\t\\treturn function (dataTypeExpression, func) {\\n\\n\\t\\t\\tif (typeof dataTypeExpression !== \\\"string\\\") {\\n\\t\\t\\t\\tfunc = dataTypeExpression;\\n\\t\\t\\t\\tdataTypeExpression = \\\"*\\\";\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar dataType,\\n\\t\\t\\t    i = 0,\\n\\t\\t\\t    dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];\\n\\n\\t\\t\\tif (isFunction(func)) {\\n\\n\\t\\t\\t\\t// For each dataType in the dataTypeExpression\\n\\t\\t\\t\\twhile (dataType = dataTypes[i++]) {\\n\\n\\t\\t\\t\\t\\t// Prepend if requested\\n\\t\\t\\t\\t\\tif (dataType[0] === \\\"+\\\") {\\n\\t\\t\\t\\t\\t\\tdataType = dataType.slice(1) || \\\"*\\\";\\n\\t\\t\\t\\t\\t\\t(structure[dataType] = structure[dataType] || []).unshift(func);\\n\\n\\t\\t\\t\\t\\t\\t// Otherwise append\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t(structure[dataType] = structure[dataType] || []).push(func);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t}\\n\\n\\t// Base inspection function for prefilters and transports\\n\\tfunction inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\\n\\n\\t\\tvar inspected = {},\\n\\t\\t    seekingTransport = structure === transports;\\n\\n\\t\\tfunction inspect(dataType) {\\n\\t\\t\\tvar selected;\\n\\t\\t\\tinspected[dataType] = true;\\n\\t\\t\\tjQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\\n\\t\\t\\t\\tvar dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\\n\\t\\t\\t\\tif (typeof dataTypeOrTransport === \\\"string\\\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\\n\\n\\t\\t\\t\\t\\toptions.dataTypes.unshift(dataTypeOrTransport);\\n\\t\\t\\t\\t\\tinspect(dataTypeOrTransport);\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t} else if (seekingTransport) {\\n\\t\\t\\t\\t\\treturn !(selected = dataTypeOrTransport);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\treturn selected;\\n\\t\\t}\\n\\n\\t\\treturn inspect(options.dataTypes[0]) || !inspected[\\\"*\\\"] && inspect(\\\"*\\\");\\n\\t}\\n\\n\\t// A special extend for ajax options\\n\\t// that takes \\\"flat\\\" options (not to be deep extended)\\n\\t// Fixes #9887\\n\\tfunction ajaxExtend(target, src) {\\n\\t\\tvar key,\\n\\t\\t    deep,\\n\\t\\t    flatOptions = jQuery.ajaxSettings.flatOptions || {};\\n\\n\\t\\tfor (key in src) {\\n\\t\\t\\tif (src[key] !== undefined) {\\n\\t\\t\\t\\t(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (deep) {\\n\\t\\t\\tjQuery.extend(true, target, deep);\\n\\t\\t}\\n\\n\\t\\treturn target;\\n\\t}\\n\\n\\t/* Handles responses to an ajax request:\\n  * - finds the right dataType (mediates between content-type and expected dataType)\\n  * - returns the corresponding response\\n  */\\n\\tfunction ajaxHandleResponses(s, jqXHR, responses) {\\n\\n\\t\\tvar ct,\\n\\t\\t    type,\\n\\t\\t    finalDataType,\\n\\t\\t    firstDataType,\\n\\t\\t    contents = s.contents,\\n\\t\\t    dataTypes = s.dataTypes;\\n\\n\\t\\t// Remove auto dataType and get content-type in the process\\n\\t\\twhile (dataTypes[0] === \\\"*\\\") {\\n\\t\\t\\tdataTypes.shift();\\n\\t\\t\\tif (ct === undefined) {\\n\\t\\t\\t\\tct = s.mimeType || jqXHR.getResponseHeader(\\\"Content-Type\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Check if we're dealing with a known content-type\\n\\t\\tif (ct) {\\n\\t\\t\\tfor (type in contents) {\\n\\t\\t\\t\\tif (contents[type] && contents[type].test(ct)) {\\n\\t\\t\\t\\t\\tdataTypes.unshift(type);\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Check to see if we have a response for the expected dataType\\n\\t\\tif (dataTypes[0] in responses) {\\n\\t\\t\\tfinalDataType = dataTypes[0];\\n\\t\\t} else {\\n\\n\\t\\t\\t// Try convertible dataTypes\\n\\t\\t\\tfor (type in responses) {\\n\\t\\t\\t\\tif (!dataTypes[0] || s.converters[type + \\\" \\\" + dataTypes[0]]) {\\n\\t\\t\\t\\t\\tfinalDataType = type;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (!firstDataType) {\\n\\t\\t\\t\\t\\tfirstDataType = type;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Or just use first one\\n\\t\\t\\tfinalDataType = finalDataType || firstDataType;\\n\\t\\t}\\n\\n\\t\\t// If we found a dataType\\n\\t\\t// We add the dataType to the list if needed\\n\\t\\t// and return the corresponding response\\n\\t\\tif (finalDataType) {\\n\\t\\t\\tif (finalDataType !== dataTypes[0]) {\\n\\t\\t\\t\\tdataTypes.unshift(finalDataType);\\n\\t\\t\\t}\\n\\t\\t\\treturn responses[finalDataType];\\n\\t\\t}\\n\\t}\\n\\n\\t/* Chain conversions given the request and the original response\\n  * Also sets the responseXXX fields on the jqXHR instance\\n  */\\n\\tfunction ajaxConvert(s, response, jqXHR, isSuccess) {\\n\\t\\tvar conv2,\\n\\t\\t    current,\\n\\t\\t    conv,\\n\\t\\t    tmp,\\n\\t\\t    prev,\\n\\t\\t    converters = {},\\n\\n\\n\\t\\t// Work with a copy of dataTypes in case we need to modify it for conversion\\n\\t\\tdataTypes = s.dataTypes.slice();\\n\\n\\t\\t// Create converters map with lowercased keys\\n\\t\\tif (dataTypes[1]) {\\n\\t\\t\\tfor (conv in s.converters) {\\n\\t\\t\\t\\tconverters[conv.toLowerCase()] = s.converters[conv];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tcurrent = dataTypes.shift();\\n\\n\\t\\t// Convert to each sequential dataType\\n\\t\\twhile (current) {\\n\\n\\t\\t\\tif (s.responseFields[current]) {\\n\\t\\t\\t\\tjqXHR[s.responseFields[current]] = response;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Apply the dataFilter if provided\\n\\t\\t\\tif (!prev && isSuccess && s.dataFilter) {\\n\\t\\t\\t\\tresponse = s.dataFilter(response, s.dataType);\\n\\t\\t\\t}\\n\\n\\t\\t\\tprev = current;\\n\\t\\t\\tcurrent = dataTypes.shift();\\n\\n\\t\\t\\tif (current) {\\n\\n\\t\\t\\t\\t// There's only work to do if current dataType is non-auto\\n\\t\\t\\t\\tif (current === \\\"*\\\") {\\n\\n\\t\\t\\t\\t\\tcurrent = prev;\\n\\n\\t\\t\\t\\t\\t// Convert response if prev dataType is non-auto and differs from current\\n\\t\\t\\t\\t} else if (prev !== \\\"*\\\" && prev !== current) {\\n\\n\\t\\t\\t\\t\\t// Seek a direct converter\\n\\t\\t\\t\\t\\tconv = converters[prev + \\\" \\\" + current] || converters[\\\"* \\\" + current];\\n\\n\\t\\t\\t\\t\\t// If none found, seek a pair\\n\\t\\t\\t\\t\\tif (!conv) {\\n\\t\\t\\t\\t\\t\\tfor (conv2 in converters) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// If conv2 outputs current\\n\\t\\t\\t\\t\\t\\t\\ttmp = conv2.split(\\\" \\\");\\n\\t\\t\\t\\t\\t\\t\\tif (tmp[1] === current) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// If prev can be converted to accepted input\\n\\t\\t\\t\\t\\t\\t\\t\\tconv = converters[prev + \\\" \\\" + tmp[0]] || converters[\\\"* \\\" + tmp[0]];\\n\\t\\t\\t\\t\\t\\t\\t\\tif (conv) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Condense equivalence converters\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (conv === true) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconv = converters[conv2];\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Otherwise, insert the intermediate dataType\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t} else if (converters[conv2] !== true) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcurrent = tmp[0];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdataTypes.unshift(tmp[1]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Apply converter (if not an equivalence)\\n\\t\\t\\t\\t\\tif (conv !== true) {\\n\\n\\t\\t\\t\\t\\t\\t// Unless errors are allowed to bubble, catch and return them\\n\\t\\t\\t\\t\\t\\tif (conv && s.throws) {\\n\\t\\t\\t\\t\\t\\t\\tresponse = conv(response);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\t\\tresponse = conv(response);\\n\\t\\t\\t\\t\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tstate: \\\"parsererror\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\terror: conv ? e : \\\"No conversion from \\\" + prev + \\\" to \\\" + current\\n\\t\\t\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn { state: \\\"success\\\", data: response };\\n\\t}\\n\\n\\tjQuery.extend({\\n\\n\\t\\t// Counter for holding the number of active queries\\n\\t\\tactive: 0,\\n\\n\\t\\t// Last-Modified header cache for next request\\n\\t\\tlastModified: {},\\n\\t\\tetag: {},\\n\\n\\t\\tajaxSettings: {\\n\\t\\t\\turl: location.href,\\n\\t\\t\\ttype: \\\"GET\\\",\\n\\t\\t\\tisLocal: rlocalProtocol.test(location.protocol),\\n\\t\\t\\tglobal: true,\\n\\t\\t\\tprocessData: true,\\n\\t\\t\\tasync: true,\\n\\t\\t\\tcontentType: \\\"application/x-www-form-urlencoded; charset=UTF-8\\\",\\n\\n\\t\\t\\t/*\\n   timeout: 0,\\n   data: null,\\n   dataType: null,\\n   username: null,\\n   password: null,\\n   cache: null,\\n   throws: false,\\n   traditional: false,\\n   headers: {},\\n   */\\n\\n\\t\\t\\taccepts: {\\n\\t\\t\\t\\t\\\"*\\\": allTypes,\\n\\t\\t\\t\\ttext: \\\"text/plain\\\",\\n\\t\\t\\t\\thtml: \\\"text/html\\\",\\n\\t\\t\\t\\txml: \\\"application/xml, text/xml\\\",\\n\\t\\t\\t\\tjson: \\\"application/json, text/javascript\\\"\\n\\t\\t\\t},\\n\\n\\t\\t\\tcontents: {\\n\\t\\t\\t\\txml: /\\\\bxml\\\\b/,\\n\\t\\t\\t\\thtml: /\\\\bhtml/,\\n\\t\\t\\t\\tjson: /\\\\bjson\\\\b/\\n\\t\\t\\t},\\n\\n\\t\\t\\tresponseFields: {\\n\\t\\t\\t\\txml: \\\"responseXML\\\",\\n\\t\\t\\t\\ttext: \\\"responseText\\\",\\n\\t\\t\\t\\tjson: \\\"responseJSON\\\"\\n\\t\\t\\t},\\n\\n\\t\\t\\t// Data converters\\n\\t\\t\\t// Keys separate source (or catchall \\\"*\\\") and destination types with a single space\\n\\t\\t\\tconverters: {\\n\\n\\t\\t\\t\\t// Convert anything to text\\n\\t\\t\\t\\t\\\"* text\\\": String,\\n\\n\\t\\t\\t\\t// Text to html (true = no transformation)\\n\\t\\t\\t\\t\\\"text html\\\": true,\\n\\n\\t\\t\\t\\t// Evaluate text as a json expression\\n\\t\\t\\t\\t\\\"text json\\\": JSON.parse,\\n\\n\\t\\t\\t\\t// Parse text as xml\\n\\t\\t\\t\\t\\\"text xml\\\": jQuery.parseXML\\n\\t\\t\\t},\\n\\n\\t\\t\\t// For options that shouldn't be deep extended:\\n\\t\\t\\t// you can add your own custom options here if\\n\\t\\t\\t// and when you create one that shouldn't be\\n\\t\\t\\t// deep extended (see ajaxExtend)\\n\\t\\t\\tflatOptions: {\\n\\t\\t\\t\\turl: true,\\n\\t\\t\\t\\tcontext: true\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\t// Creates a full fledged settings object into target\\n\\t\\t// with both ajaxSettings and settings fields.\\n\\t\\t// If target is omitted, writes into ajaxSettings.\\n\\t\\tajaxSetup: function ajaxSetup(target, settings) {\\n\\t\\t\\treturn settings ?\\n\\n\\t\\t\\t// Building a settings object\\n\\t\\t\\tajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :\\n\\n\\t\\t\\t// Extending ajaxSettings\\n\\t\\t\\tajaxExtend(jQuery.ajaxSettings, target);\\n\\t\\t},\\n\\n\\t\\tajaxPrefilter: addToPrefiltersOrTransports(prefilters),\\n\\t\\tajaxTransport: addToPrefiltersOrTransports(transports),\\n\\n\\t\\t// Main method\\n\\t\\tajax: function ajax(url, options) {\\n\\n\\t\\t\\t// If url is an object, simulate pre-1.5 signature\\n\\t\\t\\tif ((typeof url === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(url)) === \\\"object\\\") {\\n\\t\\t\\t\\toptions = url;\\n\\t\\t\\t\\turl = undefined;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Force options to be an object\\n\\t\\t\\toptions = options || {};\\n\\n\\t\\t\\tvar transport,\\n\\n\\n\\t\\t\\t// URL without anti-cache param\\n\\t\\t\\tcacheURL,\\n\\n\\n\\t\\t\\t// Response headers\\n\\t\\t\\tresponseHeadersString,\\n\\t\\t\\t    responseHeaders,\\n\\n\\n\\t\\t\\t// timeout handle\\n\\t\\t\\ttimeoutTimer,\\n\\n\\n\\t\\t\\t// Url cleanup var\\n\\t\\t\\turlAnchor,\\n\\n\\n\\t\\t\\t// Request state (becomes false upon send and true upon completion)\\n\\t\\t\\tcompleted,\\n\\n\\n\\t\\t\\t// To know if global events are to be dispatched\\n\\t\\t\\tfireGlobals,\\n\\n\\n\\t\\t\\t// Loop variable\\n\\t\\t\\ti,\\n\\n\\n\\t\\t\\t// uncached part of the url\\n\\t\\t\\tuncached,\\n\\n\\n\\t\\t\\t// Create the final options object\\n\\t\\t\\ts = jQuery.ajaxSetup({}, options),\\n\\n\\n\\t\\t\\t// Callbacks context\\n\\t\\t\\tcallbackContext = s.context || s,\\n\\n\\n\\t\\t\\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\\n\\t\\t\\tglobalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\\n\\n\\n\\t\\t\\t// Deferreds\\n\\t\\t\\tdeferred = jQuery.Deferred(),\\n\\t\\t\\t    completeDeferred = jQuery.Callbacks(\\\"once memory\\\"),\\n\\n\\n\\t\\t\\t// Status-dependent callbacks\\n\\t\\t\\t_statusCode = s.statusCode || {},\\n\\n\\n\\t\\t\\t// Headers (they are sent all at once)\\n\\t\\t\\trequestHeaders = {},\\n\\t\\t\\t    requestHeadersNames = {},\\n\\n\\n\\t\\t\\t// Default abort message\\n\\t\\t\\tstrAbort = \\\"canceled\\\",\\n\\n\\n\\t\\t\\t// Fake xhr\\n\\t\\t\\tjqXHR = {\\n\\t\\t\\t\\treadyState: 0,\\n\\n\\t\\t\\t\\t// Builds headers hashtable if needed\\n\\t\\t\\t\\tgetResponseHeader: function getResponseHeader(key) {\\n\\t\\t\\t\\t\\tvar match;\\n\\t\\t\\t\\t\\tif (completed) {\\n\\t\\t\\t\\t\\t\\tif (!responseHeaders) {\\n\\t\\t\\t\\t\\t\\t\\tresponseHeaders = {};\\n\\t\\t\\t\\t\\t\\t\\twhile (match = rheaders.exec(responseHeadersString)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tresponseHeaders[match[1].toLowerCase()] = match[2];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tmatch = responseHeaders[key.toLowerCase()];\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn match == null ? null : match;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Raw string\\n\\t\\t\\t\\tgetAllResponseHeaders: function getAllResponseHeaders() {\\n\\t\\t\\t\\t\\treturn completed ? responseHeadersString : null;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Caches the header\\n\\t\\t\\t\\tsetRequestHeader: function setRequestHeader(name, value) {\\n\\t\\t\\t\\t\\tif (completed == null) {\\n\\t\\t\\t\\t\\t\\tname = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;\\n\\t\\t\\t\\t\\t\\trequestHeaders[name] = value;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Overrides response content-type header\\n\\t\\t\\t\\toverrideMimeType: function overrideMimeType(type) {\\n\\t\\t\\t\\t\\tif (completed == null) {\\n\\t\\t\\t\\t\\t\\ts.mimeType = type;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Status-dependent callbacks\\n\\t\\t\\t\\tstatusCode: function statusCode(map) {\\n\\t\\t\\t\\t\\tvar code;\\n\\t\\t\\t\\t\\tif (map) {\\n\\t\\t\\t\\t\\t\\tif (completed) {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Execute the appropriate callbacks\\n\\t\\t\\t\\t\\t\\t\\tjqXHR.always(map[jqXHR.status]);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Lazy-add the new callbacks in a way that preserves old ones\\n\\t\\t\\t\\t\\t\\t\\tfor (code in map) {\\n\\t\\t\\t\\t\\t\\t\\t\\t_statusCode[code] = [_statusCode[code], map[code]];\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\t// Cancel the request\\n\\t\\t\\t\\tabort: function abort(statusText) {\\n\\t\\t\\t\\t\\tvar finalText = statusText || strAbort;\\n\\t\\t\\t\\t\\tif (transport) {\\n\\t\\t\\t\\t\\t\\ttransport.abort(finalText);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdone(0, finalText);\\n\\t\\t\\t\\t\\treturn this;\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\t\\t\\t// Attach deferreds\\n\\t\\t\\tdeferred.promise(jqXHR);\\n\\n\\t\\t\\t// Add protocol if not provided (prefilters might expect it)\\n\\t\\t\\t// Handle falsy url in the settings object (#10093: consistency with old signature)\\n\\t\\t\\t// We also use the url parameter if available\\n\\t\\t\\ts.url = ((url || s.url || location.href) + \\\"\\\").replace(rprotocol, location.protocol + \\\"//\\\");\\n\\n\\t\\t\\t// Alias method option to type as per ticket #12004\\n\\t\\t\\ts.type = options.method || options.type || s.method || s.type;\\n\\n\\t\\t\\t// Extract dataTypes list\\n\\t\\t\\ts.dataTypes = (s.dataType || \\\"*\\\").toLowerCase().match(rnothtmlwhite) || [\\\"\\\"];\\n\\n\\t\\t\\t// A cross-domain request is in order when the origin doesn't match the current origin.\\n\\t\\t\\tif (s.crossDomain == null) {\\n\\t\\t\\t\\turlAnchor = document.createElement(\\\"a\\\");\\n\\n\\t\\t\\t\\t// Support: IE <=8 - 11, Edge 12 - 15\\n\\t\\t\\t\\t// IE throws exception on accessing the href property if url is malformed,\\n\\t\\t\\t\\t// e.g. http://example.com:80x/\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\turlAnchor.href = s.url;\\n\\n\\t\\t\\t\\t\\t// Support: IE <=8 - 11 only\\n\\t\\t\\t\\t\\t// Anchor's host property isn't correctly set when s.url is relative\\n\\t\\t\\t\\t\\turlAnchor.href = urlAnchor.href;\\n\\t\\t\\t\\t\\ts.crossDomain = originAnchor.protocol + \\\"//\\\" + originAnchor.host !== urlAnchor.protocol + \\\"//\\\" + urlAnchor.host;\\n\\t\\t\\t\\t} catch (e) {\\n\\n\\t\\t\\t\\t\\t// If there is an error parsing the URL, assume it is crossDomain,\\n\\t\\t\\t\\t\\t// it can be rejected by the transport if it is invalid\\n\\t\\t\\t\\t\\ts.crossDomain = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Convert data if not already a string\\n\\t\\t\\tif (s.data && s.processData && typeof s.data !== \\\"string\\\") {\\n\\t\\t\\t\\ts.data = jQuery.param(s.data, s.traditional);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Apply prefilters\\n\\t\\t\\tinspectPrefiltersOrTransports(prefilters, s, options, jqXHR);\\n\\n\\t\\t\\t// If request was aborted inside a prefilter, stop there\\n\\t\\t\\tif (completed) {\\n\\t\\t\\t\\treturn jqXHR;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// We can fire global events as of now if asked to\\n\\t\\t\\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\\n\\t\\t\\tfireGlobals = jQuery.event && s.global;\\n\\n\\t\\t\\t// Watch for a new set of requests\\n\\t\\t\\tif (fireGlobals && jQuery.active++ === 0) {\\n\\t\\t\\t\\tjQuery.event.trigger(\\\"ajaxStart\\\");\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Uppercase the type\\n\\t\\t\\ts.type = s.type.toUpperCase();\\n\\n\\t\\t\\t// Determine if request has content\\n\\t\\t\\ts.hasContent = !rnoContent.test(s.type);\\n\\n\\t\\t\\t// Save the URL in case we're toying with the If-Modified-Since\\n\\t\\t\\t// and/or If-None-Match header later on\\n\\t\\t\\t// Remove hash to simplify url manipulation\\n\\t\\t\\tcacheURL = s.url.replace(rhash, \\\"\\\");\\n\\n\\t\\t\\t// More options handling for requests with no content\\n\\t\\t\\tif (!s.hasContent) {\\n\\n\\t\\t\\t\\t// Remember the hash so we can put it back\\n\\t\\t\\t\\tuncached = s.url.slice(cacheURL.length);\\n\\n\\t\\t\\t\\t// If data is available and should be processed, append data to url\\n\\t\\t\\t\\tif (s.data && (s.processData || typeof s.data === \\\"string\\\")) {\\n\\t\\t\\t\\t\\tcacheURL += (rquery.test(cacheURL) ? \\\"&\\\" : \\\"?\\\") + s.data;\\n\\n\\t\\t\\t\\t\\t// #9682: remove data so that it's not used in an eventual retry\\n\\t\\t\\t\\t\\tdelete s.data;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Add or update anti-cache param if needed\\n\\t\\t\\t\\tif (s.cache === false) {\\n\\t\\t\\t\\t\\tcacheURL = cacheURL.replace(rantiCache, \\\"$1\\\");\\n\\t\\t\\t\\t\\tuncached = (rquery.test(cacheURL) ? \\\"&\\\" : \\\"?\\\") + \\\"_=\\\" + nonce++ + uncached;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\\n\\t\\t\\t\\ts.url = cacheURL + uncached;\\n\\n\\t\\t\\t\\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\\n\\t\\t\\t} else if (s.data && s.processData && (s.contentType || \\\"\\\").indexOf(\\\"application/x-www-form-urlencoded\\\") === 0) {\\n\\t\\t\\t\\ts.data = s.data.replace(r20, \\\"+\\\");\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\\n\\t\\t\\tif (s.ifModified) {\\n\\t\\t\\t\\tif (jQuery.lastModified[cacheURL]) {\\n\\t\\t\\t\\t\\tjqXHR.setRequestHeader(\\\"If-Modified-Since\\\", jQuery.lastModified[cacheURL]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (jQuery.etag[cacheURL]) {\\n\\t\\t\\t\\t\\tjqXHR.setRequestHeader(\\\"If-None-Match\\\", jQuery.etag[cacheURL]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Set the correct header, if data is being sent\\n\\t\\t\\tif (s.data && s.hasContent && s.contentType !== false || options.contentType) {\\n\\t\\t\\t\\tjqXHR.setRequestHeader(\\\"Content-Type\\\", s.contentType);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Set the Accepts header for the server, depending on the dataType\\n\\t\\t\\tjqXHR.setRequestHeader(\\\"Accept\\\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \\\"*\\\" ? \\\", \\\" + allTypes + \\\"; q=0.01\\\" : \\\"\\\") : s.accepts[\\\"*\\\"]);\\n\\n\\t\\t\\t// Check for headers option\\n\\t\\t\\tfor (i in s.headers) {\\n\\t\\t\\t\\tjqXHR.setRequestHeader(i, s.headers[i]);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Allow custom headers/mimetypes and early abort\\n\\t\\t\\tif (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\\n\\n\\t\\t\\t\\t// Abort if not done already and return\\n\\t\\t\\t\\treturn jqXHR.abort();\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Aborting is no longer a cancellation\\n\\t\\t\\tstrAbort = \\\"abort\\\";\\n\\n\\t\\t\\t// Install callbacks on deferreds\\n\\t\\t\\tcompleteDeferred.add(s.complete);\\n\\t\\t\\tjqXHR.done(s.success);\\n\\t\\t\\tjqXHR.fail(s.error);\\n\\n\\t\\t\\t// Get transport\\n\\t\\t\\ttransport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);\\n\\n\\t\\t\\t// If no transport, we auto-abort\\n\\t\\t\\tif (!transport) {\\n\\t\\t\\t\\tdone(-1, \\\"No Transport\\\");\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tjqXHR.readyState = 1;\\n\\n\\t\\t\\t\\t// Send global event\\n\\t\\t\\t\\tif (fireGlobals) {\\n\\t\\t\\t\\t\\tglobalEventContext.trigger(\\\"ajaxSend\\\", [jqXHR, s]);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// If request was aborted inside ajaxSend, stop there\\n\\t\\t\\t\\tif (completed) {\\n\\t\\t\\t\\t\\treturn jqXHR;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Timeout\\n\\t\\t\\t\\tif (s.async && s.timeout > 0) {\\n\\t\\t\\t\\t\\ttimeoutTimer = window.setTimeout(function () {\\n\\t\\t\\t\\t\\t\\tjqXHR.abort(\\\"timeout\\\");\\n\\t\\t\\t\\t\\t}, s.timeout);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tcompleted = false;\\n\\t\\t\\t\\t\\ttransport.send(requestHeaders, done);\\n\\t\\t\\t\\t} catch (e) {\\n\\n\\t\\t\\t\\t\\t// Rethrow post-completion exceptions\\n\\t\\t\\t\\t\\tif (completed) {\\n\\t\\t\\t\\t\\t\\tthrow e;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Propagate others as results\\n\\t\\t\\t\\t\\tdone(-1, e);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Callback for when everything is done\\n\\t\\t\\tfunction done(status, nativeStatusText, responses, headers) {\\n\\t\\t\\t\\tvar isSuccess,\\n\\t\\t\\t\\t    success,\\n\\t\\t\\t\\t    error,\\n\\t\\t\\t\\t    response,\\n\\t\\t\\t\\t    modified,\\n\\t\\t\\t\\t    statusText = nativeStatusText;\\n\\n\\t\\t\\t\\t// Ignore repeat invocations\\n\\t\\t\\t\\tif (completed) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tcompleted = true;\\n\\n\\t\\t\\t\\t// Clear timeout if it exists\\n\\t\\t\\t\\tif (timeoutTimer) {\\n\\t\\t\\t\\t\\twindow.clearTimeout(timeoutTimer);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Dereference transport for early garbage collection\\n\\t\\t\\t\\t// (no matter how long the jqXHR object will be used)\\n\\t\\t\\t\\ttransport = undefined;\\n\\n\\t\\t\\t\\t// Cache response headers\\n\\t\\t\\t\\tresponseHeadersString = headers || \\\"\\\";\\n\\n\\t\\t\\t\\t// Set readyState\\n\\t\\t\\t\\tjqXHR.readyState = status > 0 ? 4 : 0;\\n\\n\\t\\t\\t\\t// Determine if successful\\n\\t\\t\\t\\tisSuccess = status >= 200 && status < 300 || status === 304;\\n\\n\\t\\t\\t\\t// Get response data\\n\\t\\t\\t\\tif (responses) {\\n\\t\\t\\t\\t\\tresponse = ajaxHandleResponses(s, jqXHR, responses);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Convert no matter what (that way responseXXX fields are always set)\\n\\t\\t\\t\\tresponse = ajaxConvert(s, response, jqXHR, isSuccess);\\n\\n\\t\\t\\t\\t// If successful, handle type chaining\\n\\t\\t\\t\\tif (isSuccess) {\\n\\n\\t\\t\\t\\t\\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\\n\\t\\t\\t\\t\\tif (s.ifModified) {\\n\\t\\t\\t\\t\\t\\tmodified = jqXHR.getResponseHeader(\\\"Last-Modified\\\");\\n\\t\\t\\t\\t\\t\\tif (modified) {\\n\\t\\t\\t\\t\\t\\t\\tjQuery.lastModified[cacheURL] = modified;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tmodified = jqXHR.getResponseHeader(\\\"etag\\\");\\n\\t\\t\\t\\t\\t\\tif (modified) {\\n\\t\\t\\t\\t\\t\\t\\tjQuery.etag[cacheURL] = modified;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// if no content\\n\\t\\t\\t\\t\\tif (status === 204 || s.type === \\\"HEAD\\\") {\\n\\t\\t\\t\\t\\t\\tstatusText = \\\"nocontent\\\";\\n\\n\\t\\t\\t\\t\\t\\t// if not modified\\n\\t\\t\\t\\t\\t} else if (status === 304) {\\n\\t\\t\\t\\t\\t\\tstatusText = \\\"notmodified\\\";\\n\\n\\t\\t\\t\\t\\t\\t// If we have data, let's convert it\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tstatusText = response.state;\\n\\t\\t\\t\\t\\t\\tsuccess = response.data;\\n\\t\\t\\t\\t\\t\\terror = response.error;\\n\\t\\t\\t\\t\\t\\tisSuccess = !error;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\t// Extract error from statusText and normalize for non-aborts\\n\\t\\t\\t\\t\\terror = statusText;\\n\\t\\t\\t\\t\\tif (status || !statusText) {\\n\\t\\t\\t\\t\\t\\tstatusText = \\\"error\\\";\\n\\t\\t\\t\\t\\t\\tif (status < 0) {\\n\\t\\t\\t\\t\\t\\t\\tstatus = 0;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Set data for the fake xhr object\\n\\t\\t\\t\\tjqXHR.status = status;\\n\\t\\t\\t\\tjqXHR.statusText = (nativeStatusText || statusText) + \\\"\\\";\\n\\n\\t\\t\\t\\t// Success/Error\\n\\t\\t\\t\\tif (isSuccess) {\\n\\t\\t\\t\\t\\tdeferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tdeferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Status-dependent callbacks\\n\\t\\t\\t\\tjqXHR.statusCode(_statusCode);\\n\\t\\t\\t\\t_statusCode = undefined;\\n\\n\\t\\t\\t\\tif (fireGlobals) {\\n\\t\\t\\t\\t\\tglobalEventContext.trigger(isSuccess ? \\\"ajaxSuccess\\\" : \\\"ajaxError\\\", [jqXHR, s, isSuccess ? success : error]);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Complete\\n\\t\\t\\t\\tcompleteDeferred.fireWith(callbackContext, [jqXHR, statusText]);\\n\\n\\t\\t\\t\\tif (fireGlobals) {\\n\\t\\t\\t\\t\\tglobalEventContext.trigger(\\\"ajaxComplete\\\", [jqXHR, s]);\\n\\n\\t\\t\\t\\t\\t// Handle the global AJAX counter\\n\\t\\t\\t\\t\\tif (! --jQuery.active) {\\n\\t\\t\\t\\t\\t\\tjQuery.event.trigger(\\\"ajaxStop\\\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn jqXHR;\\n\\t\\t},\\n\\n\\t\\tgetJSON: function getJSON(url, data, callback) {\\n\\t\\t\\treturn jQuery.get(url, data, callback, \\\"json\\\");\\n\\t\\t},\\n\\n\\t\\tgetScript: function getScript(url, callback) {\\n\\t\\t\\treturn jQuery.get(url, undefined, callback, \\\"script\\\");\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.each([\\\"get\\\", \\\"post\\\"], function (i, method) {\\n\\t\\tjQuery[method] = function (url, data, callback, type) {\\n\\n\\t\\t\\t// Shift arguments if data argument was omitted\\n\\t\\t\\tif (isFunction(data)) {\\n\\t\\t\\t\\ttype = type || callback;\\n\\t\\t\\t\\tcallback = data;\\n\\t\\t\\t\\tdata = undefined;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// The url can be an options object (which then must have .url)\\n\\t\\t\\treturn jQuery.ajax(jQuery.extend({\\n\\t\\t\\t\\turl: url,\\n\\t\\t\\t\\ttype: method,\\n\\t\\t\\t\\tdataType: type,\\n\\t\\t\\t\\tdata: data,\\n\\t\\t\\t\\tsuccess: callback\\n\\t\\t\\t}, jQuery.isPlainObject(url) && url));\\n\\t\\t};\\n\\t});\\n\\n\\tjQuery._evalUrl = function (url) {\\n\\t\\treturn jQuery.ajax({\\n\\t\\t\\turl: url,\\n\\n\\t\\t\\t// Make this explicit, since user can override this through ajaxSetup (#11264)\\n\\t\\t\\ttype: \\\"GET\\\",\\n\\t\\t\\tdataType: \\\"script\\\",\\n\\t\\t\\tcache: true,\\n\\t\\t\\tasync: false,\\n\\t\\t\\tglobal: false,\\n\\t\\t\\t\\\"throws\\\": true\\n\\t\\t});\\n\\t};\\n\\n\\tjQuery.fn.extend({\\n\\t\\twrapAll: function wrapAll(html) {\\n\\t\\t\\tvar wrap;\\n\\n\\t\\t\\tif (this[0]) {\\n\\t\\t\\t\\tif (isFunction(html)) {\\n\\t\\t\\t\\t\\thtml = html.call(this[0]);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// The elements to wrap the target around\\n\\t\\t\\t\\twrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\\n\\n\\t\\t\\t\\tif (this[0].parentNode) {\\n\\t\\t\\t\\t\\twrap.insertBefore(this[0]);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\twrap.map(function () {\\n\\t\\t\\t\\t\\tvar elem = this;\\n\\n\\t\\t\\t\\t\\twhile (elem.firstElementChild) {\\n\\t\\t\\t\\t\\t\\telem = elem.firstElementChild;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn elem;\\n\\t\\t\\t\\t}).append(this);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this;\\n\\t\\t},\\n\\n\\t\\twrapInner: function wrapInner(html) {\\n\\t\\t\\tif (isFunction(html)) {\\n\\t\\t\\t\\treturn this.each(function (i) {\\n\\t\\t\\t\\t\\tjQuery(this).wrapInner(html.call(this, i));\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn this.each(function () {\\n\\t\\t\\t\\tvar self = jQuery(this),\\n\\t\\t\\t\\t    contents = self.contents();\\n\\n\\t\\t\\t\\tif (contents.length) {\\n\\t\\t\\t\\t\\tcontents.wrapAll(html);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tself.append(html);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t},\\n\\n\\t\\twrap: function wrap(html) {\\n\\t\\t\\tvar htmlIsFunction = isFunction(html);\\n\\n\\t\\t\\treturn this.each(function (i) {\\n\\t\\t\\t\\tjQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);\\n\\t\\t\\t});\\n\\t\\t},\\n\\n\\t\\tunwrap: function unwrap(selector) {\\n\\t\\t\\tthis.parent(selector).not(\\\"body\\\").each(function () {\\n\\t\\t\\t\\tjQuery(this).replaceWith(this.childNodes);\\n\\t\\t\\t});\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.expr.pseudos.hidden = function (elem) {\\n\\t\\treturn !jQuery.expr.pseudos.visible(elem);\\n\\t};\\n\\tjQuery.expr.pseudos.visible = function (elem) {\\n\\t\\treturn !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\\n\\t};\\n\\n\\tjQuery.ajaxSettings.xhr = function () {\\n\\t\\ttry {\\n\\t\\t\\treturn new window.XMLHttpRequest();\\n\\t\\t} catch (e) {}\\n\\t};\\n\\n\\tvar xhrSuccessStatus = {\\n\\n\\t\\t// File protocol always yields status code 0, assume 200\\n\\t\\t0: 200,\\n\\n\\t\\t// Support: IE <=9 only\\n\\t\\t// #1450: sometimes IE returns 1223 when it should be 204\\n\\t\\t1223: 204\\n\\t},\\n\\t    xhrSupported = jQuery.ajaxSettings.xhr();\\n\\n\\tsupport.cors = !!xhrSupported && \\\"withCredentials\\\" in xhrSupported;\\n\\tsupport.ajax = xhrSupported = !!xhrSupported;\\n\\n\\tjQuery.ajaxTransport(function (options) {\\n\\t\\tvar _callback, errorCallback;\\n\\n\\t\\t// Cross domain only allowed if supported through XMLHttpRequest\\n\\t\\tif (support.cors || xhrSupported && !options.crossDomain) {\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tsend: function send(headers, complete) {\\n\\t\\t\\t\\t\\tvar i,\\n\\t\\t\\t\\t\\t    xhr = options.xhr();\\n\\n\\t\\t\\t\\t\\txhr.open(options.type, options.url, options.async, options.username, options.password);\\n\\n\\t\\t\\t\\t\\t// Apply custom fields if provided\\n\\t\\t\\t\\t\\tif (options.xhrFields) {\\n\\t\\t\\t\\t\\t\\tfor (i in options.xhrFields) {\\n\\t\\t\\t\\t\\t\\t\\txhr[i] = options.xhrFields[i];\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Override mime type if needed\\n\\t\\t\\t\\t\\tif (options.mimeType && xhr.overrideMimeType) {\\n\\t\\t\\t\\t\\t\\txhr.overrideMimeType(options.mimeType);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// X-Requested-With header\\n\\t\\t\\t\\t\\t// For cross-domain requests, seeing as conditions for a preflight are\\n\\t\\t\\t\\t\\t// akin to a jigsaw puzzle, we simply never set it to be sure.\\n\\t\\t\\t\\t\\t// (it can always be set on a per-request basis or even using ajaxSetup)\\n\\t\\t\\t\\t\\t// For same-domain requests, won't change header if already provided.\\n\\t\\t\\t\\t\\tif (!options.crossDomain && !headers[\\\"X-Requested-With\\\"]) {\\n\\t\\t\\t\\t\\t\\theaders[\\\"X-Requested-With\\\"] = \\\"XMLHttpRequest\\\";\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Set headers\\n\\t\\t\\t\\t\\tfor (i in headers) {\\n\\t\\t\\t\\t\\t\\txhr.setRequestHeader(i, headers[i]);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Callback\\n\\t\\t\\t\\t\\t_callback = function callback(type) {\\n\\t\\t\\t\\t\\t\\treturn function () {\\n\\t\\t\\t\\t\\t\\t\\tif (_callback) {\\n\\t\\t\\t\\t\\t\\t\\t\\t_callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tif (type === \\\"abort\\\") {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\txhr.abort();\\n\\t\\t\\t\\t\\t\\t\\t\\t} else if (type === \\\"error\\\") {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Support: IE <=9 only\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// On a manual native abort, IE9 throws\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// errors on any property access that is not readyState\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (typeof xhr.status !== \\\"number\\\") {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcomplete(0, \\\"error\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcomplete(\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// File: protocol always yields status 0; see #8605, #14207\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\txhr.status, xhr.statusText);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcomplete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// Support: IE <=9 only\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// IE9 has no XHR2 but throws on binary (trac-11426)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t// For XHR2 non-text, let the caller handle it (gh-2498)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(xhr.responseType || \\\"text\\\") !== \\\"text\\\" || typeof xhr.responseText !== \\\"string\\\" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t\\t// Listen to events\\n\\t\\t\\t\\t\\txhr.onload = _callback();\\n\\t\\t\\t\\t\\terrorCallback = xhr.onerror = xhr.ontimeout = _callback(\\\"error\\\");\\n\\n\\t\\t\\t\\t\\t// Support: IE 9 only\\n\\t\\t\\t\\t\\t// Use onreadystatechange to replace onabort\\n\\t\\t\\t\\t\\t// to handle uncaught aborts\\n\\t\\t\\t\\t\\tif (xhr.onabort !== undefined) {\\n\\t\\t\\t\\t\\t\\txhr.onabort = errorCallback;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\txhr.onreadystatechange = function () {\\n\\n\\t\\t\\t\\t\\t\\t\\t// Check readyState before timeout as it changes\\n\\t\\t\\t\\t\\t\\t\\tif (xhr.readyState === 4) {\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t// Allow onerror to be called first,\\n\\t\\t\\t\\t\\t\\t\\t\\t// but that will not handle a native abort\\n\\t\\t\\t\\t\\t\\t\\t\\t// Also, save errorCallback to a variable\\n\\t\\t\\t\\t\\t\\t\\t\\t// as xhr.onerror cannot be accessed\\n\\t\\t\\t\\t\\t\\t\\t\\twindow.setTimeout(function () {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (_callback) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\terrorCallback();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Create the abort callback\\n\\t\\t\\t\\t\\t_callback = _callback(\\\"abort\\\");\\n\\n\\t\\t\\t\\t\\ttry {\\n\\n\\t\\t\\t\\t\\t\\t// Do send the request (this may raise an exception)\\n\\t\\t\\t\\t\\t\\txhr.send(options.hasContent && options.data || null);\\n\\t\\t\\t\\t\\t} catch (e) {\\n\\n\\t\\t\\t\\t\\t\\t// #14683: Only rethrow if this hasn't been notified as an error yet\\n\\t\\t\\t\\t\\t\\tif (_callback) {\\n\\t\\t\\t\\t\\t\\t\\tthrow e;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t},\\n\\n\\t\\t\\t\\tabort: function abort() {\\n\\t\\t\\t\\t\\tif (_callback) {\\n\\t\\t\\t\\t\\t\\t_callback();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t}\\n\\t});\\n\\n\\t// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\\n\\tjQuery.ajaxPrefilter(function (s) {\\n\\t\\tif (s.crossDomain) {\\n\\t\\t\\ts.contents.script = false;\\n\\t\\t}\\n\\t});\\n\\n\\t// Install script dataType\\n\\tjQuery.ajaxSetup({\\n\\t\\taccepts: {\\n\\t\\t\\tscript: \\\"text/javascript, application/javascript, \\\" + \\\"application/ecmascript, application/x-ecmascript\\\"\\n\\t\\t},\\n\\t\\tcontents: {\\n\\t\\t\\tscript: /\\\\b(?:java|ecma)script\\\\b/\\n\\t\\t},\\n\\t\\tconverters: {\\n\\t\\t\\t\\\"text script\\\": function textScript(text) {\\n\\t\\t\\t\\tjQuery.globalEval(text);\\n\\t\\t\\t\\treturn text;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\t// Handle cache's special case and crossDomain\\n\\tjQuery.ajaxPrefilter(\\\"script\\\", function (s) {\\n\\t\\tif (s.cache === undefined) {\\n\\t\\t\\ts.cache = false;\\n\\t\\t}\\n\\t\\tif (s.crossDomain) {\\n\\t\\t\\ts.type = \\\"GET\\\";\\n\\t\\t}\\n\\t});\\n\\n\\t// Bind script tag hack transport\\n\\tjQuery.ajaxTransport(\\\"script\\\", function (s) {\\n\\n\\t\\t// This transport only deals with cross domain requests\\n\\t\\tif (s.crossDomain) {\\n\\t\\t\\tvar script, _callback2;\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tsend: function send(_, complete) {\\n\\t\\t\\t\\t\\tscript = jQuery(\\\"<script>\\\").prop({\\n\\t\\t\\t\\t\\t\\tcharset: s.scriptCharset,\\n\\t\\t\\t\\t\\t\\tsrc: s.url\\n\\t\\t\\t\\t\\t}).on(\\\"load error\\\", _callback2 = function callback(evt) {\\n\\t\\t\\t\\t\\t\\tscript.remove();\\n\\t\\t\\t\\t\\t\\t_callback2 = null;\\n\\t\\t\\t\\t\\t\\tif (evt) {\\n\\t\\t\\t\\t\\t\\t\\tcomplete(evt.type === \\\"error\\\" ? 404 : 200, evt.type);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\t\\t// Use native DOM manipulation to avoid our domManip AJAX trickery\\n\\t\\t\\t\\t\\tdocument.head.appendChild(script[0]);\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tabort: function abort() {\\n\\t\\t\\t\\t\\tif (_callback2) {\\n\\t\\t\\t\\t\\t\\t_callback2();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t}\\n\\t});\\n\\n\\tvar oldCallbacks = [],\\n\\t    rjsonp = /(=)\\\\?(?=&|$)|\\\\?\\\\?/;\\n\\n\\t// Default jsonp settings\\n\\tjQuery.ajaxSetup({\\n\\t\\tjsonp: \\\"callback\\\",\\n\\t\\tjsonpCallback: function jsonpCallback() {\\n\\t\\t\\tvar callback = oldCallbacks.pop() || jQuery.expando + \\\"_\\\" + nonce++;\\n\\t\\t\\tthis[callback] = true;\\n\\t\\t\\treturn callback;\\n\\t\\t}\\n\\t});\\n\\n\\t// Detect, normalize options and install callbacks for jsonp requests\\n\\tjQuery.ajaxPrefilter(\\\"json jsonp\\\", function (s, originalSettings, jqXHR) {\\n\\n\\t\\tvar callbackName,\\n\\t\\t    overwritten,\\n\\t\\t    responseContainer,\\n\\t\\t    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \\\"url\\\" : typeof s.data === \\\"string\\\" && (s.contentType || \\\"\\\").indexOf(\\\"application/x-www-form-urlencoded\\\") === 0 && rjsonp.test(s.data) && \\\"data\\\");\\n\\n\\t\\t// Handle iff the expected data type is \\\"jsonp\\\" or we have a parameter to set\\n\\t\\tif (jsonProp || s.dataTypes[0] === \\\"jsonp\\\") {\\n\\n\\t\\t\\t// Get callback name, remembering preexisting value associated with it\\n\\t\\t\\tcallbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;\\n\\n\\t\\t\\t// Insert callback into url or form data\\n\\t\\t\\tif (jsonProp) {\\n\\t\\t\\t\\ts[jsonProp] = s[jsonProp].replace(rjsonp, \\\"$1\\\" + callbackName);\\n\\t\\t\\t} else if (s.jsonp !== false) {\\n\\t\\t\\t\\ts.url += (rquery.test(s.url) ? \\\"&\\\" : \\\"?\\\") + s.jsonp + \\\"=\\\" + callbackName;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Use data converter to retrieve json after script execution\\n\\t\\t\\ts.converters[\\\"script json\\\"] = function () {\\n\\t\\t\\t\\tif (!responseContainer) {\\n\\t\\t\\t\\t\\tjQuery.error(callbackName + \\\" was not called\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn responseContainer[0];\\n\\t\\t\\t};\\n\\n\\t\\t\\t// Force json dataType\\n\\t\\t\\ts.dataTypes[0] = \\\"json\\\";\\n\\n\\t\\t\\t// Install callback\\n\\t\\t\\toverwritten = window[callbackName];\\n\\t\\t\\twindow[callbackName] = function () {\\n\\t\\t\\t\\tresponseContainer = arguments;\\n\\t\\t\\t};\\n\\n\\t\\t\\t// Clean-up function (fires after converters)\\n\\t\\t\\tjqXHR.always(function () {\\n\\n\\t\\t\\t\\t// If previous value didn't exist - remove it\\n\\t\\t\\t\\tif (overwritten === undefined) {\\n\\t\\t\\t\\t\\tjQuery(window).removeProp(callbackName);\\n\\n\\t\\t\\t\\t\\t// Otherwise restore preexisting value\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\twindow[callbackName] = overwritten;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Save back as free\\n\\t\\t\\t\\tif (s[callbackName]) {\\n\\n\\t\\t\\t\\t\\t// Make sure that re-using the options doesn't screw things around\\n\\t\\t\\t\\t\\ts.jsonpCallback = originalSettings.jsonpCallback;\\n\\n\\t\\t\\t\\t\\t// Save the callback name for future use\\n\\t\\t\\t\\t\\toldCallbacks.push(callbackName);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Call if it was a function and we have a response\\n\\t\\t\\t\\tif (responseContainer && isFunction(overwritten)) {\\n\\t\\t\\t\\t\\toverwritten(responseContainer[0]);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tresponseContainer = overwritten = undefined;\\n\\t\\t\\t});\\n\\n\\t\\t\\t// Delegate to script\\n\\t\\t\\treturn \\\"script\\\";\\n\\t\\t}\\n\\t});\\n\\n\\t// Support: Safari 8 only\\n\\t// In Safari 8 documents created via document.implementation.createHTMLDocument\\n\\t// collapse sibling forms: the second one becomes a child of the first one.\\n\\t// Because of that, this security measure has to be disabled in Safari 8.\\n\\t// https://bugs.webkit.org/show_bug.cgi?id=137337\\n\\tsupport.createHTMLDocument = function () {\\n\\t\\tvar body = document.implementation.createHTMLDocument(\\\"\\\").body;\\n\\t\\tbody.innerHTML = \\\"<form></form><form></form>\\\";\\n\\t\\treturn body.childNodes.length === 2;\\n\\t}();\\n\\n\\t// Argument \\\"data\\\" should be string of html\\n\\t// context (optional): If specified, the fragment will be created in this context,\\n\\t// defaults to document\\n\\t// keepScripts (optional): If true, will include scripts passed in the html string\\n\\tjQuery.parseHTML = function (data, context, keepScripts) {\\n\\t\\tif (typeof data !== \\\"string\\\") {\\n\\t\\t\\treturn [];\\n\\t\\t}\\n\\t\\tif (typeof context === \\\"boolean\\\") {\\n\\t\\t\\tkeepScripts = context;\\n\\t\\t\\tcontext = false;\\n\\t\\t}\\n\\n\\t\\tvar base, parsed, scripts;\\n\\n\\t\\tif (!context) {\\n\\n\\t\\t\\t// Stop scripts or inline event handlers from being executed immediately\\n\\t\\t\\t// by using document.implementation\\n\\t\\t\\tif (support.createHTMLDocument) {\\n\\t\\t\\t\\tcontext = document.implementation.createHTMLDocument(\\\"\\\");\\n\\n\\t\\t\\t\\t// Set the base href for the created document\\n\\t\\t\\t\\t// so any parsed elements with URLs\\n\\t\\t\\t\\t// are based on the document's URL (gh-2965)\\n\\t\\t\\t\\tbase = context.createElement(\\\"base\\\");\\n\\t\\t\\t\\tbase.href = document.location.href;\\n\\t\\t\\t\\tcontext.head.appendChild(base);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcontext = document;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tparsed = rsingleTag.exec(data);\\n\\t\\tscripts = !keepScripts && [];\\n\\n\\t\\t// Single tag\\n\\t\\tif (parsed) {\\n\\t\\t\\treturn [context.createElement(parsed[1])];\\n\\t\\t}\\n\\n\\t\\tparsed = buildFragment([data], context, scripts);\\n\\n\\t\\tif (scripts && scripts.length) {\\n\\t\\t\\tjQuery(scripts).remove();\\n\\t\\t}\\n\\n\\t\\treturn jQuery.merge([], parsed.childNodes);\\n\\t};\\n\\n\\t/**\\n  * Load a url into a page\\n  */\\n\\tjQuery.fn.load = function (url, params, callback) {\\n\\t\\tvar selector,\\n\\t\\t    type,\\n\\t\\t    response,\\n\\t\\t    self = this,\\n\\t\\t    off = url.indexOf(\\\" \\\");\\n\\n\\t\\tif (off > -1) {\\n\\t\\t\\tselector = stripAndCollapse(url.slice(off));\\n\\t\\t\\turl = url.slice(0, off);\\n\\t\\t}\\n\\n\\t\\t// If it's a function\\n\\t\\tif (isFunction(params)) {\\n\\n\\t\\t\\t// We assume that it's the callback\\n\\t\\t\\tcallback = params;\\n\\t\\t\\tparams = undefined;\\n\\n\\t\\t\\t// Otherwise, build a param string\\n\\t\\t} else if (params && (typeof params === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(params)) === \\\"object\\\") {\\n\\t\\t\\ttype = \\\"POST\\\";\\n\\t\\t}\\n\\n\\t\\t// If we have elements to modify, make the request\\n\\t\\tif (self.length > 0) {\\n\\t\\t\\tjQuery.ajax({\\n\\t\\t\\t\\turl: url,\\n\\n\\t\\t\\t\\t// If \\\"type\\\" variable is undefined, then \\\"GET\\\" method will be used.\\n\\t\\t\\t\\t// Make value of this field explicit since\\n\\t\\t\\t\\t// user can override it through ajaxSetup method\\n\\t\\t\\t\\ttype: type || \\\"GET\\\",\\n\\t\\t\\t\\tdataType: \\\"html\\\",\\n\\t\\t\\t\\tdata: params\\n\\t\\t\\t}).done(function (responseText) {\\n\\n\\t\\t\\t\\t// Save response for use in complete callback\\n\\t\\t\\t\\tresponse = arguments;\\n\\n\\t\\t\\t\\tself.html(selector ?\\n\\n\\t\\t\\t\\t// If a selector was specified, locate the right elements in a dummy div\\n\\t\\t\\t\\t// Exclude scripts to avoid IE 'Permission Denied' errors\\n\\t\\t\\t\\tjQuery(\\\"<div>\\\").append(jQuery.parseHTML(responseText)).find(selector) :\\n\\n\\t\\t\\t\\t// Otherwise use the full result\\n\\t\\t\\t\\tresponseText);\\n\\n\\t\\t\\t\\t// If the request succeeds, this function gets \\\"data\\\", \\\"status\\\", \\\"jqXHR\\\"\\n\\t\\t\\t\\t// but they are ignored because response was set above.\\n\\t\\t\\t\\t// If it fails, this function gets \\\"jqXHR\\\", \\\"status\\\", \\\"error\\\"\\n\\t\\t\\t}).always(callback && function (jqXHR, status) {\\n\\t\\t\\t\\tself.each(function () {\\n\\t\\t\\t\\t\\tcallback.apply(this, response || [jqXHR.responseText, status, jqXHR]);\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\treturn this;\\n\\t};\\n\\n\\t// Attach a bunch of functions for handling common AJAX events\\n\\tjQuery.each([\\\"ajaxStart\\\", \\\"ajaxStop\\\", \\\"ajaxComplete\\\", \\\"ajaxError\\\", \\\"ajaxSuccess\\\", \\\"ajaxSend\\\"], function (i, type) {\\n\\t\\tjQuery.fn[type] = function (fn) {\\n\\t\\t\\treturn this.on(type, fn);\\n\\t\\t};\\n\\t});\\n\\n\\tjQuery.expr.pseudos.animated = function (elem) {\\n\\t\\treturn jQuery.grep(jQuery.timers, function (fn) {\\n\\t\\t\\treturn elem === fn.elem;\\n\\t\\t}).length;\\n\\t};\\n\\n\\tjQuery.offset = {\\n\\t\\tsetOffset: function setOffset(elem, options, i) {\\n\\t\\t\\tvar curPosition,\\n\\t\\t\\t    curLeft,\\n\\t\\t\\t    curCSSTop,\\n\\t\\t\\t    curTop,\\n\\t\\t\\t    curOffset,\\n\\t\\t\\t    curCSSLeft,\\n\\t\\t\\t    calculatePosition,\\n\\t\\t\\t    position = jQuery.css(elem, \\\"position\\\"),\\n\\t\\t\\t    curElem = jQuery(elem),\\n\\t\\t\\t    props = {};\\n\\n\\t\\t\\t// Set position first, in-case top/left are set even on static elem\\n\\t\\t\\tif (position === \\\"static\\\") {\\n\\t\\t\\t\\telem.style.position = \\\"relative\\\";\\n\\t\\t\\t}\\n\\n\\t\\t\\tcurOffset = curElem.offset();\\n\\t\\t\\tcurCSSTop = jQuery.css(elem, \\\"top\\\");\\n\\t\\t\\tcurCSSLeft = jQuery.css(elem, \\\"left\\\");\\n\\t\\t\\tcalculatePosition = (position === \\\"absolute\\\" || position === \\\"fixed\\\") && (curCSSTop + curCSSLeft).indexOf(\\\"auto\\\") > -1;\\n\\n\\t\\t\\t// Need to be able to calculate position if either\\n\\t\\t\\t// top or left is auto and position is either absolute or fixed\\n\\t\\t\\tif (calculatePosition) {\\n\\t\\t\\t\\tcurPosition = curElem.position();\\n\\t\\t\\t\\tcurTop = curPosition.top;\\n\\t\\t\\t\\tcurLeft = curPosition.left;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcurTop = parseFloat(curCSSTop) || 0;\\n\\t\\t\\t\\tcurLeft = parseFloat(curCSSLeft) || 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (isFunction(options)) {\\n\\n\\t\\t\\t\\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\\n\\t\\t\\t\\toptions = options.call(elem, i, jQuery.extend({}, curOffset));\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (options.top != null) {\\n\\t\\t\\t\\tprops.top = options.top - curOffset.top + curTop;\\n\\t\\t\\t}\\n\\t\\t\\tif (options.left != null) {\\n\\t\\t\\t\\tprops.left = options.left - curOffset.left + curLeft;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (\\\"using\\\" in options) {\\n\\t\\t\\t\\toptions.using.call(elem, props);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcurElem.css(props);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\n\\tjQuery.fn.extend({\\n\\n\\t\\t// offset() relates an element's border box to the document origin\\n\\t\\toffset: function offset(options) {\\n\\n\\t\\t\\t// Preserve chaining for setter\\n\\t\\t\\tif (arguments.length) {\\n\\t\\t\\t\\treturn options === undefined ? this : this.each(function (i) {\\n\\t\\t\\t\\t\\tjQuery.offset.setOffset(this, options, i);\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar rect,\\n\\t\\t\\t    win,\\n\\t\\t\\t    elem = this[0];\\n\\n\\t\\t\\tif (!elem) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\\n\\t\\t\\t// Support: IE <=11 only\\n\\t\\t\\t// Running getBoundingClientRect on a\\n\\t\\t\\t// disconnected node in IE throws an error\\n\\t\\t\\tif (!elem.getClientRects().length) {\\n\\t\\t\\t\\treturn { top: 0, left: 0 };\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\\n\\t\\t\\trect = elem.getBoundingClientRect();\\n\\t\\t\\twin = elem.ownerDocument.defaultView;\\n\\t\\t\\treturn {\\n\\t\\t\\t\\ttop: rect.top + win.pageYOffset,\\n\\t\\t\\t\\tleft: rect.left + win.pageXOffset\\n\\t\\t\\t};\\n\\t\\t},\\n\\n\\t\\t// position() relates an element's margin box to its offset parent's padding box\\n\\t\\t// This corresponds to the behavior of CSS absolute positioning\\n\\t\\tposition: function position() {\\n\\t\\t\\tif (!this[0]) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvar offsetParent,\\n\\t\\t\\t    offset,\\n\\t\\t\\t    doc,\\n\\t\\t\\t    elem = this[0],\\n\\t\\t\\t    parentOffset = { top: 0, left: 0 };\\n\\n\\t\\t\\t// position:fixed elements are offset from the viewport, which itself always has zero offset\\n\\t\\t\\tif (jQuery.css(elem, \\\"position\\\") === \\\"fixed\\\") {\\n\\n\\t\\t\\t\\t// Assume position:fixed implies availability of getBoundingClientRect\\n\\t\\t\\t\\toffset = elem.getBoundingClientRect();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\toffset = this.offset();\\n\\n\\t\\t\\t\\t// Account for the *real* offset parent, which can be the document or its root element\\n\\t\\t\\t\\t// when a statically positioned element is identified\\n\\t\\t\\t\\tdoc = elem.ownerDocument;\\n\\t\\t\\t\\toffsetParent = elem.offsetParent || doc.documentElement;\\n\\t\\t\\t\\twhile (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, \\\"position\\\") === \\\"static\\\") {\\n\\n\\t\\t\\t\\t\\toffsetParent = offsetParent.parentNode;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\\n\\n\\t\\t\\t\\t\\t// Incorporate borders into its offset, since they are outside its content origin\\n\\t\\t\\t\\t\\tparentOffset = jQuery(offsetParent).offset();\\n\\t\\t\\t\\t\\tparentOffset.top += jQuery.css(offsetParent, \\\"borderTopWidth\\\", true);\\n\\t\\t\\t\\t\\tparentOffset.left += jQuery.css(offsetParent, \\\"borderLeftWidth\\\", true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Subtract parent offsets and element margins\\n\\t\\t\\treturn {\\n\\t\\t\\t\\ttop: offset.top - parentOffset.top - jQuery.css(elem, \\\"marginTop\\\", true),\\n\\t\\t\\t\\tleft: offset.left - parentOffset.left - jQuery.css(elem, \\\"marginLeft\\\", true)\\n\\t\\t\\t};\\n\\t\\t},\\n\\n\\t\\t// This method will return documentElement in the following cases:\\n\\t\\t// 1) For the element inside the iframe without offsetParent, this method will return\\n\\t\\t//    documentElement of the parent window\\n\\t\\t// 2) For the hidden or detached element\\n\\t\\t// 3) For body or html element, i.e. in case of the html node - it will return itself\\n\\t\\t//\\n\\t\\t// but those exceptions were never presented as a real life use-cases\\n\\t\\t// and might be considered as more preferable results.\\n\\t\\t//\\n\\t\\t// This logic, however, is not guaranteed and can change at any point in the future\\n\\t\\toffsetParent: function offsetParent() {\\n\\t\\t\\treturn this.map(function () {\\n\\t\\t\\t\\tvar offsetParent = this.offsetParent;\\n\\n\\t\\t\\t\\twhile (offsetParent && jQuery.css(offsetParent, \\\"position\\\") === \\\"static\\\") {\\n\\t\\t\\t\\t\\toffsetParent = offsetParent.offsetParent;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn offsetParent || documentElement;\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\n\\t// Create scrollLeft and scrollTop methods\\n\\tjQuery.each({ scrollLeft: \\\"pageXOffset\\\", scrollTop: \\\"pageYOffset\\\" }, function (method, prop) {\\n\\t\\tvar top = \\\"pageYOffset\\\" === prop;\\n\\n\\t\\tjQuery.fn[method] = function (val) {\\n\\t\\t\\treturn access(this, function (elem, method, val) {\\n\\n\\t\\t\\t\\t// Coalesce documents and windows\\n\\t\\t\\t\\tvar win;\\n\\t\\t\\t\\tif (isWindow(elem)) {\\n\\t\\t\\t\\t\\twin = elem;\\n\\t\\t\\t\\t} else if (elem.nodeType === 9) {\\n\\t\\t\\t\\t\\twin = elem.defaultView;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (val === undefined) {\\n\\t\\t\\t\\t\\treturn win ? win[prop] : elem[method];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (win) {\\n\\t\\t\\t\\t\\twin.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\telem[method] = val;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}, method, val, arguments.length);\\n\\t\\t};\\n\\t});\\n\\n\\t// Support: Safari <=7 - 9.1, Chrome <=37 - 49\\n\\t// Add the top/left cssHooks using jQuery.fn.position\\n\\t// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\\n\\t// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\\n\\t// getComputedStyle returns percent when specified for top/left/bottom/right;\\n\\t// rather than make the css module depend on the offset module, just check for it here\\n\\tjQuery.each([\\\"top\\\", \\\"left\\\"], function (i, prop) {\\n\\t\\tjQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\\n\\t\\t\\tif (computed) {\\n\\t\\t\\t\\tcomputed = curCSS(elem, prop);\\n\\n\\t\\t\\t\\t// If curCSS returns percentage, fallback to offset\\n\\t\\t\\t\\treturn rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \\\"px\\\" : computed;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n\\n\\t// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\\n\\tjQuery.each({ Height: \\\"height\\\", Width: \\\"width\\\" }, function (name, type) {\\n\\t\\tjQuery.each({ padding: \\\"inner\\\" + name, content: type, \\\"\\\": \\\"outer\\\" + name }, function (defaultExtra, funcName) {\\n\\n\\t\\t\\t// Margin is only for outerHeight, outerWidth\\n\\t\\t\\tjQuery.fn[funcName] = function (margin, value) {\\n\\t\\t\\t\\tvar chainable = arguments.length && (defaultExtra || typeof margin !== \\\"boolean\\\"),\\n\\t\\t\\t\\t    extra = defaultExtra || (margin === true || value === true ? \\\"margin\\\" : \\\"border\\\");\\n\\n\\t\\t\\t\\treturn access(this, function (elem, type, value) {\\n\\t\\t\\t\\t\\tvar doc;\\n\\n\\t\\t\\t\\t\\tif (isWindow(elem)) {\\n\\n\\t\\t\\t\\t\\t\\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\\n\\t\\t\\t\\t\\t\\treturn funcName.indexOf(\\\"outer\\\") === 0 ? elem[\\\"inner\\\" + name] : elem.document.documentElement[\\\"client\\\" + name];\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Get document width or height\\n\\t\\t\\t\\t\\tif (elem.nodeType === 9) {\\n\\t\\t\\t\\t\\t\\tdoc = elem.documentElement;\\n\\n\\t\\t\\t\\t\\t\\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\\n\\t\\t\\t\\t\\t\\t// whichever is greatest\\n\\t\\t\\t\\t\\t\\treturn Math.max(elem.body[\\\"scroll\\\" + name], doc[\\\"scroll\\\" + name], elem.body[\\\"offset\\\" + name], doc[\\\"offset\\\" + name], doc[\\\"client\\\" + name]);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn value === undefined ?\\n\\n\\t\\t\\t\\t\\t// Get width or height on the element, requesting but not forcing parseFloat\\n\\t\\t\\t\\t\\tjQuery.css(elem, type, extra) :\\n\\n\\t\\t\\t\\t\\t// Set width or height on the element\\n\\t\\t\\t\\t\\tjQuery.style(elem, type, value, extra);\\n\\t\\t\\t\\t}, type, chainable ? margin : undefined, chainable);\\n\\t\\t\\t};\\n\\t\\t});\\n\\t});\\n\\n\\tjQuery.each((\\\"blur focus focusin focusout resize scroll click dblclick \\\" + \\\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \\\" + \\\"change select submit keydown keypress keyup contextmenu\\\").split(\\\" \\\"), function (i, name) {\\n\\n\\t\\t// Handle event binding\\n\\t\\tjQuery.fn[name] = function (data, fn) {\\n\\t\\t\\treturn arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\\n\\t\\t};\\n\\t});\\n\\n\\tjQuery.fn.extend({\\n\\t\\thover: function hover(fnOver, fnOut) {\\n\\t\\t\\treturn this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\\n\\t\\t}\\n\\t});\\n\\n\\tjQuery.fn.extend({\\n\\n\\t\\tbind: function bind(types, data, fn) {\\n\\t\\t\\treturn this.on(types, null, data, fn);\\n\\t\\t},\\n\\t\\tunbind: function unbind(types, fn) {\\n\\t\\t\\treturn this.off(types, null, fn);\\n\\t\\t},\\n\\n\\t\\tdelegate: function delegate(selector, types, data, fn) {\\n\\t\\t\\treturn this.on(types, selector, data, fn);\\n\\t\\t},\\n\\t\\tundelegate: function undelegate(selector, types, fn) {\\n\\n\\t\\t\\t// ( namespace ) or ( selector, types [, fn] )\\n\\t\\t\\treturn arguments.length === 1 ? this.off(selector, \\\"**\\\") : this.off(types, selector || \\\"**\\\", fn);\\n\\t\\t}\\n\\t});\\n\\n\\t// Bind a function to a context, optionally partially applying any\\n\\t// arguments.\\n\\t// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\\n\\t// However, it is not slated for removal any time soon\\n\\tjQuery.proxy = function (fn, context) {\\n\\t\\tvar tmp, args, proxy;\\n\\n\\t\\tif (typeof context === \\\"string\\\") {\\n\\t\\t\\ttmp = fn[context];\\n\\t\\t\\tcontext = fn;\\n\\t\\t\\tfn = tmp;\\n\\t\\t}\\n\\n\\t\\t// Quick check to determine if target is callable, in the spec\\n\\t\\t// this throws a TypeError, but we will just return undefined.\\n\\t\\tif (!isFunction(fn)) {\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\n\\t\\t// Simulated bind\\n\\t\\targs = _slice.call(arguments, 2);\\n\\t\\tproxy = function proxy() {\\n\\t\\t\\treturn fn.apply(context || this, args.concat(_slice.call(arguments)));\\n\\t\\t};\\n\\n\\t\\t// Set the guid of unique handler to the same of original handler, so it can be removed\\n\\t\\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\\n\\n\\t\\treturn proxy;\\n\\t};\\n\\n\\tjQuery.holdReady = function (hold) {\\n\\t\\tif (hold) {\\n\\t\\t\\tjQuery.readyWait++;\\n\\t\\t} else {\\n\\t\\t\\tjQuery.ready(true);\\n\\t\\t}\\n\\t};\\n\\tjQuery.isArray = Array.isArray;\\n\\tjQuery.parseJSON = JSON.parse;\\n\\tjQuery.nodeName = nodeName;\\n\\tjQuery.isFunction = isFunction;\\n\\tjQuery.isWindow = isWindow;\\n\\tjQuery.camelCase = camelCase;\\n\\tjQuery.type = toType;\\n\\n\\tjQuery.now = Date.now;\\n\\n\\tjQuery.isNumeric = function (obj) {\\n\\n\\t\\t// As of jQuery 3.0, isNumeric is limited to\\n\\t\\t// strings and numbers (primitives or objects)\\n\\t\\t// that can be coerced to finite numbers (gh-2662)\\n\\t\\tvar type = jQuery.type(obj);\\n\\t\\treturn (type === \\\"number\\\" || type === \\\"string\\\") &&\\n\\n\\t\\t// parseFloat NaNs numeric-cast false positives (\\\"\\\")\\n\\t\\t// ...but misinterprets leading-number strings, particularly hex literals (\\\"0x...\\\")\\n\\t\\t// subtraction forces infinities to NaN\\n\\t\\t!isNaN(obj - parseFloat(obj));\\n\\t};\\n\\n\\t// Register as a named AMD module, since jQuery can be concatenated with other\\n\\t// files that may use define, but not via a proper concatenation script that\\n\\t// understands anonymous AMD modules. A named AMD is safest and most robust\\n\\t// way to register. Lowercase jquery is used because AMD module names are\\n\\t// derived from file names, and jQuery is normally delivered in a lowercase\\n\\t// file name. Do this after creating the global so that if an AMD module wants\\n\\t// to call noConflict to hide this version of jQuery, it will work.\\n\\n\\t// Note that for maximum portability, libraries that are not jQuery should\\n\\t// declare themselves as anonymous modules, and avoid setting a global if an\\n\\t// AMD loader is present. jQuery is a special case. For more information, see\\n\\t// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\\n\\n\\tif (true) {\\n\\t\\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\\n\\t\\t\\treturn jQuery;\\n\\t\\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t}\\n\\n\\tvar\\n\\n\\t// Map over jQuery in case of overwrite\\n\\t_jQuery = window.jQuery,\\n\\n\\n\\t// Map over the $ in case of overwrite\\n\\t_$ = window.$;\\n\\n\\tjQuery.noConflict = function (deep) {\\n\\t\\tif (window.$ === jQuery) {\\n\\t\\t\\twindow.$ = _$;\\n\\t\\t}\\n\\n\\t\\tif (deep && window.jQuery === jQuery) {\\n\\t\\t\\twindow.jQuery = _jQuery;\\n\\t\\t}\\n\\n\\t\\treturn jQuery;\\n\\t};\\n\\n\\t// Expose jQuery and $ identifiers, even in AMD\\n\\t// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\\n\\t// and CommonJS for browser emulators (#13566)\\n\\tif (!noGlobal) {\\n\\t\\twindow.jQuery = window.$ = jQuery;\\n\\t}\\n\\n\\treturn jQuery;\\n});\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ \\\"./node_modules/webpack/buildin/module.js\\\")(module)))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\\n\");\n\n//# sourceURL=webpack:///./node_modules/jquery/dist/jquery.js?");

/***/ }),

/***/ "./node_modules/knayi-myscript/dist/knayi-myscript.es.js":
/*!***************************************************************!*\
  !*** ./node_modules/knayi-myscript/dist/knayi-myscript.es.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"/* WEBPACK VAR INJECTION */(function(Buffer) {\\n\\nmodule.exports = function (A) {\\n  var g = {};function B(w) {\\n    if (g[w]) return g[w].exports;var u = g[w] = { i: w, l: !1, exports: {} };return A[w].call(u.exports, u, u.exports, B), u.l = !0, u.exports;\\n  }return B.m = A, B.c = g, B.d = function (A, g, w) {\\n    B.o(A, g) || Object.defineProperty(A, g, { configurable: !1, enumerable: !0, get: w });\\n  }, B.r = function (A) {\\n    Object.defineProperty(A, \\\"__esModule\\\", { value: !0 });\\n  }, B.n = function (A) {\\n    var g = A && A.__esModule ? function () {\\n      return A.default;\\n    } : function () {\\n      return A;\\n    };return B.d(g, \\\"a\\\", g), g;\\n  }, B.o = function (A, g) {\\n    return Object.prototype.hasOwnProperty.call(A, g);\\n  }, B.p = \\\"\\\", B(B.s = 8);\\n}([function (A, g, B) {\\n  \\\"use strict\\\";\\n  var w = { silent_mode: !1, detector: { use_myanmartools: !1, myanmartools_zg_threshold: [.05, .95] } };function u() {\\n    var A = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\\n        g = A.use_myanmartools,\\n        B = void 0 === g ? w.detector.use_myanmartools : g,\\n        u = A.myanmartools_zg_threshold,\\n        C = void 0 === u ? [.05, .95] : u;return \\\"number\\\" == typeof C[0] && \\\"number\\\" == typeof C[1] || (console.error(\\\"myanmartools_zg_threshold must be [number, number]\\\"), C = w.detector.myanmartools_zg_threshold), { use_myanmartools: B, myanmartools_zg_threshold: C };\\n  }A.exports = { isSilentMode: function isSilentMode() {\\n      return w.silent_mode;\\n    }, setOptions: function setOptions() {\\n      var A = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};-1 !== Object.keys(A).indexOf(\\\"silent_mode\\\") && (w.silent_mode = A.silent_mode), -1 !== Object.keys(A).indexOf(\\\"detector\\\") && (w.detector = u(A.detector));\\n    }, detector: u };\\n}, function (A, g, B) {\\n  \\\"use strict\\\";\\n  var w = {},\\n      u = /[\\\\u1000-\\\\u109F]/,\\n      C = new (B(7).ZawgyiDetector)(),\\n      Q = B(0);w.detect = { unicode: [\\\"ှ\\\", \\\"ဿ\\\", \\\"ည်\\\", \\\"န်\\\", \\\"င်\\\", \\\"ေး\\\", \\\"ော\\\", \\\"်း\\\", \\\"ဵ\\\", \\\"[ၐ-ၙ]\\\", \\\"^([က-အ]ြ|[က-အ]ေ)\\\"], zawgyi: [\\\"ာ္\\\", \\\"်ာ\\\", \\\"[\\\\\\\\x20\\\\\\\\t\\\\\\\\r\\\\\\\\n\\\\\\\\f](ျ|ေ|[ၾ-ႄ])[က-အ]\\\", \\\"^(ျ|ေ|[ၾ-ႄ])[က-အ]\\\", \\\"[က-အ]္[^က-အ]\\\", \\\"ဥ္\\\", \\\"္း\\\", \\\"[ါ-ူေ်း](ျ|[ၾ-ႄ])[က-အ]\\\", \\\"ံု\\\", \\\"[က-အ]္ေ\\\", \\\"ၤ\\\", \\\"္[\\\\\\\\x20\\\\\\\\t\\\\\\\\r\\\\\\\\n\\\\\\\\f]\\\", \\\"ာေ\\\", \\\"[ါ-ူ်း]ေ[က-အ]\\\", \\\"ေေ\\\", \\\"ုိ\\\", \\\"္$\\\"] }, Object.keys(w.detect).forEach(function (A) {\\n    for (var g = 0; g < w.detect[A].length; g++) {\\n      w.detect[A][g] = new RegExp(w.detect[A][g], \\\"g\\\");\\n    }\\n  }), A.exports = function (A, g) {\\n    var B = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};if (!A) return Q.isSilentMode() || console.warn(\\\"Content must be specified on knayi.fontDetect.\\\"), g || \\\"en\\\";if (\\\"\\\" === A) return A;if (!u.test(A)) return g || \\\"en\\\";if (A = A.trim().replace(/\\\\u200B/g, \\\"\\\"), g = g || \\\"zawgyi\\\", (B = Q.detector(B)).use_myanmartools) {\\n      var c = C.getZawgyiProbability(A);return c < B.myanmartools_zg_threshold[0] ? \\\"unicode\\\" : c > B.myanmartools_zg_threshold[1] ? \\\"zawgyi\\\" : g;\\n    }var v = {};for (var s in w.detect) {\\n      v[s] = 0;for (var e = 0; e < w.detect[s].length; e++) {\\n        var r = w.detect[s][e],\\n            E = A.match(r);v[s] += E && E.length || 0;\\n      }\\n    }return v.unicode > v.zawgyi ? \\\"unicode\\\" : v.unicode < v.zawgyi ? \\\"zawgyi\\\" : g;\\n  };\\n}, function (A, g, B) {\\n  \\\"use strict\\\";\\n  var w = B(1),\\n      u = B(0),\\n      C = /[\\\\u1000-\\\\u109F]/,\\n      Q = {};Q.spellingFix = { unicode: \\\"ါ ာ ိ ီ ု ူ ေ ဲ ံ ့ း ် ျ ြ ွ ှ ္\\\".split(\\\" \\\"), zawgyi: \\\"ါ ာ ိ ီ ု ူ ေ ဲ ဳ ဴ ံ ့ း ္ ် ျ ြ ွ ၚ ၠ ၡ ၢ ၣ ၤ ၥ ၦ ၧ ၨ ၩ ၪ ၫ ၬ ၭ ၰ ၱ ၲ ၳ ၴ ၵ ၶ ၷ ၸ ၹ ၺ ၻ ၼ ၽ ၾ ၿ ႀ ႁ ႂ ႃ ႄ ႅ ႇ ႈ ႉ ႊ ႋ ႌ ႍ ႎ ႓ ႔ ႕ ႖\\\".split(\\\" \\\") }, Object.keys(Q.spellingFix).forEach(function (A) {\\n    Q.spellingFix[A] = Q.spellingFix[A].map(function (A) {\\n      return [new RegExp(\\\"[\\\" + A + \\\"]{2,}\\\", \\\"g\\\"), A];\\n    });\\n  }), A.exports = function (A, g) {\\n    if (!A) return u.isSilentMode() || console.warn(\\\"Content must be specified on knayi.spellingFix.\\\"), \\\"\\\";if (\\\"\\\" === A || !C.test(A)) return A;switch (g || (g = w(A)), A = A.trim().replace(/\\\\u200B/g, \\\"\\\"), g) {case \\\"zawgyi\\\":\\n        for (var B = 0; B < Q.spellingFix.zawgyi.length; B++) {\\n          var c = Q.spellingFix.zawgyi[B];A = A.replace(c[0], c[1]);\\n        }return A;case \\\"unicode\\\":default:\\n        for (B = 0; B < Q.spellingFix.unicode.length; B++) {\\n          c = Q.spellingFix.unicode[B], A = A.replace(c[0], c[1]);\\n        }return A;}\\n  };\\n}, function (A) {\\n  A.exports = { name: \\\"knayi-myscript\\\", version: \\\"2.5.2\\\", description: \\\"Knayi Myanmar languages JavaScirpt library\\\", main: \\\"main.js\\\", module: \\\"dist/knayi-myscript.es.js\\\", scripts: { test: \\\"mocha\\\", build: \\\"webpack\\\", \\\"start:dev\\\": \\\"webpack-dev-server --entry /entry/file\\\" }, repository: { type: \\\"git\\\", url: \\\"http://github.com/greenlikeorange/knayi-myscript\\\" }, keywords: [\\\"Myanmar\\\", \\\"Language\\\", \\\"Font\\\", \\\"Zawgyi\\\", \\\"Unicode\\\", \\\"Convert\\\", \\\"Detecting\\\", \\\"Localzation\\\", \\\"JavaScript\\\"], contributors: [\\\"greenlikeorange <ty@kny.co>\\\", \\\"Aung Myo Kyaw <me@aungmyokyaw.com>\\\"], license: \\\"MIT\\\", bugs: { url: \\\"https://github.com/greenlikeorange/knayi-myscript/issues\\\" }, homepage: \\\"https://github.com/greenlikeorange/knayi-myscript\\\", devDependencies: { \\\"babel-core\\\": \\\"^6.26.0\\\", \\\"babel-loader\\\": \\\"^7.1.4\\\", \\\"babel-preset-env\\\": \\\"^1.6.1\\\", chai: \\\"^4.1.2\\\", mocha: \\\"^5.1.1\\\", upath: \\\"^1.0.5\\\", webpack: \\\"^4.8.1\\\", \\\"webpack-cli\\\": \\\"^2.1.3\\\", \\\"webpack-serve\\\": \\\"^0.3.2\\\" }, dependencies: { \\\"myanmar-tools\\\": \\\"^1.0.3\\\" } };\\n}, function (A, g, B) {\\n  \\\"use strict\\\";\\n  var w = B(1),\\n      u = B(0),\\n      C = /[\\\\u1000-\\\\u109F]/,\\n      Q = {};Q.syllable = { zawgyi: [[/([\\\\u1000-\\\\u1021\\\\u1023-\\\\u1027\\\\u1029\\\\u102a\\\\u104c-\\\\u104f\\\\u1086\\\\u108f-\\\\u1092])/g, \\\"​$1\\\"], [/([\\\\u1031][\\\\u103b\\\\u107e-\\\\u1084]|[\\\\u1031\\\\u103b\\\\u107e-\\\\u1084])/g, \\\"​$1\\\"], [/([\\\\u1031\\\\u103b\\\\u107e-\\\\u1084])\\\\u200B([\\\\u1000-\\\\u1021\\\\u1025\\\\u1029\\\\u106A\\\\u106B\\\\u1086\\\\u108F\\\\u1090])/g, \\\"$1$2\\\"], [/([\\\\u0009-\\\\u000d\\\\u0020\\\\u00a0\\\\u2000-\\\\u200a\\\\u2028\\\\u2029\\\\u202f]|>|\\\\u201C|\\\\u2018|\\\\-|\\\\(|\\\\[|{|[\\\\u2012-\\\\u2014])\\\\u200B([\\\\u1000-\\\\u1021\\\\u1031\\\\u103b\\\\u1025\\\\u1029\\\\u106A\\\\u106B\\\\u107e-\\\\u1084\\\\u1086\\\\u108F\\\\u1090])/g, \\\"$1$2\\\"], [/\\\\u200B([\\\\u1000-\\\\u1021\\\\u1025\\\\u1029\\\\u106A\\\\u106B\\\\u1086\\\\u108F\\\\u1090]\\\\u1039)/g, \\\"$1\\\"], [/(\\\\s|\\\\n)\\\\u200B([\\\\u1000-\\\\u1021\\\\u1023-\\\\u1027\\\\u1029\\\\u102a\\\\u104c-\\\\u104f\\\\u1086\\\\u108f-\\\\u1092])/g, \\\"$1$2\\\"], [/([\\\\u1000-\\\\u1021])\\\\u200B([\\\\u1000-\\\\u1021\\\\u1031\\\\u103b\\\\u107e-\\\\u1084])/g, \\\"$1$2\\\"]], unicode: [[/(\\\\u103A)(\\\\u1037)/g, \\\"$2$1\\\"], [/([\\\\u1000-\\\\u1021\\\\u1023-\\\\u1027\\\\u1029\\\\u102a\\\\u103f\\\\u104c-\\\\u104f])/g, \\\"​$1\\\"], [/([\\\\u0009-\\\\u000d\\\\u0020\\\\u00a0\\\\u2000-\\\\u200a\\\\u2028\\\\u2029\\\\u202f]|>|\\\\u201C|\\\\u2018|\\\\-|\\\\(|\\\\[|{|[\\\\u2012-\\\\u2014]|\\\\u1039)\\\\u200B([\\\\u1000-\\\\u1021])/g, \\\"$1$2\\\"], [/\\\\u200B(\\\\u1004\\\\u103A\\\\u1039)/g, \\\"$1\\\"], [/\\\\u200B([\\\\u1000-\\\\u1021]\\\\u103A)/g, \\\"$1\\\"], [/(\\\\s|\\\\n)\\\\u200B([\\\\u1000-\\\\u1021\\\\u1023-\\\\u1027\\\\u1029\\\\u102a\\\\u103f\\\\u104c-\\\\u104f])/g, \\\"$1$2\\\"], [/([\\\\u1000-\\\\u1021])\\\\u200B([\\\\u1000-\\\\u1021])/g, \\\"$1$2\\\"]] }, A.exports = function (A, g, B) {\\n    if (!A) return u.isSilentMode() || console.warn(\\\"Content must be specified on knayi.syllBreak.\\\"), \\\"\\\";if (\\\"\\\" === A || !C.test(A)) return A;A = A.trim().replace(/\\\\u200B/g, \\\"\\\"), g || (g = w(A));for (var c = Q.syllable[g], v = 0; v < c.length; v++) {\\n      A = A.replace(c[v][0], c[v][1]);\\n    }return A = A.replace(/^\\\\u200B/, \\\"\\\"), B && \\\"​\\\" !== B ? A.replace(/\\\\u200B/g, B) : A;\\n  };\\n}, function (A, g, B) {\\n  \\\"use strict\\\";\\n  var w = B(2),\\n      u = B(1),\\n      C = B(0),\\n      Q = { unicode: \\\"unicode\\\", uni: \\\"unicode\\\", zawgyi: \\\"zawgyi\\\", zaw: \\\"zawgyi\\\" },\\n      c = /[\\\\u1000-\\\\u109F]/,\\n      v = {};function s(A, g, B) {\\n    if (!A) return C.isSilentMode() || console.warn(\\\"Content must be specified on knayi.fontConvert.\\\"), \\\"\\\";if (\\\"\\\" === A || !c.test(A)) return A;if (!g) return C.isSilentMode() || console.error(\\\"Convert target font must be specified on knayi.fontConvert.\\\"), A;if (A = A.trim().replace(/\\\\u200B/g, \\\"\\\"), g = Q[g], B = Q[B], !g) return C.isSilentMode() || console.error(\\\"Convert library dosen't have this fontType.\\\"), A;if (B || (B = u(A)), g === B) return A;var s = { to: g, from: B, matched_patterns: [], steps: [] };A = w(A, B);for (var e = v.convert[B][g], r = 0; r < e.oneTime.length; r++) {\\n      var E = e.oneTime[r];this.debug && E[0].test(A) && (s.matched_patterns.push(E), s.steps.push(A)), A = A.replace(E[0], E[1]);\\n    }for (var P = 0; P < e.asLongAsMatch.length; P++) {\\n      var t = e.asLongAsMatch[P];for (this.debug && t[0].test(A) && (s.matched_patterns.push(t), s.steps.push(A)); t[0].test(A);) {\\n        A = A.replace(t[0], t[1]);\\n      }\\n    }return this.debug ? (s.steps.push(A), s) : A;\\n  }v.convert = { unicode: { zawgyi: { oneTime: [[/([\\\\u1000-\\\\u1021](\\\\u1039[\\\\u1000-\\\\u1021]|[\\\\u103b\\\\u103c\\\\u103d]+)[\\\\u102d\\\\u102e\\\\u1031\\\\u1032\\\\u1036\\\\u1037\\\\u103e]*)\\\\u102f/g, \\\"$1ဳ\\\"], [/([\\\\u1000-\\\\u1021](\\\\u1039[\\\\u1000-\\\\u1021]|[\\\\u103b\\\\u103c\\\\u103d]+)[\\\\u102d\\\\u102e\\\\u1031\\\\u1032\\\\u1036\\\\u1037\\\\u103e]*)\\\\u1030/g, \\\"$1ဴ\\\"], [/([\\\\u1000-\\\\u1021](\\\\u1039[\\\\u1000-\\\\u1021]|[\\\\u103b\\\\u103c\\\\u103d]+)[\\\\u102d\\\\u102e\\\\u1031\\\\u1032\\\\u1036\\\\u1037\\\\u103e]*)\\\\u1037/g, \\\"$1႔\\\"], [/([\\\\u1000-\\\\u1021])\\\\u103b([\\\\u103d][\\\\u103e]*)/g, \\\"$1ၽ$2\\\"], [/([\\\\u1033\\\\u1034])[\\\\u1037\\\\u1094]/g, \\\"$1႕\\\"], [/\\\\u103c([\\\\u1000-\\\\u1021][\\\\u102f\\\\u1030\\\\u1039\\\\u103b\\\\u103d\\\\u103e])/g, \\\"ႂ$1\\\"], [/\\\\u1004\\\\u103a\\\\u1039/g, \\\"ၤ\\\"], [/\\\\u1064([\\\\u1000-\\\\u1021])/g, \\\"$1ၤ\\\"], [/([\\\\u1000-\\\\u1021][^\\\\u1000-\\\\u1021]*)([\\\\u103c\\\\u1082])/g, \\\"$2$1\\\"], [/([\\\\u1000-\\\\u1021]\\\\u1039)\\\\u103c([\\\\u1000-\\\\u1021])/g, \\\"ြ$1$2\\\"], [/([\\\\u1000-\\\\u1021][^\\\\u1000-\\\\u1021]*)\\\\u1031/g, \\\"ေ$1\\\"], [/([\\\\u1000-\\\\u1021]\\\\u1039)\\\\u1031([\\\\u1000-\\\\u1021])/g, \\\"ေ$1$2\\\"], [/\\\\u103c\\\\u1031/g, \\\"ေြ\\\"], [/\\\\u1014([\\\\u102f\\\\u1030\\\\u1039\\\\u103b\\\\u103d\\\\u103e])/g, \\\"ႏ$1\\\"], [/\\\\u103c\\\\u1014/g, \\\"ြႏ\\\"], [/\\\\u1009([\\\\u102f\\\\u1030\\\\u1039\\\\u103b\\\\u103d\\\\u103e])/g, \\\"ၪ$1\\\"], [/\\\\u104e\\\\u1004\\\\u103a\\\\u1038/g, \\\"၎\\\"], [/\\\\u102b\\\\u103a/g, \\\"ၚ\\\"], [/\\\\u103f/g, \\\"ႆ\\\"], [/\\\\u1039\\\\u101c/g, \\\"ႅ\\\"], [/\\\\u1039\\\\u1019/g, \\\"ၼ\\\"], [/\\\\u1039\\\\u1018/g, \\\"ၻ\\\"], [/\\\\u1039\\\\u1017/g, \\\"ၺ\\\"], [/\\\\u1039\\\\u1016/g, \\\"ၹ\\\"], [/\\\\u1039\\\\u1016/g, \\\"ၹ\\\"], [/\\\\u1039\\\\u1015/g, \\\"ၸ\\\"], [/\\\\u1039\\\\u1014/g, \\\"ၷ\\\"], [/\\\\u1039\\\\u1013/g, \\\"ၶ\\\"], [/\\\\u1039\\\\u1012/g, \\\"ၵ\\\"], [/\\\\u1039\\\\u1011/g, \\\"ၳ\\\"], [/\\\\u1039\\\\u1010/g, \\\"ၱ\\\"], [/\\\\u1039\\\\u100f/g, \\\"ၰ\\\"], [/\\\\u100e\\\\u1039\\\\u100d/g, \\\"ၯ\\\"], [/\\\\u100f\\\\u1039\\\\u100d/g, \\\"႑\\\"], [/\\\\u100d\\\\u1039\\\\u100d/g, \\\"ၮ\\\"], [/\\\\u100b\\\\u1039\\\\u100c/g, \\\"႒\\\"], [/\\\\u1039\\\\u100c/g, \\\"ၭ\\\"], [/\\\\u100b\\\\u1039\\\\u100b/g, \\\"႗\\\"], [/\\\\u1039\\\\u100b/g, \\\"ၬ\\\"], [/\\\\u1039\\\\u1005\\\\u103b/g, \\\"ၩ\\\"], [/\\\\u1039\\\\u1007/g, \\\"ၨ\\\"], [/\\\\u1039\\\\u1006/g, \\\"ၦ\\\"], [/\\\\u1039\\\\u1005/g, \\\"ၥ\\\"], [/\\\\u1039\\\\u1003/g, \\\"ၣ\\\"], [/\\\\u1039\\\\u1002/g, \\\"ၢ\\\"], [/\\\\u1039\\\\u1001/g, \\\"ၡ\\\"], [/\\\\u103d\\\\u103e/g, \\\"ႊ\\\"], [/\\\\u103e\\\\u1030/g, \\\"ႉ\\\"], [/\\\\u1039\\\\u1000/g, \\\"ၠ\\\"], [/\\\\u103e\\\\u102f/g, \\\"ႈ\\\"], [/\\\\u103a/g, \\\"္\\\"], [/\\\\u103b/g, \\\"်\\\"], [/\\\\u103c/g, \\\"ျ\\\"], [/\\\\u103d/g, \\\"ြ\\\"], [/\\\\u103e/g, \\\"ွ\\\"], [/([^\\\\u1000\\\\u1003\\\\u1006\\\\u100f\\\\u1010\\\\u1011\\\\u1018\\\\u1021\\\\u101a\\\\u101c\\\\u101e\\\\u101f])\\\\u1071/g, \\\"$u1072\\\"]], asLongAsMatch: [[/\\\\u103b([\\\\u1000\\\\u1003\\\\u1006\\\\u100f\\\\u1010\\\\u1011\\\\u1018\\\\u1021\\\\u101a\\\\u101c\\\\u101e\\\\u101f])/g, \\\"ၾ$1\\\"], [/\\\\u103b([\\\\u1000-\\\\u1021\\\\u106a\\\\u108f](\\\\u103c\\\\u103d|\\\\u108a|\\\\u103c)[\\\\u102d\\\\u102e])/g, \\\"ႃ$1\\\"], [/\\\\u107e([\\\\u1000-\\\\u1021](\\\\u103c\\\\u103d|\\\\u108a|\\\\u103c)[\\\\u102d\\\\u102e])/g, \\\"ႄ$1\\\"], [/\\\\u103b([\\\\u1000-\\\\u1021\\\\u106a\\\\u108f][\\\\u102d\\\\u102e])/g, \\\"ၿ$1\\\"], [/\\\\u107e([\\\\u1000-\\\\u1021][\\\\u102d\\\\u102e])/g, \\\"ႀ$1\\\"], [/\\\\u103b([\\\\u1000-\\\\u1021\\\\u106a\\\\u108f][\\\\u103c\\\\u103e\\\\u108a])/g, \\\"ႁ$1\\\"], [/\\\\u107e([\\\\u1000-\\\\u1021][\\\\u103c\\\\u103e\\\\u108a])/g, \\\"ႂ$1\\\"], [/\\\\u103b\\\\u1009/g, \\\"ႁၪ\\\"]] } }, zawgyi: { unicode: { oneTime: [[/([^\\\\u1040-\\\\u1049\\\\+\\\\-\\\\*\\\\/])?\\\\u1040([^\\\\u1040-\\\\u1049\\\\+\\\\-\\\\*\\\\/])?/g, \\\"$1ဝ$2\\\"], [/\\\\u103d|\\\\u1087/g, \\\"ှ\\\"], [/\\\\u103c/g, \\\"ွ\\\"], [/[\\\\u103b\\\\u107e-\\\\u1084]/g, \\\"ြ\\\"], [/[\\\\u103a\\\\u107d]/g, \\\"ျ\\\"], [/\\\\u1039/g, \\\"်\\\"], [/[\\\\u1094-\\\\u1095]/g, \\\"့\\\"], [/\\\\s([\\\\u1037])/g, \\\"$1\\\"], [/[\\\\u107b\\\\u1093]/g, \\\"္ဘ\\\"], [/\\\\u1033/g, \\\"ု\\\"], [/\\\\u1034/g, \\\"ူ\\\"], [/\\\\u1088/g, \\\"ှု\\\"], [/\\\\u1089/g, \\\"ှူ\\\"], [/\\\\u108a/g, \\\"ွှ\\\"], [/\\\\u1061/g, \\\"္ခ\\\"], [/\\\\u108f/g, \\\"န\\\"], [/\\\\u1062/g, \\\"္ဂ\\\"], [/\\\\u1063/g, \\\"္ဃ\\\"], [/\\\\u1065/g, \\\"္စ\\\"], [/\\\\u1066/g, \\\"္ဆ\\\"], [/\\\\u1068/g, \\\"္ဇ\\\"], [/\\\\u1069/g, \\\"္စျ\\\"], [/\\\\u106a/g, \\\"ဉ\\\"], [/\\\\u106b/g, \\\"ည\\\"], [/\\\\u106c/g, \\\"္ဋ\\\"], [/\\\\u106d/g, \\\"္ဌ\\\"], [/\\\\u106e/g, \\\"ဍ္ဍ\\\"], [/\\\\u106f/g, \\\"ဎ္ဍ\\\"], [/\\\\u1070/g, \\\"္ဏ\\\"], [/[\\\\u1071\\\\u1072]/g, \\\"္တ\\\"], [/\\\\u1073/g, \\\"္ထ\\\"], [/\\\\u1075/g, \\\"္ဒ\\\"], [/\\\\u1076/g, \\\"္ဓ\\\"], [/\\\\u1077/g, \\\"္န\\\"], [/\\\\u1078/g, \\\"္ပ\\\"], [/\\\\u1079/g, \\\"္ဖ\\\"], [/\\\\u1079/g, \\\"္ဖ\\\"], [/\\\\u107a/g, \\\"္ဗ\\\"], [/\\\\u107c/g, \\\"္မ\\\"], [/\\\\u1085/g, \\\"္လ\\\"], [/\\\\u1086/g, \\\"ဿ\\\"], [/\\\\u1090/g, \\\"ရ\\\"], [/\\\\u1091/g, \\\"ဏ္ဍ\\\"], [/\\\\u1092/g, \\\"ဋ္ဌ\\\"], [/\\\\u1097/g, \\\"ဋ္ဋ\\\"], [/\\\\u1060/g, \\\"္က\\\"], [/\\\\u105a/g, \\\"ါ်\\\"], [/\\\\u104e/g, \\\"၎င်း\\\"], [/\\\\u1025\\\\u103a/g, \\\"ဉ်\\\"], [/([\\\\u1000-\\\\u1021])\\\\u108b/g, \\\"ၤ$1ိ\\\"], [/([\\\\u1000-\\\\u1021])\\\\u108c/g, \\\"ၤ$1ီ\\\"], [/([\\\\u1000-\\\\u1021])\\\\u108d/g, \\\"ၤ$1ံ\\\"], [/\\\\u108e/g, \\\"ိံ\\\"], [/\\\\u103c([\\\\u1000-\\\\u1021])/g, \\\"$1ြ\\\"], [/\\\\u1031([\\\\u1000-\\\\u1021])/g, \\\"$1ေ\\\"], [/([\\\\u103b\\\\u103c\\\\u103d])(\\\\u1064)/g, \\\"$2$1\\\"], [/\\\\u1031(\\\\u1064)/g, \\\"$1ေ\\\"], [/([\\\\u1000-\\\\u1021])(\\\\u1064)/g, \\\"$2$1\\\"], [/\\\\u0020(\\\\u1039[\\\\u1000-\\\\u1021])/g, \\\"$1\\\"], [/\\\\u1064/g, \\\"င်္\\\"]], asLongAsMatch: [[/([\\\\u102b\\\\u102c\\\\u102d\\\\u102e\\\\u1031\\\\u102f\\\\u1030\\\\u1032\\\\u1036\\\\u1037\\\\u1038])([\\\\u103b\\\\u103c\\\\u103d\\\\u103e])/g, \\\"$2$1\\\"], [/\\\\u103d([\\\\u103b\\\\u103c])/g, \\\"$1ွ\\\"], [/\\\\u103e([\\\\u103b\\\\u103c\\\\u103d])/g, \\\"$1ှ\\\"], [/([\\\\u102f\\\\u1030])([\\\\u102d\\\\u102e])/g, \\\"$2$1\\\"], [/\\\\u1036([\\\\u102d\\\\u102e\\\\u102f\\\\u1030])/g, \\\"$1ံ\\\"], [/\\\\u1037([\\\\u1031\\\\u102c\\\\u102b\\\\u102f\\\\u1030\\\\u1032])/g, \\\"$1့\\\"], [/([\\\\u1031\\\\u102b\\\\u102c])(\\\\u1039[\\\\u1000-\\\\u1021])/g, \\\"$2$1\\\"], [/([\\\\u102b\\\\u102c])(\\\\u1004\\\\u103a\\\\u1039)/g, \\\"$2$1\\\"]] } } }, s.debugging = function (A, g, B) {\\n    return s.apply({ debug: !0 }, [A, g, B]);\\n  }, A.exports = s;\\n}, function (A, g, B) {\\n  \\\"use strict\\\";\\n  Object.defineProperty(g, \\\"__esModule\\\", { value: !0 });var w,\\n      u = 4096,\\n      C = 4159,\\n      Q = 4170,\\n      c = 4255,\\n      v = 43616,\\n      s = 43647,\\n      e = 43488,\\n      r = 43519,\\n      E = 8192,\\n      P = 8203,\\n      t = 1,\\n      M = t + C - u + 1,\\n      o = M + c - Q + 1,\\n      D = o + s - v + 1,\\n      b = D + r - e + 1;function L(A) {\\n    return u <= A && A <= C ? A - u + t : Q <= A && A <= c ? A - Q + M : v <= A && A <= s ? A - v + o : e <= A && A <= r ? A - e + D : E <= A && A <= P ? A - E + b : 0;\\n  }function I(A, g, B, w, u) {\\n    var C = A.getUint32(g);if (g += 4, C != B) throw new Error(\\\"Unexpected magic number lead; expected \\\" + B.toString(16) + \\\" but got \\\" + C.toString(16));var Q = A.getUint32(g);if (g += 4, Q != w) throw new Error(\\\"Unexpected magic number trail; expected \\\" + w.toString(16) + \\\" but got \\\" + Q.toString(16));var c = A.getUint32(g);if (g += 4, c != u) throw new Error(\\\"Unexpected serial version number; expected \\\" + u.toString(16) + \\\" but got \\\" + c.toString(16));return g;\\n  }w = function w() {\\n    for (var A = new Buffer(\\\"\\\", \\\"base64\\\"), g = new ArrayBuffer(A.length), B = new Uint8Array(g), w = 0; w < A.length; w++) {\\n      B[w] = A[w];\\n    }return g;\\n  };var i = function () {\\n    function A(g, B) {\\n      B = I(g, B, A.BINARY_TAG_LEAD, A.BINARY_TAG_TRAIL, A.BINARY_VERSION);var w = g.getInt16(B);B += 2;for (var u = [], C = 0; C < w; C++) {\\n        u[C] = [];var Q = g.getInt16(B);B += 2;var c = void 0;0 == Q ? c = 0 : (c = g.getFloat32(B), B += 4);for (var v = -1, s = 0; s < w; s++) {\\n          Q > 0 && v < s && (v = g.getInt16(B), B += 2, Q--), v == s ? (u[C][s] = g.getFloat32(B), B += 4) : u[C][s] = c;\\n        }\\n      }this.logProbabilityDifferences = u;\\n    }return A.prototype.getLogProbabilityDifference = function (A, g) {\\n      return this.logProbabilityDifferences[A][g];\\n    }, A.BINARY_TAG_LEAD = 1112359250, A.BINARY_TAG_TRAIL = 1263490592, A.BINARY_VERSION = 0, A;\\n  }(),\\n      n = function () {\\n    function A(g, B) {\\n      B = I(g, B, A.BINARY_TAG_LEAD, A.BINARY_TAG_TRAIL, A.BINARY_VERSION), this.classifier = new i(g, B);\\n    }return A.prototype.predict = function (A) {\\n      for (var g = 0, B = 0, w = !1, u = 0; u <= A.length; u++) {\\n        var C = void 0;if (u == A.length) C = 0;else C = L(A.charCodeAt(u));if (0 != g || 0 != C) B += this.classifier.getLogProbabilityDifference(g, C), w = !0;g = C;\\n      }return w ? 1 / (1 + Math.exp(B)) : Number.NEGATIVE_INFINITY;\\n    }, A.BINARY_TAG_LEAD = 1431981391, A.BINARY_TAG_TRAIL = 1145392160, A.BINARY_VERSION = 1, A;\\n  }(),\\n      H = function () {\\n    function A() {\\n      var A = w();this.model = new n(new DataView(A, 0), 0);\\n    }return A.prototype.getZawgyiProbability = function (A) {\\n      return this.model.predict(A);\\n    }, A;\\n  }();g.ZawgyiDetector = H;\\n}, function (A, g, B) {\\n  \\\"use strict\\\";\\n  A.exports = { ZawgyiDetector: B(6).ZawgyiDetector };\\n}, function (A, g, B) {\\n  \\\"use strict\\\";\\n  var w = B(0),\\n      u = B(1),\\n      C = B(5),\\n      Q = B(4),\\n      c = B(2),\\n      v = B(3).version;A.exports = { version: v, setGlobalOptions: w.setOptions, fontDetect: u, fontConvert: C, syllBreak: Q, spellingFix: c };\\n}]);\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \\\"./node_modules/buffer/index.js\\\").Buffer))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/knayi-myscript/dist/knayi-myscript.es.js\\n\");\n\n//# sourceURL=webpack:///./node_modules/knayi-myscript/dist/knayi-myscript.es.js?");

/***/ }),

/***/ "./node_modules/phoenix/priv/static/phoenix.js":
/*!*****************************************************!*\
  !*** ./node_modules/phoenix/priv/static/phoenix.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\\n\\nvar _typeof2 = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n(function (global, factory) {\\n  ( false ? undefined : _typeof2(exports)) === 'object' ? factory(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\\n})(undefined, function (exports) {\\n  \\\"use strict\\\";\\n\\n  Object.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n  });\\n\\n  var _typeof = typeof Symbol === \\\"function\\\" && _typeof2(Symbol.iterator) === \\\"symbol\\\" ? function (obj) {\\n    return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\\n  } : function (obj) {\\n    return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\\n  };\\n\\n  var _slicedToArray = function () {\\n    function sliceIterator(arr, i) {\\n      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {\\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\\n          _arr.push(_s.value);if (i && _arr.length === i) break;\\n        }\\n      } catch (err) {\\n        _d = true;_e = err;\\n      } finally {\\n        try {\\n          if (!_n && _i[\\\"return\\\"]) _i[\\\"return\\\"]();\\n        } finally {\\n          if (_d) throw _e;\\n        }\\n      }return _arr;\\n    }return function (arr, i) {\\n      if (Array.isArray(arr)) {\\n        return arr;\\n      } else if (Symbol.iterator in Object(arr)) {\\n        return sliceIterator(arr, i);\\n      } else {\\n        throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance\\\");\\n      }\\n    };\\n  }();\\n\\n  var _createClass = function () {\\n    function defineProperties(target, props) {\\n      for (var i = 0; i < props.length; i++) {\\n        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\\\"value\\\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\\n      }\\n    }return function (Constructor, protoProps, staticProps) {\\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\\n    };\\n  }();\\n\\n  function _toConsumableArray(arr) {\\n    if (Array.isArray(arr)) {\\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\\n        arr2[i] = arr[i];\\n      }return arr2;\\n    } else {\\n      return Array.from(arr);\\n    }\\n  }\\n\\n  function _classCallCheck(instance, Constructor) {\\n    if (!(instance instanceof Constructor)) {\\n      throw new TypeError(\\\"Cannot call a class as a function\\\");\\n    }\\n  }\\n\\n  /**\\n   * Phoenix Channels JavaScript client\\n   *\\n   * ## Socket Connection\\n   *\\n   * A single connection is established to the server and\\n   * channels are multiplexed over the connection.\\n   * Connect to the server using the `Socket` class:\\n   *\\n   * ```javascript\\n   *     let socket = new Socket(\\\"/socket\\\", {params: {userToken: \\\"123\\\"}})\\n   *     socket.connect()\\n   * ```\\n   *\\n   * The `Socket` constructor takes the mount point of the socket,\\n   * the authentication params, as well as options that can be found in\\n   * the Socket docs, such as configuring the `LongPoll` transport, and\\n   * heartbeat.\\n   *\\n   * ## Channels\\n   *\\n   * Channels are isolated, concurrent processes on the server that\\n   * subscribe to topics and broker events between the client and server.\\n   * To join a channel, you must provide the topic, and channel params for\\n   * authorization. Here's an example chat room example where `\\\"new_msg\\\"`\\n   * events are listened for, messages are pushed to the server, and\\n   * the channel is joined with ok/error/timeout matches:\\n   *\\n   * ```javascript\\n   *     let channel = socket.channel(\\\"room:123\\\", {token: roomToken})\\n   *     channel.on(\\\"new_msg\\\", msg => console.log(\\\"Got message\\\", msg) )\\n   *     $input.onEnter( e => {\\n   *       channel.push(\\\"new_msg\\\", {body: e.target.val}, 10000)\\n   *        .receive(\\\"ok\\\", (msg) => console.log(\\\"created message\\\", msg) )\\n   *        .receive(\\\"error\\\", (reasons) => console.log(\\\"create failed\\\", reasons) )\\n   *        .receive(\\\"timeout\\\", () => console.log(\\\"Networking issue...\\\") )\\n   *     })\\n   *     channel.join()\\n   *       .receive(\\\"ok\\\", ({messages}) => console.log(\\\"catching up\\\", messages) )\\n   *       .receive(\\\"error\\\", ({reason}) => console.log(\\\"failed join\\\", reason) )\\n   *       .receive(\\\"timeout\\\", () => console.log(\\\"Networking issue. Still waiting...\\\") )\\n   *```\\n   *\\n   * ## Joining\\n   *\\n   * Creating a channel with `socket.channel(topic, params)`, binds the params to\\n   * `channel.params`, which are sent up on `channel.join()`.\\n   * Subsequent rejoins will send up the modified params for\\n   * updating authorization params, or passing up last_message_id information.\\n   * Successful joins receive an \\\"ok\\\" status, while unsuccessful joins\\n   * receive \\\"error\\\".\\n   *\\n   * ## Duplicate Join Subscriptions\\n   *\\n   * While the client may join any number of topics on any number of channels,\\n   * the client may only hold a single subscription for each unique topic at any\\n   * given time. When attempting to create a duplicate subscription,\\n   * the server will close the existing channel, log a warning, and\\n   * spawn a new channel for the topic. The client will have their\\n   * `channel.onClose` callbacks fired for the existing channel, and the new\\n   * channel join will have its receive hooks processed as normal.\\n   *\\n   * ## Pushing Messages\\n   *\\n   * From the previous example, we can see that pushing messages to the server\\n   * can be done with `channel.push(eventName, payload)` and we can optionally\\n   * receive responses from the push. Additionally, we can use\\n   * `receive(\\\"timeout\\\", callback)` to abort waiting for our other `receive` hooks\\n   *  and take action after some period of waiting. The default timeout is 5000ms.\\n   *\\n   *\\n   * ## Socket Hooks\\n   *\\n   * Lifecycle events of the multiplexed connection can be hooked into via\\n   * `socket.onError()` and `socket.onClose()` events, ie:\\n   *\\n   * ```javascript\\n   *     socket.onError( () => console.log(\\\"there was an error with the connection!\\\") )\\n   *     socket.onClose( () => console.log(\\\"the connection dropped\\\") )\\n   * ```\\n   *\\n   *\\n   * ## Channel Hooks\\n   *\\n   * For each joined channel, you can bind to `onError` and `onClose` events\\n   * to monitor the channel lifecycle, ie:\\n   *\\n   * ```javascript\\n   *     channel.onError( () => console.log(\\\"there was an error!\\\") )\\n   *     channel.onClose( () => console.log(\\\"the channel has gone away gracefully\\\") )\\n   * ```\\n   *\\n   * ### onError hooks\\n   *\\n   * `onError` hooks are invoked if the socket connection drops, or the channel\\n   * crashes on the server. In either case, a channel rejoin is attempted\\n   * automatically in an exponential backoff manner.\\n   *\\n   * ### onClose hooks\\n   *\\n   * `onClose` hooks are invoked only in two cases. 1) the channel explicitly\\n   * closed on the server, or 2). The client explicitly closed, by calling\\n   * `channel.leave()`\\n   *\\n   *\\n   * ## Presence\\n   *\\n   * The `Presence` object provides features for syncing presence information\\n   * from the server with the client and handling presences joining and leaving.\\n   *\\n   * ### Syncing initial state from the server\\n   *\\n   * `Presence.syncState` is used to sync the list of presences on the server\\n   * with the client's state. An optional `onJoin` and `onLeave` callback can\\n   * be provided to react to changes in the client's local presences across\\n   * disconnects and reconnects with the server.\\n   *\\n   * `Presence.syncDiff` is used to sync a diff of presence join and leave\\n   * events from the server, as they happen. Like `syncState`, `syncDiff`\\n   * accepts optional `onJoin` and `onLeave` callbacks to react to a user\\n   * joining or leaving from a device.\\n   *\\n   * ### Listing Presences\\n   *\\n   * `Presence.list` is used to return a list of presence information\\n   * based on the local state of metadata. By default, all presence\\n   * metadata is returned, but a `listBy` function can be supplied to\\n   * allow the client to select which metadata to use for a given presence.\\n   * For example, you may have a user online from different devices with\\n   * a metadata status of \\\"online\\\", but they have set themselves to \\\"away\\\"\\n   * on another device. In this case, the app may choose to use the \\\"away\\\"\\n   * status for what appears on the UI. The example below defines a `listBy`\\n   * function which prioritizes the first metadata which was registered for\\n   * each user. This could be the first tab they opened, or the first device\\n   * they came online from:\\n   *\\n   * ```javascript\\n   *     let state = {}\\n   *     state = Presence.syncState(state, stateFromServer)\\n   *     let listBy = (id, {metas: [first, ...rest]}) => {\\n   *       first.count = rest.length + 1 // count of this user's presences\\n   *       first.id = id\\n   *       return first\\n   *     }\\n   *     let onlineUsers = Presence.list(state, listBy)\\n   * ```\\n   *\\n   *\\n   * ### Example Usage\\n   *```javascript\\n   *     // detect if user has joined for the 1st time or from another tab/device\\n   *     let onJoin = (id, current, newPres) => {\\n   *       if(!current){\\n   *         console.log(\\\"user has entered for the first time\\\", newPres)\\n   *       } else {\\n   *         console.log(\\\"user additional presence\\\", newPres)\\n   *       }\\n   *     }\\n   *     // detect if user has left from all tabs/devices, or is still present\\n   *     let onLeave = (id, current, leftPres) => {\\n   *       if(current.metas.length === 0){\\n   *         console.log(\\\"user has left from all devices\\\", leftPres)\\n   *       } else {\\n   *         console.log(\\\"user left from a device\\\", leftPres)\\n   *       }\\n   *     }\\n   *     let presences = {} // client's initial empty presence state\\n   *     // receive initial presence data from server, sent after join\\n   *     myChannel.on(\\\"presence_state\\\", state => {\\n   *       presences = Presence.syncState(presences, state, onJoin, onLeave)\\n   *       displayUsers(Presence.list(presences))\\n   *     })\\n   *     // receive \\\"presence_diff\\\" from server, containing join/leave events\\n   *     myChannel.on(\\\"presence_diff\\\", diff => {\\n   *       presences = Presence.syncDiff(presences, diff, onJoin, onLeave)\\n   *       this.setState({users: Presence.list(room.presences, listBy)})\\n   *     })\\n   * ```\\n   * @module phoenix\\n   */\\n\\n  var VSN = \\\"2.0.0\\\";\\n  var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };\\n  var DEFAULT_TIMEOUT = 10000;\\n  var WS_CLOSE_NORMAL = 1000;\\n  var CHANNEL_STATES = {\\n    closed: \\\"closed\\\",\\n    errored: \\\"errored\\\",\\n    joined: \\\"joined\\\",\\n    joining: \\\"joining\\\",\\n    leaving: \\\"leaving\\\"\\n  };\\n  var CHANNEL_EVENTS = {\\n    close: \\\"phx_close\\\",\\n    error: \\\"phx_error\\\",\\n    join: \\\"phx_join\\\",\\n    reply: \\\"phx_reply\\\",\\n    leave: \\\"phx_leave\\\"\\n  };\\n  var CHANNEL_LIFECYCLE_EVENTS = [CHANNEL_EVENTS.close, CHANNEL_EVENTS.error, CHANNEL_EVENTS.join, CHANNEL_EVENTS.reply, CHANNEL_EVENTS.leave];\\n  var TRANSPORTS = {\\n    longpoll: \\\"longpoll\\\",\\n    websocket: \\\"websocket\\\"\\n  };\\n\\n  /**\\n   * Initializes the Push\\n   * @param {Channel} channel - The Channel\\n   * @param {string} event - The event, for example `\\\"phx_join\\\"`\\n   * @param {Object} payload - The payload, for example `{user_id: 123}`\\n   * @param {number} timeout - The push timeout in milliseconds\\n   */\\n\\n  var Push = function () {\\n    function Push(channel, event, payload, timeout) {\\n      _classCallCheck(this, Push);\\n\\n      this.channel = channel;\\n      this.event = event;\\n      this.payload = payload || {};\\n      this.receivedResp = null;\\n      this.timeout = timeout;\\n      this.timeoutTimer = null;\\n      this.recHooks = [];\\n      this.sent = false;\\n    }\\n\\n    /**\\n     *\\n     * @param {number} timeout\\n     */\\n\\n    _createClass(Push, [{\\n      key: \\\"resend\\\",\\n      value: function resend(timeout) {\\n        this.timeout = timeout;\\n        this.reset();\\n        this.send();\\n      }\\n\\n      /**\\n       *\\n       */\\n\\n    }, {\\n      key: \\\"send\\\",\\n      value: function send() {\\n        if (this.hasReceived(\\\"timeout\\\")) {\\n          return;\\n        }\\n        this.startTimeout();\\n        this.sent = true;\\n        this.channel.socket.push({\\n          topic: this.channel.topic,\\n          event: this.event,\\n          payload: this.payload,\\n          ref: this.ref,\\n          join_ref: this.channel.joinRef()\\n        });\\n      }\\n\\n      /**\\n       *\\n       * @param {*} status\\n       * @param {*} callback\\n       */\\n\\n    }, {\\n      key: \\\"receive\\\",\\n      value: function receive(status, callback) {\\n        if (this.hasReceived(status)) {\\n          callback(this.receivedResp.response);\\n        }\\n\\n        this.recHooks.push({ status: status, callback: callback });\\n        return this;\\n      }\\n\\n      // private\\n\\n    }, {\\n      key: \\\"reset\\\",\\n      value: function reset() {\\n        this.cancelRefEvent();\\n        this.ref = null;\\n        this.refEvent = null;\\n        this.receivedResp = null;\\n        this.sent = false;\\n      }\\n    }, {\\n      key: \\\"matchReceive\\\",\\n      value: function matchReceive(_ref) {\\n        var status = _ref.status,\\n            response = _ref.response,\\n            ref = _ref.ref;\\n\\n        this.recHooks.filter(function (h) {\\n          return h.status === status;\\n        }).forEach(function (h) {\\n          return h.callback(response);\\n        });\\n      }\\n    }, {\\n      key: \\\"cancelRefEvent\\\",\\n      value: function cancelRefEvent() {\\n        if (!this.refEvent) {\\n          return;\\n        }\\n        this.channel.off(this.refEvent);\\n      }\\n    }, {\\n      key: \\\"cancelTimeout\\\",\\n      value: function cancelTimeout() {\\n        clearTimeout(this.timeoutTimer);\\n        this.timeoutTimer = null;\\n      }\\n    }, {\\n      key: \\\"startTimeout\\\",\\n      value: function startTimeout() {\\n        var _this = this;\\n\\n        if (this.timeoutTimer) {\\n          this.cancelTimeout();\\n        }\\n        this.ref = this.channel.socket.makeRef();\\n        this.refEvent = this.channel.replyEventName(this.ref);\\n\\n        this.channel.on(this.refEvent, function (payload) {\\n          _this.cancelRefEvent();\\n          _this.cancelTimeout();\\n          _this.receivedResp = payload;\\n          _this.matchReceive(payload);\\n        });\\n\\n        this.timeoutTimer = setTimeout(function () {\\n          _this.trigger(\\\"timeout\\\", {});\\n        }, this.timeout);\\n      }\\n    }, {\\n      key: \\\"hasReceived\\\",\\n      value: function hasReceived(status) {\\n        return this.receivedResp && this.receivedResp.status === status;\\n      }\\n    }, {\\n      key: \\\"trigger\\\",\\n      value: function trigger(status, response) {\\n        this.channel.trigger(this.refEvent, { status: status, response: response });\\n      }\\n    }]);\\n\\n    return Push;\\n  }();\\n\\n  /**\\n   *\\n   * @param {string} topic\\n   * @param {Object} params\\n   * @param {Socket} socket\\n   */\\n\\n  var Channel = exports.Channel = function () {\\n    function Channel(topic, params, socket) {\\n      var _this2 = this;\\n\\n      _classCallCheck(this, Channel);\\n\\n      this.state = CHANNEL_STATES.closed;\\n      this.topic = topic;\\n      this.params = params || {};\\n      this.socket = socket;\\n      this.bindings = [];\\n      this.timeout = this.socket.timeout;\\n      this.joinedOnce = false;\\n      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\\n      this.pushBuffer = [];\\n      this.rejoinTimer = new Timer(function () {\\n        return _this2.rejoinUntilConnected();\\n      }, this.socket.reconnectAfterMs);\\n      this.joinPush.receive(\\\"ok\\\", function () {\\n        _this2.state = CHANNEL_STATES.joined;\\n        _this2.rejoinTimer.reset();\\n        _this2.pushBuffer.forEach(function (pushEvent) {\\n          return pushEvent.send();\\n        });\\n        _this2.pushBuffer = [];\\n      });\\n      this.onClose(function () {\\n        _this2.rejoinTimer.reset();\\n        _this2.socket.log(\\\"channel\\\", \\\"close \\\" + _this2.topic + \\\" \\\" + _this2.joinRef());\\n        _this2.state = CHANNEL_STATES.closed;\\n        _this2.socket.remove(_this2);\\n      });\\n      this.onError(function (reason) {\\n        if (_this2.isLeaving() || _this2.isClosed()) {\\n          return;\\n        }\\n        _this2.socket.log(\\\"channel\\\", \\\"error \\\" + _this2.topic, reason);\\n        _this2.state = CHANNEL_STATES.errored;\\n        _this2.rejoinTimer.scheduleTimeout();\\n      });\\n      this.joinPush.receive(\\\"timeout\\\", function () {\\n        if (!_this2.isJoining()) {\\n          return;\\n        }\\n        _this2.socket.log(\\\"channel\\\", \\\"timeout \\\" + _this2.topic + \\\" (\\\" + _this2.joinRef() + \\\")\\\", _this2.joinPush.timeout);\\n        var leavePush = new Push(_this2, CHANNEL_EVENTS.leave, {}, _this2.timeout);\\n        leavePush.send();\\n        _this2.state = CHANNEL_STATES.errored;\\n        _this2.joinPush.reset();\\n        _this2.rejoinTimer.scheduleTimeout();\\n      });\\n      this.on(CHANNEL_EVENTS.reply, function (payload, ref) {\\n        _this2.trigger(_this2.replyEventName(ref), payload);\\n      });\\n    }\\n\\n    _createClass(Channel, [{\\n      key: \\\"rejoinUntilConnected\\\",\\n      value: function rejoinUntilConnected() {\\n        this.rejoinTimer.scheduleTimeout();\\n        if (this.socket.isConnected()) {\\n          this.rejoin();\\n        }\\n      }\\n    }, {\\n      key: \\\"join\\\",\\n      value: function join() {\\n        var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\\n\\n        if (this.joinedOnce) {\\n          throw \\\"tried to join multiple times. 'join' can only be called a single time per channel instance\\\";\\n        } else {\\n          this.joinedOnce = true;\\n          this.rejoin(timeout);\\n          return this.joinPush;\\n        }\\n      }\\n    }, {\\n      key: \\\"onClose\\\",\\n      value: function onClose(callback) {\\n        this.on(CHANNEL_EVENTS.close, callback);\\n      }\\n    }, {\\n      key: \\\"onError\\\",\\n      value: function onError(callback) {\\n        this.on(CHANNEL_EVENTS.error, function (reason) {\\n          return callback(reason);\\n        });\\n      }\\n    }, {\\n      key: \\\"on\\\",\\n      value: function on(event, callback) {\\n        this.bindings.push({ event: event, callback: callback });\\n      }\\n    }, {\\n      key: \\\"off\\\",\\n      value: function off(event) {\\n        this.bindings = this.bindings.filter(function (bind) {\\n          return bind.event !== event;\\n        });\\n      }\\n    }, {\\n      key: \\\"canPush\\\",\\n      value: function canPush() {\\n        return this.socket.isConnected() && this.isJoined();\\n      }\\n    }, {\\n      key: \\\"push\\\",\\n      value: function push(event, payload) {\\n        var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\\n\\n        if (!this.joinedOnce) {\\n          throw \\\"tried to push '\\\" + event + \\\"' to '\\\" + this.topic + \\\"' before joining. Use channel.join() before pushing events\\\";\\n        }\\n        var pushEvent = new Push(this, event, payload, timeout);\\n        if (this.canPush()) {\\n          pushEvent.send();\\n        } else {\\n          pushEvent.startTimeout();\\n          this.pushBuffer.push(pushEvent);\\n        }\\n\\n        return pushEvent;\\n      }\\n\\n      /** Leaves the channel\\n       *\\n       * Unsubscribes from server events, and\\n       * instructs channel to terminate on server\\n       *\\n       * Triggers onClose() hooks\\n       *\\n       * To receive leave acknowledgements, use the a `receive`\\n       * hook to bind to the server ack, ie:\\n       *\\n       * ```javascript\\n       *     channel.leave().receive(\\\"ok\\\", () => alert(\\\"left!\\\") )\\n       * ```\\n       */\\n\\n    }, {\\n      key: \\\"leave\\\",\\n      value: function leave() {\\n        var _this3 = this;\\n\\n        var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\\n\\n        this.state = CHANNEL_STATES.leaving;\\n        var onClose = function onClose() {\\n          _this3.socket.log(\\\"channel\\\", \\\"leave \\\" + _this3.topic);\\n          _this3.trigger(CHANNEL_EVENTS.close, \\\"leave\\\");\\n        };\\n        var leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\\n        leavePush.receive(\\\"ok\\\", function () {\\n          return onClose();\\n        }).receive(\\\"timeout\\\", function () {\\n          return onClose();\\n        });\\n        leavePush.send();\\n        if (!this.canPush()) {\\n          leavePush.trigger(\\\"ok\\\", {});\\n        }\\n\\n        return leavePush;\\n      }\\n\\n      /**\\n       * Overridable message hook\\n       *\\n       * Receives all events for specialized message handling\\n       * before dispatching to the channel callbacks.\\n       *\\n       * Must return the payload, modified or unmodified\\n       */\\n\\n    }, {\\n      key: \\\"onMessage\\\",\\n      value: function onMessage(event, payload, ref) {\\n        return payload;\\n      }\\n\\n      // private\\n\\n    }, {\\n      key: \\\"isMember\\\",\\n      value: function isMember(topic, event, payload, joinRef) {\\n        if (this.topic !== topic) {\\n          return false;\\n        }\\n        var isLifecycleEvent = CHANNEL_LIFECYCLE_EVENTS.indexOf(event) >= 0;\\n\\n        if (joinRef && isLifecycleEvent && joinRef !== this.joinRef()) {\\n          this.socket.log(\\\"channel\\\", \\\"dropping outdated message\\\", { topic: topic, event: event, payload: payload, joinRef: joinRef });\\n          return false;\\n        } else {\\n          return true;\\n        }\\n      }\\n    }, {\\n      key: \\\"joinRef\\\",\\n      value: function joinRef() {\\n        return this.joinPush.ref;\\n      }\\n    }, {\\n      key: \\\"sendJoin\\\",\\n      value: function sendJoin(timeout) {\\n        this.state = CHANNEL_STATES.joining;\\n        this.joinPush.resend(timeout);\\n      }\\n    }, {\\n      key: \\\"rejoin\\\",\\n      value: function rejoin() {\\n        var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\\n        if (this.isLeaving()) {\\n          return;\\n        }\\n        this.sendJoin(timeout);\\n      }\\n    }, {\\n      key: \\\"trigger\\\",\\n      value: function trigger(event, payload, ref, joinRef) {\\n        var _this4 = this;\\n\\n        var handledPayload = this.onMessage(event, payload, ref, joinRef);\\n        if (payload && !handledPayload) {\\n          throw \\\"channel onMessage callbacks must return the payload, modified or unmodified\\\";\\n        }\\n\\n        this.bindings.filter(function (bind) {\\n          return bind.event === event;\\n        }).map(function (bind) {\\n          return bind.callback(handledPayload, ref, joinRef || _this4.joinRef());\\n        });\\n      }\\n    }, {\\n      key: \\\"replyEventName\\\",\\n      value: function replyEventName(ref) {\\n        return \\\"chan_reply_\\\" + ref;\\n      }\\n    }, {\\n      key: \\\"isClosed\\\",\\n      value: function isClosed() {\\n        return this.state === CHANNEL_STATES.closed;\\n      }\\n    }, {\\n      key: \\\"isErrored\\\",\\n      value: function isErrored() {\\n        return this.state === CHANNEL_STATES.errored;\\n      }\\n    }, {\\n      key: \\\"isJoined\\\",\\n      value: function isJoined() {\\n        return this.state === CHANNEL_STATES.joined;\\n      }\\n    }, {\\n      key: \\\"isJoining\\\",\\n      value: function isJoining() {\\n        return this.state === CHANNEL_STATES.joining;\\n      }\\n    }, {\\n      key: \\\"isLeaving\\\",\\n      value: function isLeaving() {\\n        return this.state === CHANNEL_STATES.leaving;\\n      }\\n    }]);\\n\\n    return Channel;\\n  }();\\n\\n  var Serializer = {\\n    encode: function encode(msg, callback) {\\n      var payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];\\n      return callback(JSON.stringify(payload));\\n    },\\n    decode: function decode(rawPayload, callback) {\\n      var _JSON$parse = JSON.parse(rawPayload),\\n          _JSON$parse2 = _slicedToArray(_JSON$parse, 5),\\n          join_ref = _JSON$parse2[0],\\n          ref = _JSON$parse2[1],\\n          topic = _JSON$parse2[2],\\n          event = _JSON$parse2[3],\\n          payload = _JSON$parse2[4];\\n\\n      return callback({ join_ref: join_ref, ref: ref, topic: topic, event: event, payload: payload });\\n    }\\n  };\\n\\n  /** Initializes the Socket\\n   *\\n   *\\n   * For IE8 support use an ES5-shim (https://github.com/es-shims/es5-shim)\\n   *\\n   * @param {string} endPoint - The string WebSocket endpoint, ie, `\\\"ws://example.com/socket\\\"`,\\n   *                                               `\\\"wss://example.com\\\"`\\n   *                                               `\\\"/socket\\\"` (inherited host & protocol)\\n   * @param {Object} opts - Optional configuration\\n   * @param {string} opts.transport - The Websocket Transport, for example WebSocket or Phoenix.LongPoll.\\n   *\\n   * Defaults to WebSocket with automatic LongPoll fallback.\\n   * @param {Function} opts.encode - The function to encode outgoing messages.\\n   *\\n   * Defaults to JSON:\\n   *\\n   * ```javascript\\n   * (payload, callback) => callback(JSON.stringify(payload))\\n   * ```\\n   *\\n   * @param {Function} opts.decode - The function to decode incoming messages.\\n   *\\n   * Defaults to JSON:\\n   *\\n   * ```javascript\\n   * (payload, callback) => callback(JSON.parse(payload))\\n   * ```\\n   *\\n   * @param {number} opts.timeout - The default timeout in milliseconds to trigger push timeouts.\\n   *\\n   * Defaults `DEFAULT_TIMEOUT`\\n   * @param {number} opts.heartbeatIntervalMs - The millisec interval to send a heartbeat message\\n   * @param {number} opts.reconnectAfterMs - The optional function that returns the millsec reconnect interval.\\n   *\\n   * Defaults to stepped backoff of:\\n   *\\n   * ```javascript\\n   *  function(tries){\\n   *    return [1000, 5000, 10000][tries - 1] || 10000\\n   *  }\\n   * ```\\n   * @param {Function} opts.logger - The optional function for specialized logging, ie:\\n   * ```javascript\\n   * logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\\n   * ```\\n   *\\n   * @param {number}  opts.longpollerTimeout - The maximum timeout of a long poll AJAX request.\\n   *\\n   * Defaults to 20s (double the server long poll timer).\\n   *\\n   * @param {Object}  opts.params - The optional params to pass when connecting\\n   *\\n   *\\n  */\\n\\n  var Socket = exports.Socket = function () {\\n    function Socket(endPoint) {\\n      var _this5 = this;\\n\\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n\\n      _classCallCheck(this, Socket);\\n\\n      this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };\\n      this.channels = [];\\n      this.sendBuffer = [];\\n      this.ref = 0;\\n      this.timeout = opts.timeout || DEFAULT_TIMEOUT;\\n      this.transport = opts.transport || window.WebSocket || LongPoll;\\n      this.defaultEncoder = Serializer.encode;\\n      this.defaultDecoder = Serializer.decode;\\n      if (this.transport !== LongPoll) {\\n        this.encode = opts.encode || this.defaultEncoder;\\n        this.decode = opts.decode || this.defaultDecoder;\\n      } else {\\n        this.encode = this.defaultEncoder;\\n        this.decode = this.defaultDecoder;\\n      }\\n      this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 30000;\\n      this.reconnectAfterMs = opts.reconnectAfterMs || function (tries) {\\n        return [1000, 2000, 5000, 10000][tries - 1] || 10000;\\n      };\\n      this.logger = opts.logger || function () {}; // noop\\n      this.longpollerTimeout = opts.longpollerTimeout || 20000;\\n      this.params = opts.params || {};\\n      this.endPoint = endPoint + \\\"/\\\" + TRANSPORTS.websocket;\\n      this.heartbeatTimer = null;\\n      this.pendingHeartbeatRef = null;\\n      this.reconnectTimer = new Timer(function () {\\n        _this5.disconnect(function () {\\n          return _this5.connect();\\n        });\\n      }, this.reconnectAfterMs);\\n    }\\n\\n    _createClass(Socket, [{\\n      key: \\\"protocol\\\",\\n      value: function protocol() {\\n        return location.protocol.match(/^https/) ? \\\"wss\\\" : \\\"ws\\\";\\n      }\\n    }, {\\n      key: \\\"endPointURL\\\",\\n      value: function endPointURL() {\\n        var uri = Ajax.appendParams(Ajax.appendParams(this.endPoint, this.params), { vsn: VSN });\\n        if (uri.charAt(0) !== \\\"/\\\") {\\n          return uri;\\n        }\\n        if (uri.charAt(1) === \\\"/\\\") {\\n          return this.protocol() + \\\":\\\" + uri;\\n        }\\n\\n        return this.protocol() + \\\"://\\\" + location.host + uri;\\n      }\\n    }, {\\n      key: \\\"disconnect\\\",\\n      value: function disconnect(callback, code, reason) {\\n        if (this.conn) {\\n          this.conn.onclose = function () {}; // noop\\n          if (code) {\\n            this.conn.close(code, reason || \\\"\\\");\\n          } else {\\n            this.conn.close();\\n          }\\n          this.conn = null;\\n        }\\n        callback && callback();\\n      }\\n\\n      /**\\n       *\\n       * @param {Object} params - The params to send when connecting, for example `{user_id: userToken}`\\n       */\\n\\n    }, {\\n      key: \\\"connect\\\",\\n      value: function connect(params) {\\n        var _this6 = this;\\n\\n        if (params) {\\n          console && console.log(\\\"passing params to connect is deprecated. Instead pass :params to the Socket constructor\\\");\\n          this.params = params;\\n        }\\n        if (this.conn) {\\n          return;\\n        }\\n\\n        this.conn = new this.transport(this.endPointURL());\\n        this.conn.timeout = this.longpollerTimeout;\\n        this.conn.onopen = function () {\\n          return _this6.onConnOpen();\\n        };\\n        this.conn.onerror = function (error) {\\n          return _this6.onConnError(error);\\n        };\\n        this.conn.onmessage = function (event) {\\n          return _this6.onConnMessage(event);\\n        };\\n        this.conn.onclose = function (event) {\\n          return _this6.onConnClose(event);\\n        };\\n      }\\n\\n      /**\\n       * Logs the message. Override `this.logger` for specialized logging. noops by default\\n       * @param {string} kind\\n       * @param {string} msg\\n       * @param {Object} data\\n       */\\n\\n    }, {\\n      key: \\\"log\\\",\\n      value: function log(kind, msg, data) {\\n        this.logger(kind, msg, data);\\n      }\\n\\n      // Registers callbacks for connection state change events\\n      //\\n      // Examples\\n      //\\n      //    socket.onError(function(error){ alert(\\\"An error occurred\\\") })\\n      //\\n\\n    }, {\\n      key: \\\"onOpen\\\",\\n      value: function onOpen(callback) {\\n        this.stateChangeCallbacks.open.push(callback);\\n      }\\n    }, {\\n      key: \\\"onClose\\\",\\n      value: function onClose(callback) {\\n        this.stateChangeCallbacks.close.push(callback);\\n      }\\n    }, {\\n      key: \\\"onError\\\",\\n      value: function onError(callback) {\\n        this.stateChangeCallbacks.error.push(callback);\\n      }\\n    }, {\\n      key: \\\"onMessage\\\",\\n      value: function onMessage(callback) {\\n        this.stateChangeCallbacks.message.push(callback);\\n      }\\n    }, {\\n      key: \\\"onConnOpen\\\",\\n      value: function onConnOpen() {\\n        var _this7 = this;\\n\\n        this.log(\\\"transport\\\", \\\"connected to \\\" + this.endPointURL());\\n        this.flushSendBuffer();\\n        this.reconnectTimer.reset();\\n        if (!this.conn.skipHeartbeat) {\\n          clearInterval(this.heartbeatTimer);\\n          this.heartbeatTimer = setInterval(function () {\\n            return _this7.sendHeartbeat();\\n          }, this.heartbeatIntervalMs);\\n        }\\n        this.stateChangeCallbacks.open.forEach(function (callback) {\\n          return callback();\\n        });\\n      }\\n    }, {\\n      key: \\\"onConnClose\\\",\\n      value: function onConnClose(event) {\\n        this.log(\\\"transport\\\", \\\"close\\\", event);\\n        this.triggerChanError();\\n        clearInterval(this.heartbeatTimer);\\n        this.reconnectTimer.scheduleTimeout();\\n        this.stateChangeCallbacks.close.forEach(function (callback) {\\n          return callback(event);\\n        });\\n      }\\n    }, {\\n      key: \\\"onConnError\\\",\\n      value: function onConnError(error) {\\n        this.log(\\\"transport\\\", error);\\n        this.triggerChanError();\\n        this.stateChangeCallbacks.error.forEach(function (callback) {\\n          return callback(error);\\n        });\\n      }\\n    }, {\\n      key: \\\"triggerChanError\\\",\\n      value: function triggerChanError() {\\n        this.channels.forEach(function (channel) {\\n          return channel.trigger(CHANNEL_EVENTS.error);\\n        });\\n      }\\n    }, {\\n      key: \\\"connectionState\\\",\\n      value: function connectionState() {\\n        switch (this.conn && this.conn.readyState) {\\n          case SOCKET_STATES.connecting:\\n            return \\\"connecting\\\";\\n          case SOCKET_STATES.open:\\n            return \\\"open\\\";\\n          case SOCKET_STATES.closing:\\n            return \\\"closing\\\";\\n          default:\\n            return \\\"closed\\\";\\n        }\\n      }\\n    }, {\\n      key: \\\"isConnected\\\",\\n      value: function isConnected() {\\n        return this.connectionState() === \\\"open\\\";\\n      }\\n    }, {\\n      key: \\\"remove\\\",\\n      value: function remove(channel) {\\n        this.channels = this.channels.filter(function (c) {\\n          return c.joinRef() !== channel.joinRef();\\n        });\\n      }\\n    }, {\\n      key: \\\"channel\\\",\\n      value: function channel(topic) {\\n        var chanParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n\\n        var chan = new Channel(topic, chanParams, this);\\n        this.channels.push(chan);\\n        return chan;\\n      }\\n    }, {\\n      key: \\\"push\\\",\\n      value: function push(data) {\\n        var _this8 = this;\\n\\n        var topic = data.topic,\\n            event = data.event,\\n            payload = data.payload,\\n            ref = data.ref,\\n            join_ref = data.join_ref;\\n\\n        var callback = function callback() {\\n          _this8.encode(data, function (result) {\\n            _this8.conn.send(result);\\n          });\\n        };\\n        this.log(\\\"push\\\", topic + \\\" \\\" + event + \\\" (\\\" + join_ref + \\\", \\\" + ref + \\\")\\\", payload);\\n        if (this.isConnected()) {\\n          callback();\\n        } else {\\n          this.sendBuffer.push(callback);\\n        }\\n      }\\n\\n      /**\\n       * Return the next message ref, accounting for overflows\\n       */\\n\\n    }, {\\n      key: \\\"makeRef\\\",\\n      value: function makeRef() {\\n        var newRef = this.ref + 1;\\n        if (newRef === this.ref) {\\n          this.ref = 0;\\n        } else {\\n          this.ref = newRef;\\n        }\\n\\n        return this.ref.toString();\\n      }\\n    }, {\\n      key: \\\"sendHeartbeat\\\",\\n      value: function sendHeartbeat() {\\n        if (!this.isConnected()) {\\n          return;\\n        }\\n        if (this.pendingHeartbeatRef) {\\n          this.pendingHeartbeatRef = null;\\n          this.log(\\\"transport\\\", \\\"heartbeat timeout. Attempting to re-establish connection\\\");\\n          this.conn.close(WS_CLOSE_NORMAL, \\\"hearbeat timeout\\\");\\n          return;\\n        }\\n        this.pendingHeartbeatRef = this.makeRef();\\n        this.push({ topic: \\\"phoenix\\\", event: \\\"heartbeat\\\", payload: {}, ref: this.pendingHeartbeatRef });\\n      }\\n    }, {\\n      key: \\\"flushSendBuffer\\\",\\n      value: function flushSendBuffer() {\\n        if (this.isConnected() && this.sendBuffer.length > 0) {\\n          this.sendBuffer.forEach(function (callback) {\\n            return callback();\\n          });\\n          this.sendBuffer = [];\\n        }\\n      }\\n    }, {\\n      key: \\\"onConnMessage\\\",\\n      value: function onConnMessage(rawMessage) {\\n        var _this9 = this;\\n\\n        this.decode(rawMessage.data, function (msg) {\\n          var topic = msg.topic,\\n              event = msg.event,\\n              payload = msg.payload,\\n              ref = msg.ref,\\n              join_ref = msg.join_ref;\\n\\n          if (ref && ref === _this9.pendingHeartbeatRef) {\\n            _this9.pendingHeartbeatRef = null;\\n          }\\n\\n          _this9.log(\\\"receive\\\", (payload.status || \\\"\\\") + \\\" \\\" + topic + \\\" \\\" + event + \\\" \\\" + (ref && \\\"(\\\" + ref + \\\")\\\" || \\\"\\\"), payload);\\n          _this9.channels.filter(function (channel) {\\n            return channel.isMember(topic, event, payload, join_ref);\\n          }).forEach(function (channel) {\\n            return channel.trigger(event, payload, ref, join_ref);\\n          });\\n          _this9.stateChangeCallbacks.message.forEach(function (callback) {\\n            return callback(msg);\\n          });\\n        });\\n      }\\n    }]);\\n\\n    return Socket;\\n  }();\\n\\n  var LongPoll = exports.LongPoll = function () {\\n    function LongPoll(endPoint) {\\n      _classCallCheck(this, LongPoll);\\n\\n      this.endPoint = null;\\n      this.token = null;\\n      this.skipHeartbeat = true;\\n      this.onopen = function () {}; // noop\\n      this.onerror = function () {}; // noop\\n      this.onmessage = function () {}; // noop\\n      this.onclose = function () {}; // noop\\n      this.pollEndpoint = this.normalizeEndpoint(endPoint);\\n      this.readyState = SOCKET_STATES.connecting;\\n\\n      this.poll();\\n    }\\n\\n    _createClass(LongPoll, [{\\n      key: \\\"normalizeEndpoint\\\",\\n      value: function normalizeEndpoint(endPoint) {\\n        return endPoint.replace(\\\"ws://\\\", \\\"http://\\\").replace(\\\"wss://\\\", \\\"https://\\\").replace(new RegExp(\\\"(.*)\\\\/\\\" + TRANSPORTS.websocket), \\\"$1/\\\" + TRANSPORTS.longpoll);\\n      }\\n    }, {\\n      key: \\\"endpointURL\\\",\\n      value: function endpointURL() {\\n        return Ajax.appendParams(this.pollEndpoint, { token: this.token });\\n      }\\n    }, {\\n      key: \\\"closeAndRetry\\\",\\n      value: function closeAndRetry() {\\n        this.close();\\n        this.readyState = SOCKET_STATES.connecting;\\n      }\\n    }, {\\n      key: \\\"ontimeout\\\",\\n      value: function ontimeout() {\\n        this.onerror(\\\"timeout\\\");\\n        this.closeAndRetry();\\n      }\\n    }, {\\n      key: \\\"poll\\\",\\n      value: function poll() {\\n        var _this10 = this;\\n\\n        if (!(this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting)) {\\n          return;\\n        }\\n\\n        Ajax.request(\\\"GET\\\", this.endpointURL(), \\\"application/json\\\", null, this.timeout, this.ontimeout.bind(this), function (resp) {\\n          if (resp) {\\n            var status = resp.status,\\n                token = resp.token,\\n                messages = resp.messages;\\n\\n            _this10.token = token;\\n          } else {\\n            var status = 0;\\n          }\\n\\n          switch (status) {\\n            case 200:\\n              messages.forEach(function (msg) {\\n                return _this10.onmessage({ data: msg });\\n              });\\n              _this10.poll();\\n              break;\\n            case 204:\\n              _this10.poll();\\n              break;\\n            case 410:\\n              _this10.readyState = SOCKET_STATES.open;\\n              _this10.onopen();\\n              _this10.poll();\\n              break;\\n            case 0:\\n            case 500:\\n              _this10.onerror();\\n              _this10.closeAndRetry();\\n              break;\\n            default:\\n              throw \\\"unhandled poll status \\\" + status;\\n          }\\n        });\\n      }\\n    }, {\\n      key: \\\"send\\\",\\n      value: function send(body) {\\n        var _this11 = this;\\n\\n        Ajax.request(\\\"POST\\\", this.endpointURL(), \\\"application/json\\\", body, this.timeout, this.onerror.bind(this, \\\"timeout\\\"), function (resp) {\\n          if (!resp || resp.status !== 200) {\\n            _this11.onerror(resp && resp.status);\\n            _this11.closeAndRetry();\\n          }\\n        });\\n      }\\n    }, {\\n      key: \\\"close\\\",\\n      value: function close(code, reason) {\\n        this.readyState = SOCKET_STATES.closed;\\n        this.onclose();\\n      }\\n    }]);\\n\\n    return LongPoll;\\n  }();\\n\\n  var Ajax = exports.Ajax = function () {\\n    function Ajax() {\\n      _classCallCheck(this, Ajax);\\n    }\\n\\n    _createClass(Ajax, null, [{\\n      key: \\\"request\\\",\\n      value: function request(method, endPoint, accept, body, timeout, ontimeout, callback) {\\n        if (window.XDomainRequest) {\\n          var req = new XDomainRequest(); // IE8, IE9\\n          this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);\\n        } else {\\n          var _req = window.XMLHttpRequest ? new window.XMLHttpRequest() : // IE7+, Firefox, Chrome, Opera, Safari\\n          new ActiveXObject(\\\"Microsoft.XMLHTTP\\\"); // IE6, IE5\\n          this.xhrRequest(_req, method, endPoint, accept, body, timeout, ontimeout, callback);\\n        }\\n      }\\n    }, {\\n      key: \\\"xdomainRequest\\\",\\n      value: function xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {\\n        var _this12 = this;\\n\\n        req.timeout = timeout;\\n        req.open(method, endPoint);\\n        req.onload = function () {\\n          var response = _this12.parseJSON(req.responseText);\\n          callback && callback(response);\\n        };\\n        if (ontimeout) {\\n          req.ontimeout = ontimeout;\\n        }\\n\\n        // Work around bug in IE9 that requires an attached onprogress handler\\n        req.onprogress = function () {};\\n\\n        req.send(body);\\n      }\\n    }, {\\n      key: \\\"xhrRequest\\\",\\n      value: function xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {\\n        var _this13 = this;\\n\\n        req.open(method, endPoint, true);\\n        req.timeout = timeout;\\n        req.setRequestHeader(\\\"Content-Type\\\", accept);\\n        req.onerror = function () {\\n          callback && callback(null);\\n        };\\n        req.onreadystatechange = function () {\\n          if (req.readyState === _this13.states.complete && callback) {\\n            var response = _this13.parseJSON(req.responseText);\\n            callback(response);\\n          }\\n        };\\n        if (ontimeout) {\\n          req.ontimeout = ontimeout;\\n        }\\n\\n        req.send(body);\\n      }\\n    }, {\\n      key: \\\"parseJSON\\\",\\n      value: function parseJSON(resp) {\\n        if (!resp || resp === \\\"\\\") {\\n          return null;\\n        }\\n\\n        try {\\n          return JSON.parse(resp);\\n        } catch (e) {\\n          console && console.log(\\\"failed to parse JSON response\\\", resp);\\n          return null;\\n        }\\n      }\\n    }, {\\n      key: \\\"serialize\\\",\\n      value: function serialize(obj, parentKey) {\\n        var queryStr = [];\\n        for (var key in obj) {\\n          if (!obj.hasOwnProperty(key)) {\\n            continue;\\n          }\\n          var paramKey = parentKey ? parentKey + \\\"[\\\" + key + \\\"]\\\" : key;\\n          var paramVal = obj[key];\\n          if ((typeof paramVal === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(paramVal)) === \\\"object\\\") {\\n            queryStr.push(this.serialize(paramVal, paramKey));\\n          } else {\\n            queryStr.push(encodeURIComponent(paramKey) + \\\"=\\\" + encodeURIComponent(paramVal));\\n          }\\n        }\\n        return queryStr.join(\\\"&\\\");\\n      }\\n    }, {\\n      key: \\\"appendParams\\\",\\n      value: function appendParams(url, params) {\\n        if (Object.keys(params).length === 0) {\\n          return url;\\n        }\\n\\n        var prefix = url.match(/\\\\?/) ? \\\"&\\\" : \\\"?\\\";\\n        return \\\"\\\" + url + prefix + this.serialize(params);\\n      }\\n    }]);\\n\\n    return Ajax;\\n  }();\\n\\n  Ajax.states = { complete: 4 };\\n\\n  var Presence = exports.Presence = {\\n    syncState: function syncState(currentState, newState, onJoin, onLeave) {\\n      var _this14 = this;\\n\\n      var state = this.clone(currentState);\\n      var joins = {};\\n      var leaves = {};\\n\\n      this.map(state, function (key, presence) {\\n        if (!newState[key]) {\\n          leaves[key] = presence;\\n        }\\n      });\\n      this.map(newState, function (key, newPresence) {\\n        var currentPresence = state[key];\\n        if (currentPresence) {\\n          var newRefs = newPresence.metas.map(function (m) {\\n            return m.phx_ref;\\n          });\\n          var curRefs = currentPresence.metas.map(function (m) {\\n            return m.phx_ref;\\n          });\\n          var joinedMetas = newPresence.metas.filter(function (m) {\\n            return curRefs.indexOf(m.phx_ref) < 0;\\n          });\\n          var leftMetas = currentPresence.metas.filter(function (m) {\\n            return newRefs.indexOf(m.phx_ref) < 0;\\n          });\\n          if (joinedMetas.length > 0) {\\n            joins[key] = newPresence;\\n            joins[key].metas = joinedMetas;\\n          }\\n          if (leftMetas.length > 0) {\\n            leaves[key] = _this14.clone(currentPresence);\\n            leaves[key].metas = leftMetas;\\n          }\\n        } else {\\n          joins[key] = newPresence;\\n        }\\n      });\\n      return this.syncDiff(state, { joins: joins, leaves: leaves }, onJoin, onLeave);\\n    },\\n    syncDiff: function syncDiff(currentState, _ref2, onJoin, onLeave) {\\n      var joins = _ref2.joins,\\n          leaves = _ref2.leaves;\\n\\n      var state = this.clone(currentState);\\n      if (!onJoin) {\\n        onJoin = function onJoin() {};\\n      }\\n      if (!onLeave) {\\n        onLeave = function onLeave() {};\\n      }\\n\\n      this.map(joins, function (key, newPresence) {\\n        var currentPresence = state[key];\\n        state[key] = newPresence;\\n        if (currentPresence) {\\n          var _state$key$metas;\\n\\n          (_state$key$metas = state[key].metas).unshift.apply(_state$key$metas, _toConsumableArray(currentPresence.metas));\\n        }\\n        onJoin(key, currentPresence, newPresence);\\n      });\\n      this.map(leaves, function (key, leftPresence) {\\n        var currentPresence = state[key];\\n        if (!currentPresence) {\\n          return;\\n        }\\n        var refsToRemove = leftPresence.metas.map(function (m) {\\n          return m.phx_ref;\\n        });\\n        currentPresence.metas = currentPresence.metas.filter(function (p) {\\n          return refsToRemove.indexOf(p.phx_ref) < 0;\\n        });\\n        onLeave(key, currentPresence, leftPresence);\\n        if (currentPresence.metas.length === 0) {\\n          delete state[key];\\n        }\\n      });\\n      return state;\\n    },\\n    list: function list(presences, chooser) {\\n      if (!chooser) {\\n        chooser = function chooser(key, pres) {\\n          return pres;\\n        };\\n      }\\n\\n      return this.map(presences, function (key, presence) {\\n        return chooser(key, presence);\\n      });\\n    },\\n\\n    // private\\n\\n    map: function map(obj, func) {\\n      return Object.getOwnPropertyNames(obj).map(function (key) {\\n        return func(key, obj[key]);\\n      });\\n    },\\n    clone: function clone(obj) {\\n      return JSON.parse(JSON.stringify(obj));\\n    }\\n  };\\n\\n  /**\\n   *\\n   * Creates a timer that accepts a `timerCalc` function to perform\\n   * calculated timeout retries, such as exponential backoff.\\n   *\\n   * ## Examples\\n   *\\n   * ```javascript\\n   *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\\n   *      return [1000, 5000, 10000][tries - 1] || 10000\\n   *    })\\n   *    reconnectTimer.scheduleTimeout() // fires after 1000\\n   *    reconnectTimer.scheduleTimeout() // fires after 5000\\n   *    reconnectTimer.reset()\\n   *    reconnectTimer.scheduleTimeout() // fires after 1000\\n   * ```\\n   * @param {Function} callback\\n   * @param {Function} timerCalc\\n   */\\n\\n  var Timer = function () {\\n    function Timer(callback, timerCalc) {\\n      _classCallCheck(this, Timer);\\n\\n      this.callback = callback;\\n      this.timerCalc = timerCalc;\\n      this.timer = null;\\n      this.tries = 0;\\n    }\\n\\n    _createClass(Timer, [{\\n      key: \\\"reset\\\",\\n      value: function reset() {\\n        this.tries = 0;\\n        clearTimeout(this.timer);\\n      }\\n\\n      /**\\n       * Cancels any previous scheduleTimeout and schedules callback\\n       */\\n\\n    }, {\\n      key: \\\"scheduleTimeout\\\",\\n      value: function scheduleTimeout() {\\n        var _this15 = this;\\n\\n        clearTimeout(this.timer);\\n\\n        this.timer = setTimeout(function () {\\n          _this15.tries = _this15.tries + 1;\\n          _this15.callback();\\n        }, this.timerCalc(this.tries + 1));\\n      }\\n    }]);\\n\\n    return Timer;\\n  }();\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/phoenix/priv/static/phoenix.js\\n\");\n\n//# sourceURL=webpack:///./node_modules/phoenix/priv/static/phoenix.js?");

/***/ }),

/***/ "./node_modules/phoenix_html/priv/static/phoenix_html.js":
/*!***************************************************************!*\
  !*** ./node_modules/phoenix_html/priv/static/phoenix_html.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"\\n\\n(function () {\\n  function buildHiddenInput(name, value) {\\n    var input = document.createElement(\\\"input\\\");\\n    input.type = \\\"hidden\\\";\\n    input.name = name;\\n    input.value = value;\\n    return input;\\n  }\\n\\n  function handleLinkClick(link) {\\n    var message = link.getAttribute(\\\"data-confirm\\\");\\n    if (message && !window.confirm(message)) {\\n      return;\\n    }\\n\\n    var to = link.getAttribute(\\\"data-to\\\"),\\n        method = buildHiddenInput(\\\"_method\\\", link.getAttribute(\\\"data-method\\\")),\\n        csrf = buildHiddenInput(\\\"_csrf_token\\\", link.getAttribute(\\\"data-csrf\\\")),\\n        form = document.createElement(\\\"form\\\");\\n\\n    form.method = link.getAttribute(\\\"data-method\\\") === \\\"get\\\" ? \\\"get\\\" : \\\"post\\\";\\n    form.action = to;\\n    form.style.display = \\\"hidden\\\";\\n\\n    form.appendChild(csrf);\\n    form.appendChild(method);\\n    document.body.appendChild(form);\\n    form.submit();\\n  }\\n\\n  window.addEventListener(\\\"click\\\", function (e) {\\n    var element = e.target;\\n\\n    while (element && element.getAttribute) {\\n      if (element.getAttribute(\\\"data-method\\\")) {\\n        handleLinkClick(element);\\n        e.preventDefault();\\n        return false;\\n      } else {\\n        element = element.parentNode;\\n      }\\n    }\\n  }, false);\\n})();//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGhvZW5peF9odG1sL3ByaXYvc3RhdGljL3Bob2VuaXhfaHRtbC5qcz8wYTFlIl0sIm5hbWVzIjpbImJ1aWxkSGlkZGVuSW5wdXQiLCJuYW1lIiwidmFsdWUiLCJpbnB1dCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJoYW5kbGVMaW5rQ2xpY2siLCJsaW5rIiwibWVzc2FnZSIsImdldEF0dHJpYnV0ZSIsIndpbmRvdyIsImNvbmZpcm0iLCJ0byIsIm1ldGhvZCIsImNzcmYiLCJmb3JtIiwiYWN0aW9uIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJib2R5Iiwic3VibWl0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJlbGVtZW50IiwidGFyZ2V0IiwicHJldmVudERlZmF1bHQiLCJwYXJlbnROb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxDQUFDLFlBQVc7QUFDVixXQUFTQSxnQkFBVCxDQUEwQkMsSUFBMUIsRUFBZ0NDLEtBQWhDLEVBQXVDO0FBQ3JDLFFBQUlDLFFBQVFDLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBWjtBQUNBRixVQUFNRyxJQUFOLEdBQWEsUUFBYjtBQUNBSCxVQUFNRixJQUFOLEdBQWFBLElBQWI7QUFDQUUsVUFBTUQsS0FBTixHQUFjQSxLQUFkO0FBQ0EsV0FBT0MsS0FBUDtBQUNEOztBQUVELFdBQVNJLGVBQVQsQ0FBeUJDLElBQXpCLEVBQStCO0FBQzdCLFFBQUlDLFVBQVVELEtBQUtFLFlBQUwsQ0FBa0IsY0FBbEIsQ0FBZDtBQUNBLFFBQUdELFdBQVcsQ0FBQ0UsT0FBT0MsT0FBUCxDQUFlSCxPQUFmLENBQWYsRUFBd0M7QUFDcEM7QUFDSDs7QUFFRCxRQUFJSSxLQUFLTCxLQUFLRSxZQUFMLENBQWtCLFNBQWxCLENBQVQ7QUFBQSxRQUNJSSxTQUFTZCxpQkFBaUIsU0FBakIsRUFBNEJRLEtBQUtFLFlBQUwsQ0FBa0IsYUFBbEIsQ0FBNUIsQ0FEYjtBQUFBLFFBRUlLLE9BQU9mLGlCQUFpQixhQUFqQixFQUFnQ1EsS0FBS0UsWUFBTCxDQUFrQixXQUFsQixDQUFoQyxDQUZYO0FBQUEsUUFHSU0sT0FBT1osU0FBU0MsYUFBVCxDQUF1QixNQUF2QixDQUhYOztBQUtBVyxTQUFLRixNQUFMLEdBQWVOLEtBQUtFLFlBQUwsQ0FBa0IsYUFBbEIsTUFBcUMsS0FBdEMsR0FBK0MsS0FBL0MsR0FBdUQsTUFBckU7QUFDQU0sU0FBS0MsTUFBTCxHQUFjSixFQUFkO0FBQ0FHLFNBQUtFLEtBQUwsQ0FBV0MsT0FBWCxHQUFxQixRQUFyQjs7QUFFQUgsU0FBS0ksV0FBTCxDQUFpQkwsSUFBakI7QUFDQUMsU0FBS0ksV0FBTCxDQUFpQk4sTUFBakI7QUFDQVYsYUFBU2lCLElBQVQsQ0FBY0QsV0FBZCxDQUEwQkosSUFBMUI7QUFDQUEsU0FBS00sTUFBTDtBQUNEOztBQUVEWCxTQUFPWSxnQkFBUCxDQUF3QixPQUF4QixFQUFpQyxVQUFTQyxDQUFULEVBQVk7QUFDM0MsUUFBSUMsVUFBVUQsRUFBRUUsTUFBaEI7O0FBRUEsV0FBT0QsV0FBV0EsUUFBUWYsWUFBMUIsRUFBd0M7QUFDdEMsVUFBR2UsUUFBUWYsWUFBUixDQUFxQixhQUFyQixDQUFILEVBQXdDO0FBQ3RDSCx3QkFBZ0JrQixPQUFoQjtBQUNBRCxVQUFFRyxjQUFGO0FBQ0EsZUFBTyxLQUFQO0FBQ0QsT0FKRCxNQUlPO0FBQ0xGLGtCQUFVQSxRQUFRRyxVQUFsQjtBQUNEO0FBQ0Y7QUFDRixHQVpELEVBWUcsS0FaSDtBQWFELENBM0NEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3Bob2VuaXhfaHRtbC9wcml2L3N0YXRpYy9waG9lbml4X2h0bWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBidWlsZEhpZGRlbklucHV0KG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGlucHV0LnR5cGUgPSBcImhpZGRlblwiO1xuICAgIGlucHV0Lm5hbWUgPSBuYW1lO1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTGlua0NsaWNrKGxpbmspIHtcbiAgICB2YXIgbWVzc2FnZSA9IGxpbmsuZ2V0QXR0cmlidXRlKFwiZGF0YS1jb25maXJtXCIpO1xuICAgIGlmKG1lc3NhZ2UgJiYgIXdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdG8gPSBsaW5rLmdldEF0dHJpYnV0ZShcImRhdGEtdG9cIiksXG4gICAgICAgIG1ldGhvZCA9IGJ1aWxkSGlkZGVuSW5wdXQoXCJfbWV0aG9kXCIsIGxpbmsuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikpLFxuICAgICAgICBjc3JmID0gYnVpbGRIaWRkZW5JbnB1dChcIl9jc3JmX3Rva2VuXCIsIGxpbmsuZ2V0QXR0cmlidXRlKFwiZGF0YS1jc3JmXCIpKSxcbiAgICAgICAgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xuXG4gICAgZm9ybS5tZXRob2QgPSAobGluay5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSA9PT0gXCJnZXRcIikgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gICAgZm9ybS5hY3Rpb24gPSB0bztcbiAgICBmb3JtLnN0eWxlLmRpc3BsYXkgPSBcImhpZGRlblwiO1xuXG4gICAgZm9ybS5hcHBlbmRDaGlsZChjc3JmKTtcbiAgICBmb3JtLmFwcGVuZENoaWxkKG1ldGhvZCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcbiAgICBmb3JtLnN1Ym1pdCgpO1xuICB9XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBlLnRhcmdldDtcblxuICAgIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKSB7XG4gICAgICBpZihlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWV0aG9kXCIpKSB7XG4gICAgICAgIGhhbmRsZUxpbmtDbGljayhlbGVtZW50KTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgIH1cbiAgfSwgZmFsc2UpO1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./node_modules/phoenix_html/priv/static/phoenix_html.js\\n\");\n\n//# sourceURL=webpack:///./node_modules/phoenix_html/priv/static/phoenix_html.js?");

/***/ }),

/***/ "./node_modules/popper.js/dist/esm/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"/* WEBPACK VAR INJECTION */(function(global) {\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n/**!\\n * @fileOverview Kickass library to create and place poppers near their reference elements.\\n * @version 1.14.4\\n * @license\\n * Copyright (c) 2016 Federico Zivolo and contributors\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\\n\\nvar longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\\nvar timeoutDuration = 0;\\nfor (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\\n    timeoutDuration = 1;\\n    break;\\n  }\\n}\\n\\nfunction microtaskDebounce(fn) {\\n  var called = false;\\n  return function () {\\n    if (called) {\\n      return;\\n    }\\n    called = true;\\n    window.Promise.resolve().then(function () {\\n      called = false;\\n      fn();\\n    });\\n  };\\n}\\n\\nfunction taskDebounce(fn) {\\n  var scheduled = false;\\n  return function () {\\n    if (!scheduled) {\\n      scheduled = true;\\n      setTimeout(function () {\\n        scheduled = false;\\n        fn();\\n      }, timeoutDuration);\\n    }\\n  };\\n}\\n\\nvar supportsMicroTasks = isBrowser && window.Promise;\\n\\n/**\\n* Create a debounced version of a method, that's asynchronously deferred\\n* but called in the minimum time possible.\\n*\\n* @method\\n* @memberof Popper.Utils\\n* @argument {Function} fn\\n* @returns {Function}\\n*/\\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\\n\\n/**\\n * Check if the given variable is a function\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Any} functionToCheck - variable to check\\n * @returns {Boolean} answer to: is a function?\\n */\\nfunction isFunction(functionToCheck) {\\n  var getType = {};\\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\\n}\\n\\n/**\\n * Get CSS computed property of the given element\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Eement} element\\n * @argument {String} property\\n */\\nfunction getStyleComputedProperty(element, property) {\\n  if (element.nodeType !== 1) {\\n    return [];\\n  }\\n  // NOTE: 1 DOM access here\\n  var css = getComputedStyle(element, null);\\n  return property ? css[property] : css;\\n}\\n\\n/**\\n * Returns the parentNode or the host of the element\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Element} element\\n * @returns {Element} parent\\n */\\nfunction getParentNode(element) {\\n  if (element.nodeName === 'HTML') {\\n    return element;\\n  }\\n  return element.parentNode || element.host;\\n}\\n\\n/**\\n * Returns the scrolling parent of the given element\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Element} element\\n * @returns {Element} scroll parent\\n */\\nfunction getScrollParent(element) {\\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\\n  if (!element) {\\n    return document.body;\\n  }\\n\\n  switch (element.nodeName) {\\n    case 'HTML':\\n    case 'BODY':\\n      return element.ownerDocument.body;\\n    case '#document':\\n      return element.body;\\n  }\\n\\n  // Firefox want us to check `-x` and `-y` variations as well\\n\\n  var _getStyleComputedProp = getStyleComputedProperty(element),\\n      overflow = _getStyleComputedProp.overflow,\\n      overflowX = _getStyleComputedProp.overflowX,\\n      overflowY = _getStyleComputedProp.overflowY;\\n\\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\\n    return element;\\n  }\\n\\n  return getScrollParent(getParentNode(element));\\n}\\n\\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\\n\\n/**\\n * Determines if the browser is Internet Explorer\\n * @method\\n * @memberof Popper.Utils\\n * @param {Number} version to check\\n * @returns {Boolean} isIE\\n */\\nfunction isIE(version) {\\n  if (version === 11) {\\n    return isIE11;\\n  }\\n  if (version === 10) {\\n    return isIE10;\\n  }\\n  return isIE11 || isIE10;\\n}\\n\\n/**\\n * Returns the offset parent of the given element\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Element} element\\n * @returns {Element} offset parent\\n */\\nfunction getOffsetParent(element) {\\n  if (!element) {\\n    return document.documentElement;\\n  }\\n\\n  var noOffsetParent = isIE(10) ? document.body : null;\\n\\n  // NOTE: 1 DOM access here\\n  var offsetParent = element.offsetParent;\\n  // Skip hidden elements which don't have an offsetParent\\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\\n    offsetParent = (element = element.nextElementSibling).offsetParent;\\n  }\\n\\n  var nodeName = offsetParent && offsetParent.nodeName;\\n\\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\\n    return element ? element.ownerDocument.documentElement : document.documentElement;\\n  }\\n\\n  // .offsetParent will return the closest TD or TABLE in case\\n  // no offsetParent is present, I hate this job...\\n  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\\n    return getOffsetParent(offsetParent);\\n  }\\n\\n  return offsetParent;\\n}\\n\\nfunction isOffsetContainer(element) {\\n  var nodeName = element.nodeName;\\n\\n  if (nodeName === 'BODY') {\\n    return false;\\n  }\\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\\n}\\n\\n/**\\n * Finds the root node (document, shadowDOM root) of the given element\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Element} node\\n * @returns {Element} root node\\n */\\nfunction getRoot(node) {\\n  if (node.parentNode !== null) {\\n    return getRoot(node.parentNode);\\n  }\\n\\n  return node;\\n}\\n\\n/**\\n * Finds the offset parent common to the two provided nodes\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Element} element1\\n * @argument {Element} element2\\n * @returns {Element} common offset parent\\n */\\nfunction findCommonOffsetParent(element1, element2) {\\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\\n    return document.documentElement;\\n  }\\n\\n  // Here we make sure to give as \\\"start\\\" the element that comes first in the DOM\\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\\n  var start = order ? element1 : element2;\\n  var end = order ? element2 : element1;\\n\\n  // Get common ancestor container\\n  var range = document.createRange();\\n  range.setStart(start, 0);\\n  range.setEnd(end, 0);\\n  var commonAncestorContainer = range.commonAncestorContainer;\\n\\n  // Both nodes are inside #document\\n\\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\\n    if (isOffsetContainer(commonAncestorContainer)) {\\n      return commonAncestorContainer;\\n    }\\n\\n    return getOffsetParent(commonAncestorContainer);\\n  }\\n\\n  // one of the nodes is inside shadowDOM, find which one\\n  var element1root = getRoot(element1);\\n  if (element1root.host) {\\n    return findCommonOffsetParent(element1root.host, element2);\\n  } else {\\n    return findCommonOffsetParent(element1, getRoot(element2).host);\\n  }\\n}\\n\\n/**\\n * Gets the scroll value of the given element in the given side (top and left)\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Element} element\\n * @argument {String} side `top` or `left`\\n * @returns {number} amount of scrolled pixels\\n */\\nfunction getScroll(element) {\\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\\n\\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\\n  var nodeName = element.nodeName;\\n\\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\\n    var html = element.ownerDocument.documentElement;\\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\\n    return scrollingElement[upperSide];\\n  }\\n\\n  return element[upperSide];\\n}\\n\\n/*\\n * Sum or subtract the element scroll values (left and top) from a given rect object\\n * @method\\n * @memberof Popper.Utils\\n * @param {Object} rect - Rect object you want to change\\n * @param {HTMLElement} element - The element from the function reads the scroll values\\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\\n * @return {Object} rect - The modifier rect object\\n */\\nfunction includeScroll(rect, element) {\\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\\n\\n  var scrollTop = getScroll(element, 'top');\\n  var scrollLeft = getScroll(element, 'left');\\n  var modifier = subtract ? -1 : 1;\\n  rect.top += scrollTop * modifier;\\n  rect.bottom += scrollTop * modifier;\\n  rect.left += scrollLeft * modifier;\\n  rect.right += scrollLeft * modifier;\\n  return rect;\\n}\\n\\n/*\\n * Helper to detect borders of a given element\\n * @method\\n * @memberof Popper.Utils\\n * @param {CSSStyleDeclaration} styles\\n * Result of `getStyleComputedProperty` on the given element\\n * @param {String} axis - `x` or `y`\\n * @return {number} borders - The borders size of the given axis\\n */\\n\\nfunction getBordersSize(styles, axis) {\\n  var sideA = axis === 'x' ? 'Left' : 'Top';\\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\\n\\n  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);\\n}\\n\\nfunction getSize(axis, body, html, computedStyle) {\\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\\n}\\n\\nfunction getWindowSizes(document) {\\n  var body = document.body;\\n  var html = document.documentElement;\\n  var computedStyle = isIE(10) && getComputedStyle(html);\\n\\n  return {\\n    height: getSize('Height', body, html, computedStyle),\\n    width: getSize('Width', body, html, computedStyle)\\n  };\\n}\\n\\nvar classCallCheck = function classCallCheck(instance, Constructor) {\\n  if (!(instance instanceof Constructor)) {\\n    throw new TypeError(\\\"Cannot call a class as a function\\\");\\n  }\\n};\\n\\nvar createClass = function () {\\n  function defineProperties(target, props) {\\n    for (var i = 0; i < props.length; i++) {\\n      var descriptor = props[i];\\n      descriptor.enumerable = descriptor.enumerable || false;\\n      descriptor.configurable = true;\\n      if (\\\"value\\\" in descriptor) descriptor.writable = true;\\n      Object.defineProperty(target, descriptor.key, descriptor);\\n    }\\n  }\\n\\n  return function (Constructor, protoProps, staticProps) {\\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\\n    if (staticProps) defineProperties(Constructor, staticProps);\\n    return Constructor;\\n  };\\n}();\\n\\nvar defineProperty = function defineProperty(obj, key, value) {\\n  if (key in obj) {\\n    Object.defineProperty(obj, key, {\\n      value: value,\\n      enumerable: true,\\n      configurable: true,\\n      writable: true\\n    });\\n  } else {\\n    obj[key] = value;\\n  }\\n\\n  return obj;\\n};\\n\\nvar _extends = Object.assign || function (target) {\\n  for (var i = 1; i < arguments.length; i++) {\\n    var source = arguments[i];\\n\\n    for (var key in source) {\\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\\n        target[key] = source[key];\\n      }\\n    }\\n  }\\n\\n  return target;\\n};\\n\\n/**\\n * Given element offsets, generate an output similar to getBoundingClientRect\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Object} offsets\\n * @returns {Object} ClientRect like output\\n */\\nfunction getClientRect(offsets) {\\n  return _extends({}, offsets, {\\n    right: offsets.left + offsets.width,\\n    bottom: offsets.top + offsets.height\\n  });\\n}\\n\\n/**\\n * Get bounding client rect of given element\\n * @method\\n * @memberof Popper.Utils\\n * @param {HTMLElement} element\\n * @return {Object} client rect\\n */\\nfunction getBoundingClientRect(element) {\\n  var rect = {};\\n\\n  // IE10 10 FIX: Please, don't ask, the element isn't\\n  // considered in DOM in some circumstances...\\n  // This isn't reproducible in IE10 compatibility mode of IE11\\n  try {\\n    if (isIE(10)) {\\n      rect = element.getBoundingClientRect();\\n      var scrollTop = getScroll(element, 'top');\\n      var scrollLeft = getScroll(element, 'left');\\n      rect.top += scrollTop;\\n      rect.left += scrollLeft;\\n      rect.bottom += scrollTop;\\n      rect.right += scrollLeft;\\n    } else {\\n      rect = element.getBoundingClientRect();\\n    }\\n  } catch (e) {}\\n\\n  var result = {\\n    left: rect.left,\\n    top: rect.top,\\n    width: rect.right - rect.left,\\n    height: rect.bottom - rect.top\\n  };\\n\\n  // subtract scrollbar size from sizes\\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\\n  var width = sizes.width || element.clientWidth || result.right - result.left;\\n  var height = sizes.height || element.clientHeight || result.bottom - result.top;\\n\\n  var horizScrollbar = element.offsetWidth - width;\\n  var vertScrollbar = element.offsetHeight - height;\\n\\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\\n  // we make this check conditional for performance reasons\\n  if (horizScrollbar || vertScrollbar) {\\n    var styles = getStyleComputedProperty(element);\\n    horizScrollbar -= getBordersSize(styles, 'x');\\n    vertScrollbar -= getBordersSize(styles, 'y');\\n\\n    result.width -= horizScrollbar;\\n    result.height -= vertScrollbar;\\n  }\\n\\n  return getClientRect(result);\\n}\\n\\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\\n\\n  var isIE10 = isIE(10);\\n  var isHTML = parent.nodeName === 'HTML';\\n  var childrenRect = getBoundingClientRect(children);\\n  var parentRect = getBoundingClientRect(parent);\\n  var scrollParent = getScrollParent(children);\\n\\n  var styles = getStyleComputedProperty(parent);\\n  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);\\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);\\n\\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\\n  if (fixedPosition && isHTML) {\\n    parentRect.top = Math.max(parentRect.top, 0);\\n    parentRect.left = Math.max(parentRect.left, 0);\\n  }\\n  var offsets = getClientRect({\\n    top: childrenRect.top - parentRect.top - borderTopWidth,\\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\\n    width: childrenRect.width,\\n    height: childrenRect.height\\n  });\\n  offsets.marginTop = 0;\\n  offsets.marginLeft = 0;\\n\\n  // Subtract margins of documentElement in case it's being used as parent\\n  // we do this only on HTML because it's the only element that behaves\\n  // differently when margins are applied to it. The margins are included in\\n  // the box of the documentElement, in the other cases not.\\n  if (!isIE10 && isHTML) {\\n    var marginTop = parseFloat(styles.marginTop, 10);\\n    var marginLeft = parseFloat(styles.marginLeft, 10);\\n\\n    offsets.top -= borderTopWidth - marginTop;\\n    offsets.bottom -= borderTopWidth - marginTop;\\n    offsets.left -= borderLeftWidth - marginLeft;\\n    offsets.right -= borderLeftWidth - marginLeft;\\n\\n    // Attach marginTop and marginLeft because in some circumstances we may need them\\n    offsets.marginTop = marginTop;\\n    offsets.marginLeft = marginLeft;\\n  }\\n\\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\\n    offsets = includeScroll(offsets, parent);\\n  }\\n\\n  return offsets;\\n}\\n\\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\\n\\n  var html = element.ownerDocument.documentElement;\\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\\n\\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\\n\\n  var offset = {\\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\\n    width: width,\\n    height: height\\n  };\\n\\n  return getClientRect(offset);\\n}\\n\\n/**\\n * Check if the given element is fixed or is inside a fixed parent\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Element} element\\n * @argument {Element} customContainer\\n * @returns {Boolean} answer to \\\"isFixed?\\\"\\n */\\nfunction isFixed(element) {\\n  var nodeName = element.nodeName;\\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\\n    return false;\\n  }\\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\\n    return true;\\n  }\\n  return isFixed(getParentNode(element));\\n}\\n\\n/**\\n * Finds the first parent of an element that has a transformed property defined\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Element} element\\n * @returns {Element} first transformed parent or documentElement\\n */\\n\\nfunction getFixedPositionOffsetParent(element) {\\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\\n  if (!element || !element.parentElement || isIE()) {\\n    return document.documentElement;\\n  }\\n  var el = element.parentElement;\\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\\n    el = el.parentElement;\\n  }\\n  return el || document.documentElement;\\n}\\n\\n/**\\n * Computed the boundaries limits and return them\\n * @method\\n * @memberof Popper.Utils\\n * @param {HTMLElement} popper\\n * @param {HTMLElement} reference\\n * @param {number} padding\\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\\n * @param {Boolean} fixedPosition - Is in fixed position mode\\n * @returns {Object} Coordinates of the boundaries\\n */\\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\\n\\n  // NOTE: 1 DOM access here\\n\\n  var boundaries = { top: 0, left: 0 };\\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\\n\\n  // Handle viewport case\\n  if (boundariesElement === 'viewport') {\\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\\n  } else {\\n    // Handle other cases based on DOM element used as boundaries\\n    var boundariesNode = void 0;\\n    if (boundariesElement === 'scrollParent') {\\n      boundariesNode = getScrollParent(getParentNode(reference));\\n      if (boundariesNode.nodeName === 'BODY') {\\n        boundariesNode = popper.ownerDocument.documentElement;\\n      }\\n    } else if (boundariesElement === 'window') {\\n      boundariesNode = popper.ownerDocument.documentElement;\\n    } else {\\n      boundariesNode = boundariesElement;\\n    }\\n\\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\\n\\n    // In case of HTML, we need a different computation\\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\\n          height = _getWindowSizes.height,\\n          width = _getWindowSizes.width;\\n\\n      boundaries.top += offsets.top - offsets.marginTop;\\n      boundaries.bottom = height + offsets.top;\\n      boundaries.left += offsets.left - offsets.marginLeft;\\n      boundaries.right = width + offsets.left;\\n    } else {\\n      // for all the other DOM elements, this one is good\\n      boundaries = offsets;\\n    }\\n  }\\n\\n  // Add paddings\\n  padding = padding || 0;\\n  var isPaddingNumber = typeof padding === 'number';\\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\\n\\n  return boundaries;\\n}\\n\\nfunction getArea(_ref) {\\n  var width = _ref.width,\\n      height = _ref.height;\\n\\n  return width * height;\\n}\\n\\n/**\\n * Utility used to transform the `auto` placement to the placement with more\\n * available space.\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Object} data - The data object generated by update method\\n * @argument {Object} options - Modifiers configuration and options\\n * @returns {Object} The data object, properly modified\\n */\\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\\n\\n  if (placement.indexOf('auto') === -1) {\\n    return placement;\\n  }\\n\\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\\n\\n  var rects = {\\n    top: {\\n      width: boundaries.width,\\n      height: refRect.top - boundaries.top\\n    },\\n    right: {\\n      width: boundaries.right - refRect.right,\\n      height: boundaries.height\\n    },\\n    bottom: {\\n      width: boundaries.width,\\n      height: boundaries.bottom - refRect.bottom\\n    },\\n    left: {\\n      width: refRect.left - boundaries.left,\\n      height: boundaries.height\\n    }\\n  };\\n\\n  var sortedAreas = Object.keys(rects).map(function (key) {\\n    return _extends({\\n      key: key\\n    }, rects[key], {\\n      area: getArea(rects[key])\\n    });\\n  }).sort(function (a, b) {\\n    return b.area - a.area;\\n  });\\n\\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\\n    var width = _ref2.width,\\n        height = _ref2.height;\\n    return width >= popper.clientWidth && height >= popper.clientHeight;\\n  });\\n\\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\\n\\n  var variation = placement.split('-')[1];\\n\\n  return computedPlacement + (variation ? '-' + variation : '');\\n}\\n\\n/**\\n * Get offsets to the reference element\\n * @method\\n * @memberof Popper.Utils\\n * @param {Object} state\\n * @param {Element} popper - the popper element\\n * @param {Element} reference - the reference element (the popper will be relative to this)\\n * @param {Element} fixedPosition - is in fixed position mode\\n * @returns {Object} An object containing the offsets which will be applied to the popper\\n */\\nfunction getReferenceOffsets(state, popper, reference) {\\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\\n\\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);\\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\\n}\\n\\n/**\\n * Get the outer sizes of the given element (offset size + margins)\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Element} element\\n * @returns {Object} object containing width and height properties\\n */\\nfunction getOuterSizes(element) {\\n  var styles = getComputedStyle(element);\\n  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);\\n  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);\\n  var result = {\\n    width: element.offsetWidth + y,\\n    height: element.offsetHeight + x\\n  };\\n  return result;\\n}\\n\\n/**\\n * Get the opposite placement of the given one\\n * @method\\n * @memberof Popper.Utils\\n * @argument {String} placement\\n * @returns {String} flipped placement\\n */\\nfunction getOppositePlacement(placement) {\\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\\n    return hash[matched];\\n  });\\n}\\n\\n/**\\n * Get offsets to the popper\\n * @method\\n * @memberof Popper.Utils\\n * @param {Object} position - CSS position the Popper will get applied\\n * @param {HTMLElement} popper - the popper element\\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\\n * @param {String} placement - one of the valid placement options\\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\\n */\\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\\n  placement = placement.split('-')[0];\\n\\n  // Get popper node sizes\\n  var popperRect = getOuterSizes(popper);\\n\\n  // Add position, width and height to our offsets object\\n  var popperOffsets = {\\n    width: popperRect.width,\\n    height: popperRect.height\\n  };\\n\\n  // depending by the popper placement we have to compute its offsets slightly differently\\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\\n  var mainSide = isHoriz ? 'top' : 'left';\\n  var secondarySide = isHoriz ? 'left' : 'top';\\n  var measurement = isHoriz ? 'height' : 'width';\\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\\n\\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\\n  if (placement === secondarySide) {\\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\\n  } else {\\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\\n  }\\n\\n  return popperOffsets;\\n}\\n\\n/**\\n * Mimics the `find` method of Array\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Array} arr\\n * @argument prop\\n * @argument value\\n * @returns index or -1\\n */\\nfunction find(arr, check) {\\n  // use native find if supported\\n  if (Array.prototype.find) {\\n    return arr.find(check);\\n  }\\n\\n  // use `filter` to obtain the same behavior of `find`\\n  return arr.filter(check)[0];\\n}\\n\\n/**\\n * Return the index of the matching object\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Array} arr\\n * @argument prop\\n * @argument value\\n * @returns index or -1\\n */\\nfunction findIndex(arr, prop, value) {\\n  // use native findIndex if supported\\n  if (Array.prototype.findIndex) {\\n    return arr.findIndex(function (cur) {\\n      return cur[prop] === value;\\n    });\\n  }\\n\\n  // use `find` + `indexOf` if `findIndex` isn't supported\\n  var match = find(arr, function (obj) {\\n    return obj[prop] === value;\\n  });\\n  return arr.indexOf(match);\\n}\\n\\n/**\\n * Loop trough the list of modifiers and run them in order,\\n * each of them will then edit the data object.\\n * @method\\n * @memberof Popper.Utils\\n * @param {dataObject} data\\n * @param {Array} modifiers\\n * @param {String} ends - Optional modifier name used as stopper\\n * @returns {dataObject}\\n */\\nfunction runModifiers(modifiers, data, ends) {\\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\\n\\n  modifiersToRun.forEach(function (modifier) {\\n    if (modifier['function']) {\\n      // eslint-disable-line dot-notation\\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\\n    }\\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\\n    if (modifier.enabled && isFunction(fn)) {\\n      // Add properties to offsets to make them a complete clientRect object\\n      // we do this before each modifier to make sure the previous one doesn't\\n      // mess with these values\\n      data.offsets.popper = getClientRect(data.offsets.popper);\\n      data.offsets.reference = getClientRect(data.offsets.reference);\\n\\n      data = fn(data, modifier);\\n    }\\n  });\\n\\n  return data;\\n}\\n\\n/**\\n * Updates the position of the popper, computing the new offsets and applying\\n * the new style.<br />\\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\\n * @method\\n * @memberof Popper\\n */\\nfunction update() {\\n  // if popper is destroyed, don't perform any further update\\n  if (this.state.isDestroyed) {\\n    return;\\n  }\\n\\n  var data = {\\n    instance: this,\\n    styles: {},\\n    arrowStyles: {},\\n    attributes: {},\\n    flipped: false,\\n    offsets: {}\\n  };\\n\\n  // compute reference element offsets\\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\\n\\n  // compute auto placement, store placement inside the data object,\\n  // modifiers will be able to edit `placement` if needed\\n  // and refer to originalPlacement to know the original value\\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\\n\\n  // store the computed placement inside `originalPlacement`\\n  data.originalPlacement = data.placement;\\n\\n  data.positionFixed = this.options.positionFixed;\\n\\n  // compute the popper offsets\\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\\n\\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\\n\\n  // run the modifiers\\n  data = runModifiers(this.modifiers, data);\\n\\n  // the first `update` will call `onCreate` callback\\n  // the other ones will call `onUpdate` callback\\n  if (!this.state.isCreated) {\\n    this.state.isCreated = true;\\n    this.options.onCreate(data);\\n  } else {\\n    this.options.onUpdate(data);\\n  }\\n}\\n\\n/**\\n * Helper used to know if the given modifier is enabled.\\n * @method\\n * @memberof Popper.Utils\\n * @returns {Boolean}\\n */\\nfunction isModifierEnabled(modifiers, modifierName) {\\n  return modifiers.some(function (_ref) {\\n    var name = _ref.name,\\n        enabled = _ref.enabled;\\n    return enabled && name === modifierName;\\n  });\\n}\\n\\n/**\\n * Get the prefixed supported property name\\n * @method\\n * @memberof Popper.Utils\\n * @argument {String} property (camelCase)\\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\\n */\\nfunction getSupportedPropertyName(property) {\\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\\n\\n  for (var i = 0; i < prefixes.length; i++) {\\n    var prefix = prefixes[i];\\n    var toCheck = prefix ? '' + prefix + upperProp : property;\\n    if (typeof document.body.style[toCheck] !== 'undefined') {\\n      return toCheck;\\n    }\\n  }\\n  return null;\\n}\\n\\n/**\\n * Destroys the popper.\\n * @method\\n * @memberof Popper\\n */\\nfunction destroy() {\\n  this.state.isDestroyed = true;\\n\\n  // touch DOM only if `applyStyle` modifier is enabled\\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\\n    this.popper.removeAttribute('x-placement');\\n    this.popper.style.position = '';\\n    this.popper.style.top = '';\\n    this.popper.style.left = '';\\n    this.popper.style.right = '';\\n    this.popper.style.bottom = '';\\n    this.popper.style.willChange = '';\\n    this.popper.style[getSupportedPropertyName('transform')] = '';\\n  }\\n\\n  this.disableEventListeners();\\n\\n  // remove the popper if user explicity asked for the deletion on destroy\\n  // do not use `remove` because IE11 doesn't support it\\n  if (this.options.removeOnDestroy) {\\n    this.popper.parentNode.removeChild(this.popper);\\n  }\\n  return this;\\n}\\n\\n/**\\n * Get the window associated with the element\\n * @argument {Element} element\\n * @returns {Window}\\n */\\nfunction getWindow(element) {\\n  var ownerDocument = element.ownerDocument;\\n  return ownerDocument ? ownerDocument.defaultView : window;\\n}\\n\\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\\n  var isBody = scrollParent.nodeName === 'BODY';\\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\\n  target.addEventListener(event, callback, { passive: true });\\n\\n  if (!isBody) {\\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\\n  }\\n  scrollParents.push(target);\\n}\\n\\n/**\\n * Setup needed event listeners used to update the popper position\\n * @method\\n * @memberof Popper.Utils\\n * @private\\n */\\nfunction setupEventListeners(reference, options, state, updateBound) {\\n  // Resize event listener on window\\n  state.updateBound = updateBound;\\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\\n\\n  // Scroll event listener on scroll parents\\n  var scrollElement = getScrollParent(reference);\\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\\n  state.scrollElement = scrollElement;\\n  state.eventsEnabled = true;\\n\\n  return state;\\n}\\n\\n/**\\n * It will add resize/scroll events and start recalculating\\n * position of the popper element when they are triggered.\\n * @method\\n * @memberof Popper\\n */\\nfunction enableEventListeners() {\\n  if (!this.state.eventsEnabled) {\\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\\n  }\\n}\\n\\n/**\\n * Remove event listeners used to update the popper position\\n * @method\\n * @memberof Popper.Utils\\n * @private\\n */\\nfunction removeEventListeners(reference, state) {\\n  // Remove resize event listener on window\\n  getWindow(reference).removeEventListener('resize', state.updateBound);\\n\\n  // Remove scroll event listener on scroll parents\\n  state.scrollParents.forEach(function (target) {\\n    target.removeEventListener('scroll', state.updateBound);\\n  });\\n\\n  // Reset state\\n  state.updateBound = null;\\n  state.scrollParents = [];\\n  state.scrollElement = null;\\n  state.eventsEnabled = false;\\n  return state;\\n}\\n\\n/**\\n * It will remove resize/scroll events and won't recalculate popper position\\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\\n * unless you call `update` method manually.\\n * @method\\n * @memberof Popper\\n */\\nfunction disableEventListeners() {\\n  if (this.state.eventsEnabled) {\\n    cancelAnimationFrame(this.scheduleUpdate);\\n    this.state = removeEventListeners(this.reference, this.state);\\n  }\\n}\\n\\n/**\\n * Tells if a given input is a number\\n * @method\\n * @memberof Popper.Utils\\n * @param {*} input to check\\n * @return {Boolean}\\n */\\nfunction isNumeric(n) {\\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\\n}\\n\\n/**\\n * Set the style to the given popper\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Element} element - Element to apply the style to\\n * @argument {Object} styles\\n * Object with a list of properties and values which will be applied to the element\\n */\\nfunction setStyles(element, styles) {\\n  Object.keys(styles).forEach(function (prop) {\\n    var unit = '';\\n    // add unit if the value is numeric and is one of the following\\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\\n      unit = 'px';\\n    }\\n    element.style[prop] = styles[prop] + unit;\\n  });\\n}\\n\\n/**\\n * Set the attributes to the given popper\\n * @method\\n * @memberof Popper.Utils\\n * @argument {Element} element - Element to apply the attributes to\\n * @argument {Object} styles\\n * Object with a list of properties and values which will be applied to the element\\n */\\nfunction setAttributes(element, attributes) {\\n  Object.keys(attributes).forEach(function (prop) {\\n    var value = attributes[prop];\\n    if (value !== false) {\\n      element.setAttribute(prop, attributes[prop]);\\n    } else {\\n      element.removeAttribute(prop);\\n    }\\n  });\\n}\\n\\n/**\\n * @function\\n * @memberof Modifiers\\n * @argument {Object} data - The data object generated by `update` method\\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\\n * @argument {Object} options - Modifiers configuration and options\\n * @returns {Object} The same data object\\n */\\nfunction applyStyle(data) {\\n  // any property present in `data.styles` will be applied to the popper,\\n  // in this way we can make the 3rd party modifiers add custom styles to it\\n  // Be aware, modifiers could override the properties defined in the previous\\n  // lines of this modifier!\\n  setStyles(data.instance.popper, data.styles);\\n\\n  // any property present in `data.attributes` will be applied to the popper,\\n  // they will be set as HTML attributes of the element\\n  setAttributes(data.instance.popper, data.attributes);\\n\\n  // if arrowElement is defined and arrowStyles has some properties\\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\\n    setStyles(data.arrowElement, data.arrowStyles);\\n  }\\n\\n  return data;\\n}\\n\\n/**\\n * Set the x-placement attribute before everything else because it could be used\\n * to add margins to the popper margins needs to be calculated to get the\\n * correct popper offsets.\\n * @method\\n * @memberof Popper.modifiers\\n * @param {HTMLElement} reference - The reference element used to position the popper\\n * @param {HTMLElement} popper - The HTML element used as popper\\n * @param {Object} options - Popper.js options\\n */\\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\\n  // compute reference element offsets\\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\\n\\n  // compute auto placement, store placement inside the data object,\\n  // modifiers will be able to edit `placement` if needed\\n  // and refer to originalPlacement to know the original value\\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\\n\\n  popper.setAttribute('x-placement', placement);\\n\\n  // Apply `position` to popper before anything else because\\n  // without the position applied we can't guarantee correct computations\\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\\n\\n  return options;\\n}\\n\\n/**\\n * @function\\n * @memberof Modifiers\\n * @argument {Object} data - The data object generated by `update` method\\n * @argument {Object} options - Modifiers configuration and options\\n * @returns {Object} The data object, properly modified\\n */\\nfunction computeStyle(data, options) {\\n  var x = options.x,\\n      y = options.y;\\n  var popper = data.offsets.popper;\\n\\n  // Remove this legacy support in Popper.js v2\\n\\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\\n    return modifier.name === 'applyStyle';\\n  }).gpuAcceleration;\\n  if (legacyGpuAccelerationOption !== undefined) {\\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\\n  }\\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\\n\\n  var offsetParent = getOffsetParent(data.instance.popper);\\n  var offsetParentRect = getBoundingClientRect(offsetParent);\\n\\n  // Styles\\n  var styles = {\\n    position: popper.position\\n  };\\n\\n  // Avoid blurry text by using full pixel integers.\\n  // For pixel-perfect positioning, top/bottom prefers rounded\\n  // values, while left/right prefers floored values.\\n  var offsets = {\\n    left: Math.floor(popper.left),\\n    top: Math.round(popper.top),\\n    bottom: Math.round(popper.bottom),\\n    right: Math.floor(popper.right)\\n  };\\n\\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\\n  var sideB = y === 'right' ? 'left' : 'right';\\n\\n  // if gpuAcceleration is set to `true` and transform is supported,\\n  //  we use `translate3d` to apply the position to the popper we\\n  // automatically use the supported prefixed version if needed\\n  var prefixedProperty = getSupportedPropertyName('transform');\\n\\n  // now, let's make a step back and look at this code closely (wtf?)\\n  // If the content of the popper grows once it's been positioned, it\\n  // may happen that the popper gets misplaced because of the new content\\n  // overflowing its reference element\\n  // To avoid this problem, we provide two options (x and y), which allow\\n  // the consumer to define the offset origin.\\n  // If we position a popper on top of a reference element, we can set\\n  // `x` to `top` to make the popper grow towards its top instead of\\n  // its bottom.\\n  var left = void 0,\\n      top = void 0;\\n  if (sideA === 'bottom') {\\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\\n    // and not the bottom of the html element\\n    if (offsetParent.nodeName === 'HTML') {\\n      top = -offsetParent.clientHeight + offsets.bottom;\\n    } else {\\n      top = -offsetParentRect.height + offsets.bottom;\\n    }\\n  } else {\\n    top = offsets.top;\\n  }\\n  if (sideB === 'right') {\\n    if (offsetParent.nodeName === 'HTML') {\\n      left = -offsetParent.clientWidth + offsets.right;\\n    } else {\\n      left = -offsetParentRect.width + offsets.right;\\n    }\\n  } else {\\n    left = offsets.left;\\n  }\\n  if (gpuAcceleration && prefixedProperty) {\\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\\n    styles[sideA] = 0;\\n    styles[sideB] = 0;\\n    styles.willChange = 'transform';\\n  } else {\\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\\n    var invertTop = sideA === 'bottom' ? -1 : 1;\\n    var invertLeft = sideB === 'right' ? -1 : 1;\\n    styles[sideA] = top * invertTop;\\n    styles[sideB] = left * invertLeft;\\n    styles.willChange = sideA + ', ' + sideB;\\n  }\\n\\n  // Attributes\\n  var attributes = {\\n    'x-placement': data.placement\\n  };\\n\\n  // Update `data` attributes, styles and arrowStyles\\n  data.attributes = _extends({}, attributes, data.attributes);\\n  data.styles = _extends({}, styles, data.styles);\\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\\n\\n  return data;\\n}\\n\\n/**\\n * Helper used to know if the given modifier depends from another one.<br />\\n * It checks if the needed modifier is listed and enabled.\\n * @method\\n * @memberof Popper.Utils\\n * @param {Array} modifiers - list of modifiers\\n * @param {String} requestingName - name of requesting modifier\\n * @param {String} requestedName - name of requested modifier\\n * @returns {Boolean}\\n */\\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\\n  var requesting = find(modifiers, function (_ref) {\\n    var name = _ref.name;\\n    return name === requestingName;\\n  });\\n\\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\\n  });\\n\\n  if (!isRequired) {\\n    var _requesting = '`' + requestingName + '`';\\n    var requested = '`' + requestedName + '`';\\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\\n  }\\n  return isRequired;\\n}\\n\\n/**\\n * @function\\n * @memberof Modifiers\\n * @argument {Object} data - The data object generated by update method\\n * @argument {Object} options - Modifiers configuration and options\\n * @returns {Object} The data object, properly modified\\n */\\nfunction arrow(data, options) {\\n  var _data$offsets$arrow;\\n\\n  // arrow depends on keepTogether in order to work\\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\\n    return data;\\n  }\\n\\n  var arrowElement = options.element;\\n\\n  // if arrowElement is a string, suppose it's a CSS selector\\n  if (typeof arrowElement === 'string') {\\n    arrowElement = data.instance.popper.querySelector(arrowElement);\\n\\n    // if arrowElement is not found, don't run the modifier\\n    if (!arrowElement) {\\n      return data;\\n    }\\n  } else {\\n    // if the arrowElement isn't a query selector we must check that the\\n    // provided DOM node is child of its popper node\\n    if (!data.instance.popper.contains(arrowElement)) {\\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\\n      return data;\\n    }\\n  }\\n\\n  var placement = data.placement.split('-')[0];\\n  var _data$offsets = data.offsets,\\n      popper = _data$offsets.popper,\\n      reference = _data$offsets.reference;\\n\\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\\n\\n  var len = isVertical ? 'height' : 'width';\\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\\n  var side = sideCapitalized.toLowerCase();\\n  var altSide = isVertical ? 'left' : 'top';\\n  var opSide = isVertical ? 'bottom' : 'right';\\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\\n\\n  //\\n  // extends keepTogether behavior making sure the popper and its\\n  // reference have enough pixels in conjunction\\n  //\\n\\n  // top/left side\\n  if (reference[opSide] - arrowElementSize < popper[side]) {\\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\\n  }\\n  // bottom/right side\\n  if (reference[side] + arrowElementSize > popper[opSide]) {\\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\\n  }\\n  data.offsets.popper = getClientRect(data.offsets.popper);\\n\\n  // compute center of the popper\\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\\n\\n  // Compute the sideValue using the updated popper offsets\\n  // take popper margin in account because we don't have this info available\\n  var css = getStyleComputedProperty(data.instance.popper);\\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);\\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);\\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\\n\\n  // prevent arrowElement from being placed not contiguously to its popper\\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\\n\\n  data.arrowElement = arrowElement;\\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\\n\\n  return data;\\n}\\n\\n/**\\n * Get the opposite placement variation of the given one\\n * @method\\n * @memberof Popper.Utils\\n * @argument {String} placement variation\\n * @returns {String} flipped placement variation\\n */\\nfunction getOppositeVariation(variation) {\\n  if (variation === 'end') {\\n    return 'start';\\n  } else if (variation === 'start') {\\n    return 'end';\\n  }\\n  return variation;\\n}\\n\\n/**\\n * List of accepted placements to use as values of the `placement` option.<br />\\n * Valid placements are:\\n * - `auto`\\n * - `top`\\n * - `right`\\n * - `bottom`\\n * - `left`\\n *\\n * Each placement can have a variation from this list:\\n * - `-start`\\n * - `-end`\\n *\\n * Variations are interpreted easily if you think of them as the left to right\\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\\n * is right.<br />\\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\\n *\\n * Some valid examples are:\\n * - `top-end` (on top of reference, right aligned)\\n * - `right-start` (on right of reference, top aligned)\\n * - `bottom` (on bottom, centered)\\n * - `auto-end` (on the side with more space available, alignment depends by placement)\\n *\\n * @static\\n * @type {Array}\\n * @enum {String}\\n * @readonly\\n * @method placements\\n * @memberof Popper\\n */\\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\\n\\n// Get rid of `auto` `auto-start` and `auto-end`\\nvar validPlacements = placements.slice(3);\\n\\n/**\\n * Given an initial placement, returns all the subsequent placements\\n * clockwise (or counter-clockwise).\\n *\\n * @method\\n * @memberof Popper.Utils\\n * @argument {String} placement - A valid placement (it accepts variations)\\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\\n * @returns {Array} placements including their variations\\n */\\nfunction clockwise(placement) {\\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\\n\\n  var index = validPlacements.indexOf(placement);\\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\\n  return counter ? arr.reverse() : arr;\\n}\\n\\nvar BEHAVIORS = {\\n  FLIP: 'flip',\\n  CLOCKWISE: 'clockwise',\\n  COUNTERCLOCKWISE: 'counterclockwise'\\n};\\n\\n/**\\n * @function\\n * @memberof Modifiers\\n * @argument {Object} data - The data object generated by update method\\n * @argument {Object} options - Modifiers configuration and options\\n * @returns {Object} The data object, properly modified\\n */\\nfunction flip(data, options) {\\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\\n    return data;\\n  }\\n\\n  if (data.flipped && data.placement === data.originalPlacement) {\\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\\n    return data;\\n  }\\n\\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\\n\\n  var placement = data.placement.split('-')[0];\\n  var placementOpposite = getOppositePlacement(placement);\\n  var variation = data.placement.split('-')[1] || '';\\n\\n  var flipOrder = [];\\n\\n  switch (options.behavior) {\\n    case BEHAVIORS.FLIP:\\n      flipOrder = [placement, placementOpposite];\\n      break;\\n    case BEHAVIORS.CLOCKWISE:\\n      flipOrder = clockwise(placement);\\n      break;\\n    case BEHAVIORS.COUNTERCLOCKWISE:\\n      flipOrder = clockwise(placement, true);\\n      break;\\n    default:\\n      flipOrder = options.behavior;\\n  }\\n\\n  flipOrder.forEach(function (step, index) {\\n    if (placement !== step || flipOrder.length === index + 1) {\\n      return data;\\n    }\\n\\n    placement = data.placement.split('-')[0];\\n    placementOpposite = getOppositePlacement(placement);\\n\\n    var popperOffsets = data.offsets.popper;\\n    var refOffsets = data.offsets.reference;\\n\\n    // using floor because the reference offsets may contain decimals we are not going to consider here\\n    var floor = Math.floor;\\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\\n\\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\\n\\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\\n\\n    // flip the variation if required\\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\\n    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\\n\\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\\n      // this boolean to detect any flip loop\\n      data.flipped = true;\\n\\n      if (overlapsRef || overflowsBoundaries) {\\n        placement = flipOrder[index + 1];\\n      }\\n\\n      if (flippedVariation) {\\n        variation = getOppositeVariation(variation);\\n      }\\n\\n      data.placement = placement + (variation ? '-' + variation : '');\\n\\n      // this object contains `position`, we want to preserve it along with\\n      // any additional property we may add in the future\\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\\n\\n      data = runModifiers(data.instance.modifiers, data, 'flip');\\n    }\\n  });\\n  return data;\\n}\\n\\n/**\\n * @function\\n * @memberof Modifiers\\n * @argument {Object} data - The data object generated by update method\\n * @argument {Object} options - Modifiers configuration and options\\n * @returns {Object} The data object, properly modified\\n */\\nfunction keepTogether(data) {\\n  var _data$offsets = data.offsets,\\n      popper = _data$offsets.popper,\\n      reference = _data$offsets.reference;\\n\\n  var placement = data.placement.split('-')[0];\\n  var floor = Math.floor;\\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\\n  var side = isVertical ? 'right' : 'bottom';\\n  var opSide = isVertical ? 'left' : 'top';\\n  var measurement = isVertical ? 'width' : 'height';\\n\\n  if (popper[side] < floor(reference[opSide])) {\\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\\n  }\\n  if (popper[opSide] > floor(reference[side])) {\\n    data.offsets.popper[opSide] = floor(reference[side]);\\n  }\\n\\n  return data;\\n}\\n\\n/**\\n * Converts a string containing value + unit into a px value number\\n * @function\\n * @memberof {modifiers~offset}\\n * @private\\n * @argument {String} str - Value + unit string\\n * @argument {String} measurement - `height` or `width`\\n * @argument {Object} popperOffsets\\n * @argument {Object} referenceOffsets\\n * @returns {Number|String}\\n * Value in pixels, or original string if no values were extracted\\n */\\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\\n  // separate value from unit\\n  var split = str.match(/((?:\\\\-|\\\\+)?\\\\d*\\\\.?\\\\d*)(.*)/);\\n  var value = +split[1];\\n  var unit = split[2];\\n\\n  // If it's not a number it's an operator, I guess\\n  if (!value) {\\n    return str;\\n  }\\n\\n  if (unit.indexOf('%') === 0) {\\n    var element = void 0;\\n    switch (unit) {\\n      case '%p':\\n        element = popperOffsets;\\n        break;\\n      case '%':\\n      case '%r':\\n      default:\\n        element = referenceOffsets;\\n    }\\n\\n    var rect = getClientRect(element);\\n    return rect[measurement] / 100 * value;\\n  } else if (unit === 'vh' || unit === 'vw') {\\n    // if is a vh or vw, we calculate the size based on the viewport\\n    var size = void 0;\\n    if (unit === 'vh') {\\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\\n    } else {\\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\\n    }\\n    return size / 100 * value;\\n  } else {\\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\\n    // if is an implicit unit, it's px, and we return just the value\\n    return value;\\n  }\\n}\\n\\n/**\\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\\n * @function\\n * @memberof {modifiers~offset}\\n * @private\\n * @argument {String} offset\\n * @argument {Object} popperOffsets\\n * @argument {Object} referenceOffsets\\n * @argument {String} basePlacement\\n * @returns {Array} a two cells array with x and y offsets in numbers\\n */\\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\\n  var offsets = [0, 0];\\n\\n  // Use height if placement is left or right and index is 0 otherwise use width\\n  // in this way the first offset will use an axis and the second one\\n  // will use the other one\\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\\n\\n  // Split the offset string to obtain a list of values and operands\\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\\n  var fragments = offset.split(/(\\\\+|\\\\-)/).map(function (frag) {\\n    return frag.trim();\\n  });\\n\\n  // Detect if the offset string contains a pair of values or a single one\\n  // they could be separated by comma or space\\n  var divider = fragments.indexOf(find(fragments, function (frag) {\\n    return frag.search(/,|\\\\s/) !== -1;\\n  }));\\n\\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\\n  }\\n\\n  // If divider is found, we divide the list of values and operands to divide\\n  // them by ofset X and Y.\\n  var splitRegex = /\\\\s*,\\\\s*|\\\\s+/;\\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\\n\\n  // Convert the values with units to absolute pixels to allow our computations\\n  ops = ops.map(function (op, index) {\\n    // Most of the units rely on the orientation of the popper\\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\\n    var mergeWithPrevious = false;\\n    return op\\n    // This aggregates any `+` or `-` sign that aren't considered operators\\n    // e.g.: 10 + +5 => [10, +, +5]\\n    .reduce(function (a, b) {\\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\\n        a[a.length - 1] = b;\\n        mergeWithPrevious = true;\\n        return a;\\n      } else if (mergeWithPrevious) {\\n        a[a.length - 1] += b;\\n        mergeWithPrevious = false;\\n        return a;\\n      } else {\\n        return a.concat(b);\\n      }\\n    }, [])\\n    // Here we convert the string values into number values (in px)\\n    .map(function (str) {\\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\\n    });\\n  });\\n\\n  // Loop trough the offsets arrays and execute the operations\\n  ops.forEach(function (op, index) {\\n    op.forEach(function (frag, index2) {\\n      if (isNumeric(frag)) {\\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\\n      }\\n    });\\n  });\\n  return offsets;\\n}\\n\\n/**\\n * @function\\n * @memberof Modifiers\\n * @argument {Object} data - The data object generated by update method\\n * @argument {Object} options - Modifiers configuration and options\\n * @argument {Number|String} options.offset=0\\n * The offset value as described in the modifier description\\n * @returns {Object} The data object, properly modified\\n */\\nfunction offset(data, _ref) {\\n  var offset = _ref.offset;\\n  var placement = data.placement,\\n      _data$offsets = data.offsets,\\n      popper = _data$offsets.popper,\\n      reference = _data$offsets.reference;\\n\\n  var basePlacement = placement.split('-')[0];\\n\\n  var offsets = void 0;\\n  if (isNumeric(+offset)) {\\n    offsets = [+offset, 0];\\n  } else {\\n    offsets = parseOffset(offset, popper, reference, basePlacement);\\n  }\\n\\n  if (basePlacement === 'left') {\\n    popper.top += offsets[0];\\n    popper.left -= offsets[1];\\n  } else if (basePlacement === 'right') {\\n    popper.top += offsets[0];\\n    popper.left += offsets[1];\\n  } else if (basePlacement === 'top') {\\n    popper.left += offsets[0];\\n    popper.top -= offsets[1];\\n  } else if (basePlacement === 'bottom') {\\n    popper.left += offsets[0];\\n    popper.top += offsets[1];\\n  }\\n\\n  data.popper = popper;\\n  return data;\\n}\\n\\n/**\\n * @function\\n * @memberof Modifiers\\n * @argument {Object} data - The data object generated by `update` method\\n * @argument {Object} options - Modifiers configuration and options\\n * @returns {Object} The data object, properly modified\\n */\\nfunction preventOverflow(data, options) {\\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\\n\\n  // If offsetParent is the reference element, we really want to\\n  // go one step up and use the next offsetParent as reference to\\n  // avoid to make this modifier completely useless and look like broken\\n  if (data.instance.reference === boundariesElement) {\\n    boundariesElement = getOffsetParent(boundariesElement);\\n  }\\n\\n  // NOTE: DOM access here\\n  // resets the popper's position so that the document size can be calculated excluding\\n  // the size of the popper element itself\\n  var transformProp = getSupportedPropertyName('transform');\\n  var popperStyles = data.instance.popper.style; // assignment to help minification\\n  var top = popperStyles.top,\\n      left = popperStyles.left,\\n      transform = popperStyles[transformProp];\\n\\n  popperStyles.top = '';\\n  popperStyles.left = '';\\n  popperStyles[transformProp] = '';\\n\\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\\n\\n  // NOTE: DOM access here\\n  // restores the original style properties after the offsets have been computed\\n  popperStyles.top = top;\\n  popperStyles.left = left;\\n  popperStyles[transformProp] = transform;\\n\\n  options.boundaries = boundaries;\\n\\n  var order = options.priority;\\n  var popper = data.offsets.popper;\\n\\n  var check = {\\n    primary: function primary(placement) {\\n      var value = popper[placement];\\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\\n        value = Math.max(popper[placement], boundaries[placement]);\\n      }\\n      return defineProperty({}, placement, value);\\n    },\\n    secondary: function secondary(placement) {\\n      var mainSide = placement === 'right' ? 'left' : 'top';\\n      var value = popper[mainSide];\\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\\n      }\\n      return defineProperty({}, mainSide, value);\\n    }\\n  };\\n\\n  order.forEach(function (placement) {\\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\\n    popper = _extends({}, popper, check[side](placement));\\n  });\\n\\n  data.offsets.popper = popper;\\n\\n  return data;\\n}\\n\\n/**\\n * @function\\n * @memberof Modifiers\\n * @argument {Object} data - The data object generated by `update` method\\n * @argument {Object} options - Modifiers configuration and options\\n * @returns {Object} The data object, properly modified\\n */\\nfunction shift(data) {\\n  var placement = data.placement;\\n  var basePlacement = placement.split('-')[0];\\n  var shiftvariation = placement.split('-')[1];\\n\\n  // if shift shiftvariation is specified, run the modifier\\n  if (shiftvariation) {\\n    var _data$offsets = data.offsets,\\n        reference = _data$offsets.reference,\\n        popper = _data$offsets.popper;\\n\\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\\n    var side = isVertical ? 'left' : 'top';\\n    var measurement = isVertical ? 'width' : 'height';\\n\\n    var shiftOffsets = {\\n      start: defineProperty({}, side, reference[side]),\\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\\n    };\\n\\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\\n  }\\n\\n  return data;\\n}\\n\\n/**\\n * @function\\n * @memberof Modifiers\\n * @argument {Object} data - The data object generated by update method\\n * @argument {Object} options - Modifiers configuration and options\\n * @returns {Object} The data object, properly modified\\n */\\nfunction hide(data) {\\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\\n    return data;\\n  }\\n\\n  var refRect = data.offsets.reference;\\n  var bound = find(data.instance.modifiers, function (modifier) {\\n    return modifier.name === 'preventOverflow';\\n  }).boundaries;\\n\\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\\n    // Avoid unnecessary DOM access if visibility hasn't changed\\n    if (data.hide === true) {\\n      return data;\\n    }\\n\\n    data.hide = true;\\n    data.attributes['x-out-of-boundaries'] = '';\\n  } else {\\n    // Avoid unnecessary DOM access if visibility hasn't changed\\n    if (data.hide === false) {\\n      return data;\\n    }\\n\\n    data.hide = false;\\n    data.attributes['x-out-of-boundaries'] = false;\\n  }\\n\\n  return data;\\n}\\n\\n/**\\n * @function\\n * @memberof Modifiers\\n * @argument {Object} data - The data object generated by `update` method\\n * @argument {Object} options - Modifiers configuration and options\\n * @returns {Object} The data object, properly modified\\n */\\nfunction inner(data) {\\n  var placement = data.placement;\\n  var basePlacement = placement.split('-')[0];\\n  var _data$offsets = data.offsets,\\n      popper = _data$offsets.popper,\\n      reference = _data$offsets.reference;\\n\\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\\n\\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\\n\\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\\n\\n  data.placement = getOppositePlacement(placement);\\n  data.offsets.popper = getClientRect(popper);\\n\\n  return data;\\n}\\n\\n/**\\n * Modifier function, each modifier can have a function of this type assigned\\n * to its `fn` property.<br />\\n * These functions will be called on each update, this means that you must\\n * make sure they are performant enough to avoid performance bottlenecks.\\n *\\n * @function ModifierFn\\n * @argument {dataObject} data - The data object generated by `update` method\\n * @argument {Object} options - Modifiers configuration and options\\n * @returns {dataObject} The data object, properly modified\\n */\\n\\n/**\\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\\n * needed by the library.\\n *\\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\\n * All the other properties are configurations that could be tweaked.\\n * @namespace modifiers\\n */\\nvar modifiers = {\\n  /**\\n   * Modifier used to shift the popper on the start or end of its reference\\n   * element.<br />\\n   * It will read the variation of the `placement` property.<br />\\n   * It can be one either `-end` or `-start`.\\n   * @memberof modifiers\\n   * @inner\\n   */\\n  shift: {\\n    /** @prop {number} order=100 - Index used to define the order of execution */\\n    order: 100,\\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\\n    enabled: true,\\n    /** @prop {ModifierFn} */\\n    fn: shift\\n  },\\n\\n  /**\\n   * The `offset` modifier can shift your popper on both its axis.\\n   *\\n   * It accepts the following units:\\n   * - `px` or unit-less, interpreted as pixels\\n   * - `%` or `%r`, percentage relative to the length of the reference element\\n   * - `%p`, percentage relative to the length of the popper element\\n   * - `vw`, CSS viewport width unit\\n   * - `vh`, CSS viewport height unit\\n   *\\n   * For length is intended the main axis relative to the placement of the popper.<br />\\n   * This means that if the placement is `top` or `bottom`, the length will be the\\n   * `width`. In case of `left` or `right`, it will be the `height`.\\n   *\\n   * You can provide a single value (as `Number` or `String`), or a pair of values\\n   * as `String` divided by a comma or one (or more) white spaces.<br />\\n   * The latter is a deprecated method because it leads to confusion and will be\\n   * removed in v2.<br />\\n   * Additionally, it accepts additions and subtractions between different units.\\n   * Note that multiplications and divisions aren't supported.\\n   *\\n   * Valid examples are:\\n   * ```\\n   * 10\\n   * '10%'\\n   * '10, 10'\\n   * '10%, 10'\\n   * '10 + 10%'\\n   * '10 - 5vh + 3%'\\n   * '-10px + 5vh, 5px - 6%'\\n   * ```\\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\\n   *\\n   * @memberof modifiers\\n   * @inner\\n   */\\n  offset: {\\n    /** @prop {number} order=200 - Index used to define the order of execution */\\n    order: 200,\\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\\n    enabled: true,\\n    /** @prop {ModifierFn} */\\n    fn: offset,\\n    /** @prop {Number|String} offset=0\\n     * The offset value as described in the modifier description\\n     */\\n    offset: 0\\n  },\\n\\n  /**\\n   * Modifier used to prevent the popper from being positioned outside the boundary.\\n   *\\n   * A scenario exists where the reference itself is not within the boundaries.<br />\\n   * We can say it has \\\"escaped the boundaries\\\" — or just \\\"escaped\\\".<br />\\n   * In this case we need to decide whether the popper should either:\\n   *\\n   * - detach from the reference and remain \\\"trapped\\\" in the boundaries, or\\n   * - if it should ignore the boundary and \\\"escape with its reference\\\"\\n   *\\n   * When `escapeWithReference` is set to`true` and reference is completely\\n   * outside its boundaries, the popper will overflow (or completely leave)\\n   * the boundaries in order to remain attached to the edge of the reference.\\n   *\\n   * @memberof modifiers\\n   * @inner\\n   */\\n  preventOverflow: {\\n    /** @prop {number} order=300 - Index used to define the order of execution */\\n    order: 300,\\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\\n    enabled: true,\\n    /** @prop {ModifierFn} */\\n    fn: preventOverflow,\\n    /**\\n     * @prop {Array} [priority=['left','right','top','bottom']]\\n     * Popper will try to prevent overflow following these priorities by default,\\n     * then, it could overflow on the left and on top of the `boundariesElement`\\n     */\\n    priority: ['left', 'right', 'top', 'bottom'],\\n    /**\\n     * @prop {number} padding=5\\n     * Amount of pixel used to define a minimum distance between the boundaries\\n     * and the popper. This makes sure the popper always has a little padding\\n     * between the edges of its container\\n     */\\n    padding: 5,\\n    /**\\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\\n     * `viewport` or any DOM element.\\n     */\\n    boundariesElement: 'scrollParent'\\n  },\\n\\n  /**\\n   * Modifier used to make sure the reference and its popper stay near each other\\n   * without leaving any gap between the two. Especially useful when the arrow is\\n   * enabled and you want to ensure that it points to its reference element.\\n   * It cares only about the first axis. You can still have poppers with margin\\n   * between the popper and its reference element.\\n   * @memberof modifiers\\n   * @inner\\n   */\\n  keepTogether: {\\n    /** @prop {number} order=400 - Index used to define the order of execution */\\n    order: 400,\\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\\n    enabled: true,\\n    /** @prop {ModifierFn} */\\n    fn: keepTogether\\n  },\\n\\n  /**\\n   * This modifier is used to move the `arrowElement` of the popper to make\\n   * sure it is positioned between the reference element and its popper element.\\n   * It will read the outer size of the `arrowElement` node to detect how many\\n   * pixels of conjunction are needed.\\n   *\\n   * It has no effect if no `arrowElement` is provided.\\n   * @memberof modifiers\\n   * @inner\\n   */\\n  arrow: {\\n    /** @prop {number} order=500 - Index used to define the order of execution */\\n    order: 500,\\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\\n    enabled: true,\\n    /** @prop {ModifierFn} */\\n    fn: arrow,\\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\\n    element: '[x-arrow]'\\n  },\\n\\n  /**\\n   * Modifier used to flip the popper's placement when it starts to overlap its\\n   * reference element.\\n   *\\n   * Requires the `preventOverflow` modifier before it in order to work.\\n   *\\n   * **NOTE:** this modifier will interrupt the current update cycle and will\\n   * restart it if it detects the need to flip the placement.\\n   * @memberof modifiers\\n   * @inner\\n   */\\n  flip: {\\n    /** @prop {number} order=600 - Index used to define the order of execution */\\n    order: 600,\\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\\n    enabled: true,\\n    /** @prop {ModifierFn} */\\n    fn: flip,\\n    /**\\n     * @prop {String|Array} behavior='flip'\\n     * The behavior used to change the popper's placement. It can be one of\\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\\n     * placements (with optional variations)\\n     */\\n    behavior: 'flip',\\n    /**\\n     * @prop {number} padding=5\\n     * The popper will flip if it hits the edges of the `boundariesElement`\\n     */\\n    padding: 5,\\n    /**\\n     * @prop {String|HTMLElement} boundariesElement='viewport'\\n     * The element which will define the boundaries of the popper position.\\n     * The popper will never be placed outside of the defined boundaries\\n     * (except if `keepTogether` is enabled)\\n     */\\n    boundariesElement: 'viewport'\\n  },\\n\\n  /**\\n   * Modifier used to make the popper flow toward the inner of the reference element.\\n   * By default, when this modifier is disabled, the popper will be placed outside\\n   * the reference element.\\n   * @memberof modifiers\\n   * @inner\\n   */\\n  inner: {\\n    /** @prop {number} order=700 - Index used to define the order of execution */\\n    order: 700,\\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\\n    enabled: false,\\n    /** @prop {ModifierFn} */\\n    fn: inner\\n  },\\n\\n  /**\\n   * Modifier used to hide the popper when its reference element is outside of the\\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\\n   * be used to hide with a CSS selector the popper when its reference is\\n   * out of boundaries.\\n   *\\n   * Requires the `preventOverflow` modifier before it in order to work.\\n   * @memberof modifiers\\n   * @inner\\n   */\\n  hide: {\\n    /** @prop {number} order=800 - Index used to define the order of execution */\\n    order: 800,\\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\\n    enabled: true,\\n    /** @prop {ModifierFn} */\\n    fn: hide\\n  },\\n\\n  /**\\n   * Computes the style that will be applied to the popper element to gets\\n   * properly positioned.\\n   *\\n   * Note that this modifier will not touch the DOM, it just prepares the styles\\n   * so that `applyStyle` modifier can apply it. This separation is useful\\n   * in case you need to replace `applyStyle` with a custom implementation.\\n   *\\n   * This modifier has `850` as `order` value to maintain backward compatibility\\n   * with previous versions of Popper.js. Expect the modifiers ordering method\\n   * to change in future major versions of the library.\\n   *\\n   * @memberof modifiers\\n   * @inner\\n   */\\n  computeStyle: {\\n    /** @prop {number} order=850 - Index used to define the order of execution */\\n    order: 850,\\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\\n    enabled: true,\\n    /** @prop {ModifierFn} */\\n    fn: computeStyle,\\n    /**\\n     * @prop {Boolean} gpuAcceleration=true\\n     * If true, it uses the CSS 3D transformation to position the popper.\\n     * Otherwise, it will use the `top` and `left` properties\\n     */\\n    gpuAcceleration: true,\\n    /**\\n     * @prop {string} [x='bottom']\\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\\n     * Change this if your popper should grow in a direction different from `bottom`\\n     */\\n    x: 'bottom',\\n    /**\\n     * @prop {string} [x='left']\\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\\n     * Change this if your popper should grow in a direction different from `right`\\n     */\\n    y: 'right'\\n  },\\n\\n  /**\\n   * Applies the computed styles to the popper element.\\n   *\\n   * All the DOM manipulations are limited to this modifier. This is useful in case\\n   * you want to integrate Popper.js inside a framework or view library and you\\n   * want to delegate all the DOM manipulations to it.\\n   *\\n   * Note that if you disable this modifier, you must make sure the popper element\\n   * has its position set to `absolute` before Popper.js can do its work!\\n   *\\n   * Just disable this modifier and define your own to achieve the desired effect.\\n   *\\n   * @memberof modifiers\\n   * @inner\\n   */\\n  applyStyle: {\\n    /** @prop {number} order=900 - Index used to define the order of execution */\\n    order: 900,\\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\\n    enabled: true,\\n    /** @prop {ModifierFn} */\\n    fn: applyStyle,\\n    /** @prop {Function} */\\n    onLoad: applyStyleOnLoad,\\n    /**\\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\\n     * @prop {Boolean} gpuAcceleration=true\\n     * If true, it uses the CSS 3D transformation to position the popper.\\n     * Otherwise, it will use the `top` and `left` properties\\n     */\\n    gpuAcceleration: undefined\\n  }\\n};\\n\\n/**\\n * The `dataObject` is an object containing all the information used by Popper.js.\\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\\n * @name dataObject\\n * @property {Object} data.instance The Popper.js instance\\n * @property {String} data.placement Placement applied to popper\\n * @property {String} data.originalPlacement Placement originally defined on init\\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\\n * @property {Object} data.boundaries Offsets of the popper boundaries\\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\\n */\\n\\n/**\\n * Default options provided to Popper.js constructor.<br />\\n * These can be overridden using the `options` argument of Popper.js.<br />\\n * To override an option, simply pass an object with the same\\n * structure of the `options` object, as the 3rd argument. For example:\\n * ```\\n * new Popper(ref, pop, {\\n *   modifiers: {\\n *     preventOverflow: { enabled: false }\\n *   }\\n * })\\n * ```\\n * @type {Object}\\n * @static\\n * @memberof Popper\\n */\\nvar Defaults = {\\n  /**\\n   * Popper's placement.\\n   * @prop {Popper.placements} placement='bottom'\\n   */\\n  placement: 'bottom',\\n\\n  /**\\n   * Set this to true if you want popper to position it self in 'fixed' mode\\n   * @prop {Boolean} positionFixed=false\\n   */\\n  positionFixed: false,\\n\\n  /**\\n   * Whether events (resize, scroll) are initially enabled.\\n   * @prop {Boolean} eventsEnabled=true\\n   */\\n  eventsEnabled: true,\\n\\n  /**\\n   * Set to true if you want to automatically remove the popper when\\n   * you call the `destroy` method.\\n   * @prop {Boolean} removeOnDestroy=false\\n   */\\n  removeOnDestroy: false,\\n\\n  /**\\n   * Callback called when the popper is created.<br />\\n   * By default, it is set to no-op.<br />\\n   * Access Popper.js instance with `data.instance`.\\n   * @prop {onCreate}\\n   */\\n  onCreate: function onCreate() {},\\n\\n  /**\\n   * Callback called when the popper is updated. This callback is not called\\n   * on the initialization/creation of the popper, but only on subsequent\\n   * updates.<br />\\n   * By default, it is set to no-op.<br />\\n   * Access Popper.js instance with `data.instance`.\\n   * @prop {onUpdate}\\n   */\\n  onUpdate: function onUpdate() {},\\n\\n  /**\\n   * List of modifiers used to modify the offsets before they are applied to the popper.\\n   * They provide most of the functionalities of Popper.js.\\n   * @prop {modifiers}\\n   */\\n  modifiers: modifiers\\n};\\n\\n/**\\n * @callback onCreate\\n * @param {dataObject} data\\n */\\n\\n/**\\n * @callback onUpdate\\n * @param {dataObject} data\\n */\\n\\n// Utils\\n// Methods\\nvar Popper = function () {\\n  /**\\n   * Creates a new Popper.js instance.\\n   * @class Popper\\n   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\\n   * @param {HTMLElement} popper - The HTML element used as the popper\\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\\n   * @return {Object} instance - The generated Popper.js instance\\n   */\\n  function Popper(reference, popper) {\\n    var _this = this;\\n\\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\\n    classCallCheck(this, Popper);\\n\\n    this.scheduleUpdate = function () {\\n      return requestAnimationFrame(_this.update);\\n    };\\n\\n    // make update() debounced, so that it only runs at most once-per-tick\\n    this.update = debounce(this.update.bind(this));\\n\\n    // with {} we create a new object with the options inside it\\n    this.options = _extends({}, Popper.Defaults, options);\\n\\n    // init state\\n    this.state = {\\n      isDestroyed: false,\\n      isCreated: false,\\n      scrollParents: []\\n    };\\n\\n    // get reference and popper elements (allow jQuery wrappers)\\n    this.reference = reference && reference.jquery ? reference[0] : reference;\\n    this.popper = popper && popper.jquery ? popper[0] : popper;\\n\\n    // Deep merge modifiers options\\n    this.options.modifiers = {};\\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\\n    });\\n\\n    // Refactoring modifiers' list (Object => Array)\\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\\n      return _extends({\\n        name: name\\n      }, _this.options.modifiers[name]);\\n    })\\n    // sort the modifiers by order\\n    .sort(function (a, b) {\\n      return a.order - b.order;\\n    });\\n\\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\\n    // such code is executed in the same order of its modifier\\n    // they could add new properties to their options configuration\\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\\n    this.modifiers.forEach(function (modifierOptions) {\\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\\n      }\\n    });\\n\\n    // fire the first update to position the popper in the right place\\n    this.update();\\n\\n    var eventsEnabled = this.options.eventsEnabled;\\n    if (eventsEnabled) {\\n      // setup event listeners, they will take care of update the position in specific situations\\n      this.enableEventListeners();\\n    }\\n\\n    this.state.eventsEnabled = eventsEnabled;\\n  }\\n\\n  // We can't use class properties because they don't get listed in the\\n  // class prototype and break stuff like Sinon stubs\\n\\n\\n  createClass(Popper, [{\\n    key: 'update',\\n    value: function update$$1() {\\n      return update.call(this);\\n    }\\n  }, {\\n    key: 'destroy',\\n    value: function destroy$$1() {\\n      return destroy.call(this);\\n    }\\n  }, {\\n    key: 'enableEventListeners',\\n    value: function enableEventListeners$$1() {\\n      return enableEventListeners.call(this);\\n    }\\n  }, {\\n    key: 'disableEventListeners',\\n    value: function disableEventListeners$$1() {\\n      return disableEventListeners.call(this);\\n    }\\n\\n    /**\\n     * Schedules an update. It will run on the next UI update available.\\n     * @method scheduleUpdate\\n     * @memberof Popper\\n     */\\n\\n    /**\\n     * Collection of utilities useful when writing custom modifiers.\\n     * Starting from version 1.7, this method is available only if you\\n     * include `popper-utils.js` before `popper.js`.\\n     *\\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\\n     * and will be removed in v2! Use the PopperUtils module directly instead.\\n     * Due to the high instability of the methods contained in Utils, we can't\\n     * guarantee them to follow semver. Use them at your own risk!\\n     * @static\\n     * @private\\n     * @type {Object}\\n     * @deprecated since version 1.8\\n     * @member Utils\\n     * @memberof Popper\\n     */\\n\\n  }]);\\n  return Popper;\\n}();\\n\\n/**\\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\\n * and lets you use it as replacement of a real DOM node.<br />\\n * You can use this method to position a popper relatively to a set of coordinates\\n * in case you don't have a DOM node to use as reference.\\n *\\n * ```\\n * new Popper(referenceObject, popperNode);\\n * ```\\n *\\n * NB: This feature isn't supported in Internet Explorer 10.\\n * @name referenceObject\\n * @property {Function} data.getBoundingClientRect\\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\\n * @property {number} data.clientWidth\\n * An ES6 getter that will return the width of the virtual reference element.\\n * @property {number} data.clientHeight\\n * An ES6 getter that will return the height of the virtual reference element.\\n */\\n\\nPopper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\\nPopper.placements = placements;\\nPopper.Defaults = Defaults;\\n\\nexports.default = Popper;\\n//# sourceMappingURL=popper.js.map\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \\\"./node_modules/webpack/buildin/global.js\\\")))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/popper.js/dist/esm/popper.js\\n\");\n\n//# sourceURL=webpack:///./node_modules/popper.js/dist/esm/popper.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("eval(\"/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\\nmodule.exports = __webpack_amd_options__;\\n\\n/* WEBPACK VAR INJECTION */}.call(this, {}))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanM/MDA4NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9hbWQtb3B0aW9ucy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XG4iXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/amd-options.js\\n\");\n\n//# sourceURL=webpack:///(webpack)/buildin/amd-options.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"\\n\\nvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\nvar g;\\n\\n// This works in non-strict mode\\ng = function () {\\n\\treturn this;\\n}();\\n\\ntry {\\n\\t// This works if eval is allowed (see CSP)\\n\\tg = g || Function(\\\"return this\\\")() || (1, eval)(\\\"this\\\");\\n} catch (e) {\\n\\t// This works if the window reference is available\\n\\tif ((typeof window === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(window)) === \\\"object\\\") g = window;\\n}\\n\\n// g can still be undefined, but nothing to do about it...\\n// We return undefined, instead of nothing here, so it's\\n// easier to handle this case. if(!global) { ...}\\n\\nmodule.exports = g;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsQ0FBSjs7QUFFQTtBQUNBQSxJQUFLLFlBQVc7QUFDZixRQUFPLElBQVA7QUFDQSxDQUZHLEVBQUo7O0FBSUEsSUFBSTtBQUNIO0FBQ0FBLEtBQUlBLEtBQUtDLFNBQVMsYUFBVCxHQUFMLElBQWtDLENBQUMsR0FBR0MsSUFBSixFQUFVLE1BQVYsQ0FBdEM7QUFDQSxDQUhELENBR0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1g7QUFDQSxLQUFJLFFBQU9DLE1BQVAseUNBQU9BLE1BQVAsT0FBa0IsUUFBdEIsRUFBZ0NKLElBQUlJLE1BQUo7QUFDaEM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCTixDQUFqQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\\n\");\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"\\n\\nmodule.exports = function (module) {\\n\\tif (!module.webpackPolyfill) {\\n\\t\\tmodule.deprecate = function () {};\\n\\t\\tmodule.paths = [];\\n\\t\\t// module.parent = undefined by default\\n\\t\\tif (!module.children) module.children = [];\\n\\t\\tObject.defineProperty(module, \\\"loaded\\\", {\\n\\t\\t\\tenumerable: true,\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn module.l;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tObject.defineProperty(module, \\\"id\\\", {\\n\\t\\t\\tenumerable: true,\\n\\t\\t\\tget: function get() {\\n\\t\\t\\t\\treturn module.i;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tmodule.webpackPolyfill = 1;\\n\\t}\\n\\treturn module;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJsIiwiaSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFTRCxNQUFULEVBQWlCO0FBQ2pDLEtBQUksQ0FBQ0EsT0FBT0UsZUFBWixFQUE2QjtBQUM1QkYsU0FBT0csU0FBUCxHQUFtQixZQUFXLENBQUUsQ0FBaEM7QUFDQUgsU0FBT0ksS0FBUCxHQUFlLEVBQWY7QUFDQTtBQUNBLE1BQUksQ0FBQ0osT0FBT0ssUUFBWixFQUFzQkwsT0FBT0ssUUFBUCxHQUFrQixFQUFsQjtBQUN0QkMsU0FBT0MsY0FBUCxDQUFzQlAsTUFBdEIsRUFBOEIsUUFBOUIsRUFBd0M7QUFDdkNRLGVBQVksSUFEMkI7QUFFdkNDLFFBQUssZUFBVztBQUNmLFdBQU9ULE9BQU9VLENBQWQ7QUFDQTtBQUpzQyxHQUF4QztBQU1BSixTQUFPQyxjQUFQLENBQXNCUCxNQUF0QixFQUE4QixJQUE5QixFQUFvQztBQUNuQ1EsZUFBWSxJQUR1QjtBQUVuQ0MsUUFBSyxlQUFXO0FBQ2YsV0FBT1QsT0FBT1csQ0FBZDtBQUNBO0FBSmtDLEdBQXBDO0FBTUFYLFNBQU9FLGVBQVAsR0FBeUIsQ0FBekI7QUFDQTtBQUNELFFBQU9GLE1BQVA7QUFDQSxDQXJCRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vbW9kdWxlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\\n\");\n\n//# sourceURL=webpack:///(webpack)/buildin/module.js?");

/***/ }),

/***/ "./vendor/bootstrap-select-1.13.0-beta/js/bootstrap-select.js":
/*!********************************************************************!*\
  !*** ./vendor/bootstrap-select-1.13.0-beta/js/bootstrap-select.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\\n\\nvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n/*!\\r\\n * Bootstrap-select v1.13.0-beta (https://developer.snapappointments.com/bootstrap-select)\\r\\n *\\r\\n * Copyright 2012-2018 SnapAppointments, LLC\\r\\n * Licensed under MIT (https://github.com/snapappointments/bootstrap-select/blob/master/LICENSE)\\r\\n */\\n\\n(function (root, factory) {\\n  if (true) {\\n    // AMD. Register as an anonymous module unless amdModuleId is set\\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \\\"./node_modules/jquery/dist/jquery.js\\\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (a0) {\\n      return factory(a0);\\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n  } else {}\\n})(undefined, function (jQuery) {\\n\\n  (function ($) {\\n    'use strict';\\n\\n    var testElement = document.createElement('_');\\n\\n    testElement.classList.toggle('c3', false);\\n\\n    // Polyfill for IE 10 and Firefox <24, where classList.toggle does not\\n    // support the second argument.\\n    if (testElement.classList.contains('c3')) {\\n      var _toggle = DOMTokenList.prototype.toggle;\\n\\n      DOMTokenList.prototype.toggle = function (token, force) {\\n        if (1 in arguments && !this.contains(token) === !force) {\\n          return force;\\n        } else {\\n          return _toggle.call(this, token);\\n        }\\n      };\\n    }\\n\\n    // shallow array comparison\\n    function isEqual(array1, array2) {\\n      return array1.length === array2.length && array1.every(function (element, index) {\\n        return element === array2[index];\\n      });\\n    };\\n\\n    //<editor-fold desc=\\\"Shims\\\">\\n    if (!String.prototype.startsWith) {\\n      (function () {\\n        'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\\n\\n        var defineProperty = function () {\\n          // IE 8 only supports `Object.defineProperty` on DOM elements\\n          try {\\n            var object = {};\\n            var $defineProperty = Object.defineProperty;\\n            var result = $defineProperty(object, object, object) && $defineProperty;\\n          } catch (error) {}\\n          return result;\\n        }();\\n        var toString = {}.toString;\\n        var startsWith = function startsWith(search) {\\n          if (this == null) {\\n            throw new TypeError();\\n          }\\n          var string = String(this);\\n          if (search && toString.call(search) == '[object RegExp]') {\\n            throw new TypeError();\\n          }\\n          var stringLength = string.length;\\n          var searchString = String(search);\\n          var searchLength = searchString.length;\\n          var position = arguments.length > 1 ? arguments[1] : undefined;\\n          // `ToInteger`\\n          var pos = position ? Number(position) : 0;\\n          if (pos != pos) {\\n            // better `isNaN`\\n            pos = 0;\\n          }\\n          var start = Math.min(Math.max(pos, 0), stringLength);\\n          // Avoid the `indexOf` call if no match is possible\\n          if (searchLength + start > stringLength) {\\n            return false;\\n          }\\n          var index = -1;\\n          while (++index < searchLength) {\\n            if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {\\n              return false;\\n            }\\n          }\\n          return true;\\n        };\\n        if (defineProperty) {\\n          defineProperty(String.prototype, 'startsWith', {\\n            'value': startsWith,\\n            'configurable': true,\\n            'writable': true\\n          });\\n        } else {\\n          String.prototype.startsWith = startsWith;\\n        }\\n      })();\\n    }\\n\\n    if (!Object.keys) {\\n      Object.keys = function (o, // object\\n      k, // key\\n      r // result array\\n      ) {\\n        // initialize object and result\\n        r = [];\\n        // iterate over object keys\\n        for (k in o) {\\n          // fill result array with non-prototypical keys\\n          r.hasOwnProperty.call(o, k) && r.push(k);\\n        } // return result\\n        return r;\\n      };\\n    }\\n\\n    // set data-selected on select element if the value has been programmatically selected\\n    // prior to initialization of bootstrap-select\\n    // * consider removing or replacing an alternative method *\\n    var valHooks = {\\n      useDefault: false,\\n      _set: $.valHooks.select.set\\n    };\\n\\n    $.valHooks.select.set = function (elem, value) {\\n      if (value && !valHooks.useDefault) $(elem).data('selected', true);\\n\\n      return valHooks._set.apply(this, arguments);\\n    };\\n\\n    var changed_arguments = null;\\n\\n    var EventIsSupported = function () {\\n      try {\\n        new Event('change');\\n        return true;\\n      } catch (e) {\\n        return false;\\n      }\\n    }();\\n\\n    $.fn.triggerNative = function (eventName) {\\n      var el = this[0],\\n          event;\\n\\n      if (el.dispatchEvent) {\\n        // for modern browsers & IE9+\\n        if (EventIsSupported) {\\n          // For modern browsers\\n          event = new Event(eventName, {\\n            bubbles: true\\n          });\\n        } else {\\n          // For IE since it doesn't support Event constructor\\n          event = document.createEvent('Event');\\n          event.initEvent(eventName, true, false);\\n        }\\n\\n        el.dispatchEvent(event);\\n      } else if (el.fireEvent) {\\n        // for IE8\\n        event = document.createEventObject();\\n        event.eventType = eventName;\\n        el.fireEvent('on' + eventName, event);\\n      } else {\\n        // fall back to jQuery.trigger\\n        this.trigger(eventName);\\n      }\\n    };\\n    //</editor-fold>\\n\\n    function stringSearch(li, searchString, method, normalize) {\\n      var stringTypes = ['content', 'subtext', 'tokens'],\\n          searchSuccess = false;\\n\\n      for (var i = 0; i < stringTypes.length; i++) {\\n        var stringType = stringTypes[i],\\n            string = li[stringType];\\n\\n        if (string) {\\n          if (normalize) string = normalizeToBase(string);\\n          string = string.toUpperCase();\\n\\n          if (method === 'contains') {\\n            searchSuccess = string.indexOf(searchString) >= 0;\\n          } else {\\n            searchSuccess = string.startsWith(searchString);\\n          }\\n\\n          if (searchSuccess) break;\\n        }\\n      }\\n\\n      return searchSuccess;\\n    }\\n\\n    function toInteger(value) {\\n      return parseInt(value, 10) || 0;\\n    }\\n\\n    /**\\r\\n     * Remove all diatrics from the given text.\\r\\n     * @access private\\r\\n     * @param {String} text\\r\\n     * @returns {String}\\r\\n     */\\n    function normalizeToBase(text) {\\n      var rExps = [{ re: /[\\\\xC0-\\\\xC6]/g, ch: \\\"A\\\" }, { re: /[\\\\xE0-\\\\xE6]/g, ch: \\\"a\\\" }, { re: /[\\\\xC8-\\\\xCB]/g, ch: \\\"E\\\" }, { re: /[\\\\xE8-\\\\xEB]/g, ch: \\\"e\\\" }, { re: /[\\\\xCC-\\\\xCF]/g, ch: \\\"I\\\" }, { re: /[\\\\xEC-\\\\xEF]/g, ch: \\\"i\\\" }, { re: /[\\\\xD2-\\\\xD6]/g, ch: \\\"O\\\" }, { re: /[\\\\xF2-\\\\xF6]/g, ch: \\\"o\\\" }, { re: /[\\\\xD9-\\\\xDC]/g, ch: \\\"U\\\" }, { re: /[\\\\xF9-\\\\xFC]/g, ch: \\\"u\\\" }, { re: /[\\\\xC7-\\\\xE7]/g, ch: \\\"c\\\" }, { re: /[\\\\xD1]/g, ch: \\\"N\\\" }, { re: /[\\\\xF1]/g, ch: \\\"n\\\" }];\\n      $.each(rExps, function () {\\n        text = text ? text.replace(this.re, this.ch) : '';\\n      });\\n      return text;\\n    }\\n\\n    // List of HTML entities for escaping.\\n    var escapeMap = {\\n      '&': '&amp;',\\n      '<': '&lt;',\\n      '>': '&gt;',\\n      '\\\"': '&quot;',\\n      \\\"'\\\": '&#x27;',\\n      '`': '&#x60;'\\n    };\\n\\n    var unescapeMap = {\\n      '&amp;': '&',\\n      '&lt;': '<',\\n      '&gt;': '>',\\n      '&quot;': '\\\"',\\n      '&#x27;': \\\"'\\\",\\n      '&#x60;': '`'\\n    };\\n\\n    // Functions for escaping and unescaping strings to/from HTML interpolation.\\n    var createEscaper = function createEscaper(map) {\\n      var escaper = function escaper(match) {\\n        return map[match];\\n      };\\n      // Regexes for identifying a key that needs to be escaped.\\n      var source = '(?:' + Object.keys(map).join('|') + ')';\\n      var testRegexp = RegExp(source);\\n      var replaceRegexp = RegExp(source, 'g');\\n      return function (string) {\\n        string = string == null ? '' : '' + string;\\n        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\\n      };\\n    };\\n\\n    var htmlEscape = createEscaper(escapeMap);\\n    var htmlUnescape = createEscaper(unescapeMap);\\n\\n    /**\\r\\n     * ------------------------------------------------------------------------\\r\\n     * Constants\\r\\n     * ------------------------------------------------------------------------\\r\\n     */\\n\\n    var keyCodeMap = {\\n      32: ' ',\\n      48: '0',\\n      49: '1',\\n      50: '2',\\n      51: '3',\\n      52: '4',\\n      53: '5',\\n      54: '6',\\n      55: '7',\\n      56: '8',\\n      57: '9',\\n      59: ';',\\n      65: 'A',\\n      66: 'B',\\n      67: 'C',\\n      68: 'D',\\n      69: 'E',\\n      70: 'F',\\n      71: 'G',\\n      72: 'H',\\n      73: 'I',\\n      74: 'J',\\n      75: 'K',\\n      76: 'L',\\n      77: 'M',\\n      78: 'N',\\n      79: 'O',\\n      80: 'P',\\n      81: 'Q',\\n      82: 'R',\\n      83: 'S',\\n      84: 'T',\\n      85: 'U',\\n      86: 'V',\\n      87: 'W',\\n      88: 'X',\\n      89: 'Y',\\n      90: 'Z',\\n      96: '0',\\n      97: '1',\\n      98: '2',\\n      99: '3',\\n      100: '4',\\n      101: '5',\\n      102: '6',\\n      103: '7',\\n      104: '8',\\n      105: '9'\\n    };\\n\\n    var keyCodes = {\\n      ESCAPE: 27, // KeyboardEvent.which value for Escape (Esc) key\\n      ENTER: 13, // KeyboardEvent.which value for Enter key\\n      SPACE: 32, // KeyboardEvent.which value for space key\\n      TAB: 9, // KeyboardEvent.which value for tab key\\n      ARROW_UP: 38, // KeyboardEvent.which value for up arrow key\\n      ARROW_DOWN: 40 // KeyboardEvent.which value for down arrow key\\n    };\\n\\n    var version = {};\\n    version.full = ($.fn.dropdown.Constructor.VERSION || '').split(' ')[0].split('.');\\n    version.major = version.full[0];\\n\\n    var classNames = {\\n      DISABLED: 'disabled',\\n      DIVIDER: version.major === '4' ? 'dropdown-divider' : 'divider',\\n      SHOW: version.major === '4' ? 'show' : 'open',\\n      DROPUP: 'dropup',\\n      MENURIGHT: 'dropdown-menu-right',\\n      MENULEFT: 'dropdown-menu-left',\\n      // to-do: replace with more advanced template/customization options\\n      BUTTONCLASS: version.major === '4' ? 'btn-light' : 'btn-default'\\n    };\\n\\n    var REGEXP_ARROW = new RegExp(keyCodes.ARROW_UP + '|' + keyCodes.ARROW_DOWN);\\n    var REGEXP_TAB_OR_ESCAPE = new RegExp('^' + keyCodes.TAB + '$|' + keyCodes.ESCAPE);\\n    var REGEXP_ENTER_OR_SPACE = new RegExp(keyCodes.ENTER + '|' + keyCodes.SPACE);\\n\\n    var Selectpicker = function Selectpicker(element, options) {\\n      var that = this;\\n\\n      // bootstrap-select has been initialized - revert valHooks.select.set back to its original function\\n      if (!valHooks.useDefault) {\\n        $.valHooks.select.set = valHooks._set;\\n        valHooks.useDefault = true;\\n      }\\n\\n      this.$element = $(element);\\n      this.$newElement = null;\\n      this.$button = null;\\n      this.$menu = null;\\n      this.options = options;\\n      this.selectpicker = {\\n        main: {\\n          // store originalIndex (key) and newIndex (value) in this.selectpicker.main.map.newIndex for fast accessibility\\n          // allows us to do this.main.elements[this.selectpicker.main.map.newIndex[index]] to select an element based on the originalIndex\\n          map: {\\n            newIndex: {},\\n            originalIndex: {}\\n          }\\n        },\\n        current: {\\n          map: {}\\n        }, // current changes if a search is in progress\\n        search: {\\n          map: {}\\n        },\\n        view: {},\\n        keydown: {\\n          keyHistory: '',\\n          resetKeyHistory: {\\n            start: function start() {\\n              return setTimeout(function () {\\n                that.selectpicker.keydown.keyHistory = '';\\n              }, 800);\\n            }\\n          }\\n        }\\n      };\\n      // If we have no title yet, try to pull it from the html title attribute (jQuery doesnt' pick it up as it's not a\\n      // data-attribute)\\n      if (this.options.title === null) {\\n        this.options.title = this.$element.attr('title');\\n      }\\n\\n      // Format window padding\\n      var winPad = this.options.windowPadding;\\n      if (typeof winPad === 'number') {\\n        this.options.windowPadding = [winPad, winPad, winPad, winPad];\\n      }\\n\\n      //Expose public methods\\n      this.val = Selectpicker.prototype.val;\\n      this.render = Selectpicker.prototype.render;\\n      this.refresh = Selectpicker.prototype.refresh;\\n      this.setStyle = Selectpicker.prototype.setStyle;\\n      this.selectAll = Selectpicker.prototype.selectAll;\\n      this.deselectAll = Selectpicker.prototype.deselectAll;\\n      this.destroy = Selectpicker.prototype.destroy;\\n      this.remove = Selectpicker.prototype.remove;\\n      this.show = Selectpicker.prototype.show;\\n      this.hide = Selectpicker.prototype.hide;\\n\\n      this.init();\\n    };\\n\\n    Selectpicker.VERSION = '1.13.0-beta';\\n\\n    // part of this is duplicated in i18n/defaults-en_US.js. Make sure to update both.\\n    Selectpicker.DEFAULTS = {\\n      noneSelectedText: 'Nothing selected',\\n      noneResultsText: 'No results matched {0}',\\n      countSelectedText: function countSelectedText(numSelected, numTotal) {\\n        return numSelected == 1 ? \\\"{0} item selected\\\" : \\\"{0} items selected\\\";\\n      },\\n      maxOptionsText: function maxOptionsText(numAll, numGroup) {\\n        return [numAll == 1 ? 'Limit reached ({n} item max)' : 'Limit reached ({n} items max)', numGroup == 1 ? 'Group limit reached ({n} item max)' : 'Group limit reached ({n} items max)'];\\n      },\\n      selectAllText: 'Select All',\\n      deselectAllText: 'Deselect All',\\n      doneButton: false,\\n      doneButtonText: 'Close',\\n      multipleSeparator: ', ',\\n      styleBase: 'btn',\\n      style: 'btn-default',\\n      size: 'auto',\\n      title: null,\\n      selectedTextFormat: 'values',\\n      width: false,\\n      container: false,\\n      hideDisabled: false,\\n      showSubtext: false,\\n      showIcon: true,\\n      showContent: true,\\n      dropupAuto: true,\\n      header: false,\\n      liveSearch: false,\\n      liveSearchPlaceholder: null,\\n      liveSearchNormalize: false,\\n      liveSearchStyle: 'contains',\\n      actionsBox: false,\\n      iconBase: 'glyphicon',\\n      tickIcon: 'glyphicon-ok',\\n      showTick: false,\\n      template: {\\n        caret: '<span class=\\\"caret\\\"></span>'\\n      },\\n      maxOptions: false,\\n      mobile: false,\\n      selectOnTab: false,\\n      dropdownAlignRight: false,\\n      windowPadding: 0,\\n      virtualScroll: 600\\n    };\\n\\n    if (version.major === '4') {\\n      Selectpicker.DEFAULTS.style = 'btn-light';\\n      Selectpicker.DEFAULTS.iconBase = '';\\n      Selectpicker.DEFAULTS.tickIcon = 'bs-ok-default';\\n    }\\n\\n    Selectpicker.prototype = {\\n\\n      constructor: Selectpicker,\\n\\n      init: function init() {\\n        var that = this,\\n            id = this.$element.attr('id');\\n\\n        this.$element.addClass('bs-select-hidden');\\n\\n        this.multiple = this.$element.prop('multiple');\\n        this.autofocus = this.$element.prop('autofocus');\\n        this.$newElement = this.createDropdown();\\n        this.createLi();\\n        this.$element.after(this.$newElement).prependTo(this.$newElement);\\n        this.$button = this.$newElement.children('button');\\n        this.$menu = this.$newElement.children('.dropdown-menu');\\n        this.$menuInner = this.$menu.children('.inner');\\n        this.$searchbox = this.$menu.find('input');\\n\\n        this.$element.removeClass('bs-select-hidden');\\n\\n        if (this.options.dropdownAlignRight === true) this.$menu.addClass(classNames.MENURIGHT);\\n\\n        if (typeof id !== 'undefined') {\\n          this.$button.attr('data-id', id);\\n        }\\n\\n        this.checkDisabled();\\n        this.clickListener();\\n        if (this.options.liveSearch) this.liveSearchListener();\\n        this.render();\\n        this.setStyle();\\n        this.setWidth();\\n        if (this.options.container) {\\n          this.selectPosition();\\n        } else {\\n          this.$element.on('hide.bs.select', function () {\\n            if (that.isVirtual()) {\\n              // empty menu on close\\n              var menuInner = that.$menuInner[0],\\n                  emptyMenu = menuInner.firstChild.cloneNode(false);\\n\\n              // replace the existing UL with an empty one - this is faster than $.empty() or innerHTML = ''\\n              menuInner.replaceChild(emptyMenu, menuInner.firstChild);\\n              menuInner.scrollTop = 0;\\n            }\\n          });\\n        }\\n        this.$menu.data('this', this);\\n        this.$newElement.data('this', this);\\n        if (this.options.mobile) this.mobile();\\n\\n        this.$newElement.on({\\n          'hide.bs.dropdown': function hideBsDropdown(e) {\\n            that.$menuInner.attr('aria-expanded', false);\\n            that.$element.trigger('hide.bs.select', e);\\n          },\\n          'hidden.bs.dropdown': function hiddenBsDropdown(e) {\\n            that.$element.trigger('hidden.bs.select', e);\\n          },\\n          'show.bs.dropdown': function showBsDropdown(e) {\\n            that.$menuInner.attr('aria-expanded', true);\\n            that.$element.trigger('show.bs.select', e);\\n          },\\n          'shown.bs.dropdown': function shownBsDropdown(e) {\\n            that.$element.trigger('shown.bs.select', e);\\n          }\\n        });\\n\\n        if (that.$element[0].hasAttribute('required')) {\\n          this.$element.on('invalid', function () {\\n            that.$button.addClass('bs-invalid');\\n\\n            that.$element.on({\\n              'shown.bs.select': function shownBsSelect() {\\n                that.$element.val(that.$element.val()) // set the value to hide the validation message in Chrome when menu is opened\\n                .off('shown.bs.select');\\n              },\\n              'rendered.bs.select': function renderedBsSelect() {\\n                // if select is no longer invalid, remove the bs-invalid class\\n                if (this.validity.valid) that.$button.removeClass('bs-invalid');\\n                that.$element.off('rendered.bs.select');\\n              }\\n            });\\n\\n            that.$button.on('blur.bs.select', function () {\\n              that.$element.focus().blur();\\n              that.$button.off('blur.bs.select');\\n            });\\n          });\\n        }\\n\\n        setTimeout(function () {\\n          that.$element.trigger('loaded.bs.select');\\n        });\\n      },\\n\\n      createDropdown: function createDropdown() {\\n        // Options\\n        // If we are multiple or showTick option is set, then add the show-tick class\\n        var showTick = this.multiple || this.options.showTick ? ' show-tick' : '',\\n            inputGroup = this.$element.parent().hasClass('input-group') ? ' input-group-btn' : '',\\n            autofocus = this.autofocus ? ' autofocus' : '';\\n        // Elements\\n        var header = this.options.header ? '<div class=\\\"popover-title\\\"><button type=\\\"button\\\" class=\\\"close\\\" aria-hidden=\\\"true\\\">&times;</button>' + this.options.header + '</div>' : '';\\n        var searchbox = this.options.liveSearch ? '<div class=\\\"bs-searchbox\\\">' + '<input type=\\\"text\\\" class=\\\"form-control\\\" autocomplete=\\\"off\\\"' + (null === this.options.liveSearchPlaceholder ? '' : ' placeholder=\\\"' + htmlEscape(this.options.liveSearchPlaceholder) + '\\\"') + ' role=\\\"textbox\\\" aria-label=\\\"Search\\\">' + '</div>' : '';\\n        var actionsbox = this.multiple && this.options.actionsBox ? '<div class=\\\"bs-actionsbox\\\">' + '<div class=\\\"btn-group btn-group-sm btn-block\\\">' + '<button type=\\\"button\\\" class=\\\"actions-btn bs-select-all btn ' + classNames.BUTTONCLASS + '\\\">' + this.options.selectAllText + '</button>' + '<button type=\\\"button\\\" class=\\\"actions-btn bs-deselect-all btn ' + classNames.BUTTONCLASS + '\\\">' + this.options.deselectAllText + '</button>' + '</div>' + '</div>' : '';\\n        var donebutton = this.multiple && this.options.doneButton ? '<div class=\\\"bs-donebutton\\\">' + '<div class=\\\"btn-group btn-block\\\">' + '<button type=\\\"button\\\" class=\\\"btn btn-sm ' + classNames.BUTTONCLASS + '\\\">' + this.options.doneButtonText + '</button>' + '</div>' + '</div>' : '';\\n        var drop = '<div class=\\\"dropdown bootstrap-select' + showTick + inputGroup + '\\\">' + '<button type=\\\"button\\\" class=\\\"' + this.options.styleBase + ' dropdown-toggle\\\" data-toggle=\\\"dropdown\\\"' + autofocus + ' role=\\\"button\\\">' + '<div class=\\\"filter-option\\\">' + '<div class=\\\"filter-option-inner\\\"></div>' + '</div>&nbsp;' + '<span class=\\\"bs-caret\\\">' + this.options.template.caret + '</span>' + '</button>' + '<div class=\\\"dropdown-menu ' + (version.major === '4' ? '' : classNames.SHOW) + '\\\" role=\\\"combobox\\\">' + header + searchbox + actionsbox + '<div class=\\\"inner ' + classNames.SHOW + '\\\" role=\\\"listbox\\\" aria-expanded=\\\"false\\\" tabindex=\\\"-1\\\">' + '<ul class=\\\"dropdown-menu inner ' + (version.major === '4' ? classNames.SHOW : '') + '\\\">' + '</ul>' + '</div>' + donebutton + '</div>' + '</div>';\\n\\n        return $(drop);\\n      },\\n\\n      setPositionData: function setPositionData() {\\n        this.selectpicker.view.canHighlight = [];\\n\\n        for (var i = 0; i < this.selectpicker.current.data.length; i++) {\\n          var li = this.selectpicker.current.data[i],\\n              canHighlight = true;\\n\\n          if (li.type === 'divider') {\\n            canHighlight = false;\\n            li.height = this.sizeInfo.dividerHeight;\\n          } else if (li.type === 'optgroup-label') {\\n            canHighlight = false;\\n            li.height = this.sizeInfo.dropdownHeaderHeight;\\n          } else {\\n            li.height = this.sizeInfo.liHeight;\\n          }\\n\\n          if (li.disabled) canHighlight = false;\\n\\n          this.selectpicker.view.canHighlight.push(canHighlight);\\n\\n          li.position = (i === 0 ? 0 : this.selectpicker.current.data[i - 1].position) + li.height;\\n        }\\n      },\\n\\n      isVirtual: function isVirtual() {\\n        return this.options.virtualScroll !== false && this.selectpicker.main.elements.length >= this.options.virtualScroll || this.options.virtualScroll === true;\\n      },\\n\\n      createView: function createView(isSearching, scrollTop) {\\n        scrollTop = scrollTop || 0;\\n\\n        var that = this;\\n\\n        this.selectpicker.current = isSearching ? this.selectpicker.search : this.selectpicker.main;\\n\\n        var $lis;\\n        var active = [];\\n        var selected;\\n        var prevActive;\\n        var activeIndex;\\n        var prevActiveIndex;\\n\\n        this.setPositionData();\\n\\n        scroll(scrollTop, true);\\n\\n        this.$menuInner.off('scroll.createView').on('scroll.createView', function (e, updateValue) {\\n          if (!that.noScroll) scroll(this.scrollTop, updateValue);\\n          that.noScroll = false;\\n        });\\n\\n        function scroll(scrollTop, init) {\\n          var size = that.selectpicker.current.elements.length,\\n              chunks = [],\\n              chunkSize,\\n              chunkCount,\\n              firstChunk,\\n              lastChunk,\\n              currentChunk = undefined,\\n              prevPositions,\\n              positionIsDifferent,\\n              previousElements,\\n              menuIsDifferent = true,\\n              isVirtual = that.isVirtual();\\n\\n          that.selectpicker.view.scrollTop = scrollTop;\\n\\n          if (isVirtual === true) {\\n            // if an option that is encountered that is wider than the current menu width, update the menu width accordingly\\n            if (that.sizeInfo.hasScrollBar && that.$menu[0].offsetWidth > that.sizeInfo.totalMenuWidth) {\\n              that.sizeInfo.menuWidth = that.$menu[0].offsetWidth;\\n              that.sizeInfo.totalMenuWidth = that.sizeInfo.menuWidth + that.sizeInfo.scrollBarWidth;\\n              that.$menu.css('min-width', that.sizeInfo.menuWidth);\\n            }\\n          }\\n\\n          chunkSize = Math.ceil(that.sizeInfo.menuInnerHeight / that.sizeInfo.liHeight * 1.5); // number of options in a chunk\\n          chunkCount = Math.round(size / chunkSize) || 1; // number of chunks\\n\\n          for (var i = 0; i < chunkCount; i++) {\\n            var end_of_chunk = (i + 1) * chunkSize;\\n\\n            if (i === chunkCount - 1) {\\n              end_of_chunk = size;\\n            }\\n\\n            chunks[i] = [i * chunkSize + (!i ? 0 : 1), end_of_chunk];\\n\\n            if (!size) break;\\n\\n            if (currentChunk === undefined && scrollTop <= that.selectpicker.current.data[end_of_chunk - 1].position - that.sizeInfo.menuInnerHeight) {\\n              currentChunk = i;\\n            }\\n          }\\n\\n          if (currentChunk === undefined) currentChunk = 0;\\n\\n          prevPositions = [that.selectpicker.view.position0, that.selectpicker.view.position1];\\n\\n          // always display previous, current, and next chunks\\n          firstChunk = Math.max(0, currentChunk - 1);\\n          lastChunk = Math.min(chunkCount - 1, currentChunk + 1);\\n\\n          that.selectpicker.view.position0 = Math.max(0, chunks[firstChunk][0]) || 0;\\n          that.selectpicker.view.position1 = Math.min(size, chunks[lastChunk][1]) || 0;\\n\\n          positionIsDifferent = prevPositions[0] !== that.selectpicker.view.position0 || prevPositions[1] !== that.selectpicker.view.position1;\\n\\n          if (that.activeIndex !== undefined) {\\n            prevActive = that.selectpicker.current.elements[that.selectpicker.current.map.newIndex[that.prevActiveIndex]];\\n            active = that.selectpicker.current.elements[that.selectpicker.current.map.newIndex[that.activeIndex]];\\n            selected = that.selectpicker.current.elements[that.selectpicker.current.map.newIndex[that.selectedIndex]];\\n\\n            if (init) {\\n              if (that.activeIndex !== that.selectedIndex) {\\n                active.classList.remove('active');\\n                if (active.firstChild) active.firstChild.classList.remove('active');\\n              }\\n              that.activeIndex = undefined;\\n            }\\n\\n            if (that.activeIndex && that.activeIndex !== that.selectedIndex && selected && selected.length) {\\n              selected.classList.remove('active');\\n              if (selected.firstChild) selected.firstChild.classList.remove('active');\\n            }\\n          }\\n\\n          if (that.prevActiveIndex !== undefined && that.prevActiveIndex !== that.activeIndex && that.prevActiveIndex !== that.selectedIndex && prevActive && prevActive.length) {\\n            prevActive.classList.remove('active');\\n            if (prevActive.firstChild) prevActive.firstChild.classList.remove('active');\\n          }\\n\\n          if (init || positionIsDifferent) {\\n            previousElements = that.selectpicker.view.visibleElements ? that.selectpicker.view.visibleElements.slice() : [];\\n\\n            that.selectpicker.view.visibleElements = that.selectpicker.current.elements.slice(that.selectpicker.view.position0, that.selectpicker.view.position1);\\n\\n            that.setOptionStatus();\\n\\n            // if searching, check to make sure the list has actually been updated before updating DOM\\n            // this prevents unnecessary repaints\\n            if (isSearching || isVirtual === false && init) menuIsDifferent = !isEqual(previousElements, that.selectpicker.view.visibleElements);\\n\\n            // if virtual scroll is disabled and not searching,\\n            // menu should never need to be updated more than once\\n            if ((init || isVirtual === true) && menuIsDifferent) {\\n              var menuInner = that.$menuInner[0],\\n                  menuFragment = document.createDocumentFragment(),\\n                  emptyMenu = menuInner.firstChild.cloneNode(false),\\n                  marginTop,\\n                  marginBottom,\\n                  elements = isVirtual === true ? that.selectpicker.view.visibleElements : that.selectpicker.current.elements;\\n\\n              // replace the existing UL with an empty one - this is faster than $.empty()\\n              menuInner.replaceChild(emptyMenu, menuInner.firstChild);\\n\\n              for (var i = 0, visibleElementsLen = elements.length; i < visibleElementsLen; i++) {\\n                menuFragment.appendChild(elements[i]);\\n              }\\n\\n              if (isVirtual === true) {\\n                marginTop = that.selectpicker.view.position0 === 0 ? 0 : that.selectpicker.current.data[that.selectpicker.view.position0 - 1].position, marginBottom = that.selectpicker.view.position1 > size - 1 ? 0 : that.selectpicker.current.data[size - 1].position - that.selectpicker.current.data[that.selectpicker.view.position1 - 1].position;\\n\\n                menuInner.firstChild.style.marginTop = marginTop + 'px';\\n                menuInner.firstChild.style.marginBottom = marginBottom + 'px';\\n              }\\n\\n              menuInner.firstChild.appendChild(menuFragment);\\n            }\\n          }\\n\\n          that.prevActiveIndex = that.activeIndex;\\n\\n          if (!that.options.liveSearch) {\\n            that.$menuInner.focus();\\n          } else if (isSearching && init) {\\n            var index = 0,\\n                newActive;\\n\\n            if (!that.selectpicker.view.canHighlight[index]) {\\n              index = 1 + that.selectpicker.view.canHighlight.slice(1).indexOf(true);\\n            }\\n\\n            newActive = that.selectpicker.view.visibleElements[index];\\n\\n            if (that.selectpicker.view.currentActive) {\\n              that.selectpicker.view.currentActive.classList.remove('active');\\n              if (that.selectpicker.view.currentActive.firstChild) that.selectpicker.view.currentActive.firstChild.classList.remove('active');\\n            }\\n\\n            if (newActive) {\\n              newActive.classList.add('active');\\n              if (newActive.firstChild) newActive.firstChild.classList.add('active');\\n            }\\n\\n            that.activeIndex = that.selectpicker.current.map.originalIndex[index];\\n          }\\n        }\\n\\n        $(window).off('resize.createView').on('resize.createView', function () {\\n          scroll(that.$menuInner[0].scrollTop);\\n        });\\n      },\\n\\n      createLi: function createLi() {\\n        var that = this,\\n            mainElements = [],\\n            widestOption,\\n            availableOptionsCount = 0,\\n            widestOptionLength = 0,\\n            mainData = [],\\n            optID = 0,\\n            headerIndex = 0,\\n            liIndex = -1; // increment liIndex whenever a new <li> element is created to ensure newIndex is correct\\n\\n        if (!this.selectpicker.view.titleOption) this.selectpicker.view.titleOption = document.createElement('option');\\n\\n        var elementTemplates = {\\n          span: document.createElement('span'),\\n          subtext: document.createElement('small'),\\n          a: document.createElement('a'),\\n          li: document.createElement('li'),\\n          whitespace: document.createTextNode('\\\\xA0')\\n        },\\n            checkMark = elementTemplates.span.cloneNode(false),\\n            fragment = document.createDocumentFragment();\\n\\n        checkMark.className = that.options.iconBase + ' ' + that.options.tickIcon + ' check-mark';\\n        elementTemplates.a.appendChild(checkMark);\\n        elementTemplates.a.setAttribute('role', 'option');\\n\\n        elementTemplates.subtext.className = 'text-muted';\\n\\n        elementTemplates.text = elementTemplates.span.cloneNode(false);\\n        elementTemplates.text.className = 'text';\\n\\n        // Helper functions\\n        /**\\r\\n         * @param content\\r\\n         * @param [index]\\r\\n         * @param [classes]\\r\\n         * @param [optgroup]\\r\\n         * @returns {HTMLElement}\\r\\n         */\\n        var generateLI = function generateLI(content, index, classes, optgroup) {\\n          var li = elementTemplates.li.cloneNode(false);\\n\\n          if (content) {\\n            if (content.nodeType === 1 || content.nodeType === 11) {\\n              li.appendChild(content);\\n            } else {\\n              li.innerHTML = content;\\n            }\\n          }\\n\\n          if (typeof classes !== 'undefined' && '' !== classes) li.className = classes;\\n          if (typeof optgroup !== 'undefined' && null !== optgroup) li.classList.add('optgroup-' + optgroup);\\n\\n          return li;\\n        };\\n\\n        /**\\r\\n         * @param text\\r\\n         * @param [classes]\\r\\n         * @param [inline]\\r\\n         * @returns {string}\\r\\n         */\\n        var generateA = function generateA(text, classes, inline) {\\n          var a = elementTemplates.a.cloneNode(true);\\n\\n          if (text) {\\n            if (text.nodeType === 11) {\\n              a.appendChild(text);\\n            } else {\\n              a.insertAdjacentHTML('beforeend', text);\\n            }\\n          }\\n\\n          if (typeof classes !== 'undefined' & '' !== classes) a.className = classes;\\n          if (version.major === '4') a.classList.add('dropdown-item');\\n          if (inline) a.setAttribute('style', inline);\\n\\n          return a;\\n        };\\n\\n        var generateText = function generateText(options) {\\n          var textElement = elementTemplates.text.cloneNode(false),\\n              optionSubtextElement,\\n              optionIconElement;\\n\\n          if (options.optionContent) {\\n            textElement.innerHTML = options.optionContent;\\n          } else {\\n            textElement.textContent = options.text;\\n\\n            if (options.optionIcon) {\\n              var whitespace = elementTemplates.whitespace.cloneNode(false);\\n\\n              optionIconElement = elementTemplates.span.cloneNode(false);\\n              optionIconElement.className = that.options.iconBase + ' ' + options.optionIcon;\\n\\n              fragment.appendChild(optionIconElement);\\n              fragment.appendChild(whitespace);\\n            }\\n\\n            if (options.optionSubtext) {\\n              optionSubtextElement = elementTemplates.subtext.cloneNode(false);\\n              optionSubtextElement.textContent = options.optionSubtext;\\n              textElement.appendChild(optionSubtextElement);\\n            }\\n          }\\n\\n          fragment.appendChild(textElement);\\n\\n          return fragment;\\n        };\\n\\n        var generateLabel = function generateLabel(options) {\\n          var labelTextElement = elementTemplates.text.cloneNode(false),\\n              labelSubtextElement,\\n              labelIconElement;\\n\\n          labelTextElement.textContent = options.labelEscaped;\\n\\n          if (options.labelIcon) {\\n            var whitespace = elementTemplates.whitespace.cloneNode(false);\\n\\n            labelIconElement = elementTemplates.span.cloneNode(false);\\n            labelIconElement.className = that.options.iconBase + ' ' + options.labelIcon;\\n\\n            fragment.appendChild(labelIconElement);\\n            fragment.appendChild(whitespace);\\n          }\\n\\n          if (options.labelSubtext) {\\n            labelSubtextElement = elementTemplates.subtext.cloneNode(false);\\n            labelSubtextElement.textContent = options.labelSubtext;\\n            labelTextElement.appendChild(labelSubtextElement);\\n          }\\n\\n          fragment.appendChild(labelTextElement);\\n\\n          return fragment;\\n        };\\n\\n        if (this.options.title && !this.multiple) {\\n          // this option doesn't create a new <li> element, but does add a new option, so liIndex is decreased\\n          // since newIndex is recalculated on every refresh, liIndex needs to be decreased even if the titleOption is already appended\\n          liIndex--;\\n\\n          var element = this.$element[0],\\n              isSelected = false;\\n\\n          if (!this.selectpicker.view.titleOption.parentNode) {\\n            // Use native JS to prepend option (faster)\\n            this.selectpicker.view.titleOption.className = 'bs-title-option';\\n            this.selectpicker.view.titleOption.innerHTML = this.options.title;\\n            this.selectpicker.view.titleOption.value = '';\\n\\n            // Check if selected or data-selected attribute is already set on an option. If not, select the titleOption option.\\n            // the selected item may have been changed by user or programmatically before the bootstrap select plugin runs,\\n            // if so, the select will have the data-selected attribute\\n            var $opt = $(element.options[element.selectedIndex]);\\n            isSelected = $opt.attr('selected') === undefined && this.$element.data('selected') === undefined;\\n          }\\n\\n          element.insertBefore(this.selectpicker.view.titleOption, element.firstChild);\\n\\n          // Set selected *after* appending to select,\\n          // otherwise the option doesn't get selected in IE\\n          // set using selectedIndex, as setting the selected attr to true here doesn't work in IE11\\n          if (isSelected) element.selectedIndex = 0;\\n        }\\n\\n        var $selectOptions = this.$element.find('option');\\n\\n        $selectOptions.each(function (index) {\\n          var $this = $(this);\\n\\n          liIndex++;\\n\\n          if ($this.hasClass('bs-title-option')) return;\\n\\n          var thisData = $this.data();\\n\\n          // Get the class and text for the option\\n          var optionClass = this.className || '',\\n              inline = htmlEscape(this.style.cssText),\\n              optionContent = thisData.content,\\n              text = this.textContent,\\n              tokens = thisData.tokens,\\n              subtext = thisData.subtext,\\n              icon = thisData.icon,\\n              $parent = $this.parent(),\\n              parent = $parent[0],\\n              isOptgroup = parent.tagName === 'OPTGROUP',\\n              isOptgroupDisabled = isOptgroup && parent.disabled,\\n              isDisabled = this.disabled || isOptgroupDisabled,\\n              prevHiddenIndex,\\n              showDivider = this.previousElementSibling && this.previousElementSibling.tagName === 'OPTGROUP',\\n              textElement;\\n\\n          var parentData = $parent.data();\\n\\n          if (thisData.hidden === true || that.options.hideDisabled && (isDisabled && !isOptgroup || isOptgroupDisabled)) {\\n            // set prevHiddenIndex - the index of the first hidden option in a group of hidden options\\n            // used to determine whether or not a divider should be placed after an optgroup if there are\\n            // hidden options between the optgroup and the first visible option\\n            prevHiddenIndex = thisData.prevHiddenIndex;\\n            $this.next().data('prevHiddenIndex', prevHiddenIndex !== undefined ? prevHiddenIndex : index);\\n\\n            liIndex--;\\n\\n            // if previous element is not an optgroup\\n            if (!showDivider) {\\n              if (prevHiddenIndex !== undefined) {\\n                // select the element **before** the first hidden element in the group\\n                var prevHidden = $selectOptions[prevHiddenIndex].previousElementSibling;\\n\\n                if (prevHidden && prevHidden.tagName === 'OPTGROUP' && !prevHidden.disabled) {\\n                  showDivider = true;\\n                }\\n              }\\n            }\\n\\n            if (showDivider && mainData[mainData.length - 1].type !== 'divider') {\\n              liIndex++;\\n              mainElements.push(generateLI(false, null, classNames.DIVIDER, optID + 'div'));\\n              mainData.push({\\n                type: 'divider',\\n                optID: optID,\\n                originalIndex: index\\n              });\\n            }\\n\\n            return;\\n          }\\n\\n          if (isOptgroup && thisData.divider !== true) {\\n            if (that.options.hideDisabled && isDisabled) {\\n              if (parentData.allOptionsDisabled === undefined) {\\n                var $options = $parent.children();\\n                $parent.data('allOptionsDisabled', $options.filter(':disabled').length === $options.length);\\n              }\\n\\n              if ($parent.data('allOptionsDisabled')) {\\n                liIndex--;\\n                return;\\n              }\\n            }\\n\\n            var optGroupClass = ' ' + parent.className || '';\\n\\n            if (!this.previousElementSibling) {\\n              // Is it the first option of the optgroup?\\n              optID += 1;\\n\\n              // Get the opt group label\\n              var label = parent.label,\\n                  labelEscaped = htmlEscape(label),\\n                  labelSubtext = parentData.subtext,\\n                  labelIcon = parentData.icon;\\n\\n              if (index !== 0 && mainElements.length > 0) {\\n                // Is it NOT the first option of the select && are there elements in the dropdown?\\n                liIndex++;\\n                mainElements.push(generateLI(false, null, classNames.DIVIDER, optID + 'div'));\\n                mainData.push({\\n                  type: 'divider',\\n                  optID: optID,\\n                  originalIndex: index\\n                });\\n              }\\n              liIndex++;\\n\\n              var labelElement = generateLabel({\\n                labelEscaped: labelEscaped,\\n                labelSubtext: labelSubtext,\\n                labelIcon: labelIcon\\n              });\\n\\n              mainElements.push(generateLI(labelElement, null, 'dropdown-header' + optGroupClass, optID));\\n              mainData.push({\\n                content: labelEscaped,\\n                subtext: labelSubtext,\\n                type: 'optgroup-label',\\n                optID: optID,\\n                originalIndex: index\\n              });\\n\\n              headerIndex = liIndex - 1;\\n            }\\n\\n            if (that.options.hideDisabled && isDisabled || thisData.hidden === true) {\\n              liIndex--;\\n              return;\\n            }\\n\\n            textElement = generateText({\\n              text: text,\\n              optionContent: optionContent,\\n              optionSubtext: subtext,\\n              optionIcon: icon\\n            });\\n\\n            mainElements.push(generateLI(generateA(textElement, 'opt ' + optionClass + optGroupClass, inline), index, '', optID));\\n            mainData.push({\\n              content: text,\\n              subtext: subtext,\\n              tokens: tokens,\\n              type: 'option',\\n              optID: optID,\\n              headerIndex: headerIndex,\\n              lastIndex: headerIndex + parent.childElementCount,\\n              originalIndex: index\\n            });\\n\\n            availableOptionsCount++;\\n          } else if (thisData.divider === true) {\\n            mainElements.push(generateLI(false, index, 'divider'));\\n            mainData.push({\\n              type: 'divider',\\n              originalIndex: index\\n            });\\n          } else {\\n            // if previous element is not an optgroup and hideDisabled is true\\n            if (!showDivider && that.options.hideDisabled) {\\n              prevHiddenIndex = thisData.prevHiddenIndex;\\n\\n              if (prevHiddenIndex !== undefined) {\\n                // select the element **before** the first hidden element in the group\\n                var prevHidden = $selectOptions[prevHiddenIndex].previousElementSibling;\\n\\n                if (prevHidden && prevHidden.tagName === 'OPTGROUP' && !prevHidden.disabled) {\\n                  showDivider = true;\\n                }\\n              }\\n            }\\n\\n            if (showDivider && mainData[mainData.length - 1].type !== 'divider') {\\n              liIndex++;\\n              mainElements.push(generateLI(false, null, classNames.DIVIDER, optID + 'div'));\\n              mainData.push({\\n                type: 'divider',\\n                optID: optID,\\n                originalIndex: index\\n              });\\n            }\\n\\n            textElement = generateText({\\n              text: text,\\n              optionContent: optionContent,\\n              optionSubtext: subtext,\\n              optionIcon: icon\\n            });\\n\\n            mainElements.push(generateLI(generateA(textElement, optionClass, inline), index));\\n            mainData.push({\\n              content: text,\\n              subtext: subtext,\\n              tokens: tokens,\\n              type: 'option',\\n              originalIndex: index\\n            });\\n\\n            availableOptionsCount++;\\n          }\\n\\n          that.selectpicker.main.map.newIndex[index] = liIndex;\\n          that.selectpicker.main.map.originalIndex[liIndex] = index;\\n\\n          // get the most recent option info added to mainData\\n          var _mainDataLast = mainData[mainData.length - 1];\\n\\n          _mainDataLast.disabled = isDisabled;\\n\\n          var combinedLength = 0;\\n\\n          // count the number of characters in the option - not perfect, but should work in most cases\\n          if (_mainDataLast.content) combinedLength += _mainDataLast.content.length;\\n          if (_mainDataLast.subtext) combinedLength += _mainDataLast.subtext.length;\\n          // if there is an icon, ensure this option's width is checked\\n          if (icon) combinedLength += 1;\\n\\n          if (combinedLength > widestOptionLength) {\\n            widestOptionLength = combinedLength;\\n\\n            // guess which option is the widest\\n            // use this when calculating menu width\\n            // not perfect, but it's fast, and the width will be updating accordingly when scrolling\\n            widestOption = mainElements[mainElements.length - 1];\\n          }\\n        });\\n\\n        this.selectpicker.main.elements = mainElements;\\n        this.selectpicker.main.data = mainData;\\n\\n        this.selectpicker.current = this.selectpicker.main;\\n\\n        this.selectpicker.view.widestOption = widestOption;\\n        this.selectpicker.view.availableOptionsCount = availableOptionsCount; // faster way to get # of available options without filter\\n      },\\n\\n      findLis: function findLis() {\\n        return this.$menuInner.find('.inner > li');\\n      },\\n\\n      render: function render() {\\n        var that = this,\\n            $selectOptions = this.$element.find('option'),\\n            selectedItems = [],\\n            selectedItemsInTitle = [];\\n\\n        this.togglePlaceholder();\\n\\n        this.tabIndex();\\n\\n        $selectOptions.each(function (index) {\\n          if (this.selected) {\\n            selectedItems.push(this);\\n\\n            if (selectedItemsInTitle.length < 100 && that.options.selectedTextFormat !== 'count') {\\n              if (that.options.hideDisabled && (this.disabled || this.parentNode.tagName === 'OPTGROUP' && this.parentNode.disabled)) return;\\n\\n              var $this = $(this),\\n                  thisData = $this.data(),\\n                  icon = thisData.icon && that.options.showIcon ? '<i class=\\\"' + that.options.iconBase + ' ' + thisData.icon + '\\\"></i> ' : '',\\n                  subtext,\\n                  titleItem;\\n\\n              if (that.options.showSubtext && thisData.subtext && !that.multiple) {\\n                subtext = ' <small class=\\\"text-muted\\\">' + thisData.subtext + '</small>';\\n              } else {\\n                subtext = '';\\n              }\\n              if (typeof $this.attr('title') !== 'undefined') {\\n                titleItem = $this.attr('title');\\n              } else if (thisData.content && that.options.showContent) {\\n                titleItem = thisData.content.toString();\\n              } else {\\n                titleItem = icon + $this.html() + subtext;\\n              }\\n\\n              selectedItemsInTitle.push(titleItem);\\n            }\\n          }\\n        });\\n\\n        //Fixes issue in IE10 occurring when no default option is selected and at least one option is disabled\\n        //Convert all the values into a comma delimited string\\n        var title = !this.multiple ? selectedItemsInTitle[0] : selectedItemsInTitle.join(this.options.multipleSeparator);\\n\\n        // add ellipsis\\n        if (selectedItems.length > 100) title += '...';\\n\\n        //If this is multi select, and the selectText type is count, the show 1 of 2 selected etc..\\n        if (this.multiple && this.options.selectedTextFormat.indexOf('count') > -1) {\\n          var max = this.options.selectedTextFormat.split('>');\\n\\n          if (max.length > 1 && selectedItems.length > max[1] || max.length === 1 && selectedItems.length >= 2) {\\n            var totalCount = this.selectpicker.view.availableOptionsCount,\\n                tr8nText = typeof this.options.countSelectedText === 'function' ? this.options.countSelectedText(selectedItems.length, totalCount) : this.options.countSelectedText;\\n\\n            title = tr8nText.replace('{0}', selectedItems.length.toString()).replace('{1}', totalCount.toString());\\n          }\\n        }\\n\\n        if (this.options.title == undefined) {\\n          this.options.title = this.$element.attr('title');\\n        }\\n\\n        if (this.options.selectedTextFormat == 'static') {\\n          title = this.options.title;\\n        }\\n\\n        //If we dont have a title, then use the default, or if nothing is set at all, use the not selected text\\n        if (!title) {\\n          title = typeof this.options.title !== 'undefined' ? this.options.title : this.options.noneSelectedText;\\n        }\\n\\n        //strip all HTML tags and trim the result, then unescape any escaped tags\\n        this.$button.attr('title', htmlUnescape($.trim(title.replace(/<[^>]*>?/g, ''))));\\n        this.$button.find('.filter-option-inner').html(title);\\n\\n        this.$element.trigger('rendered.bs.select');\\n      },\\n\\n      /**\\r\\n       * @param [style]\\r\\n       * @param [status]\\r\\n       */\\n      setStyle: function setStyle(style, status) {\\n        if (this.$element.attr('class')) {\\n          this.$newElement.addClass(this.$element.attr('class').replace(/selectpicker|mobile-device|bs-select-hidden|validate\\\\[.*\\\\]/gi, ''));\\n        }\\n\\n        var buttonClass = style ? style : this.options.style;\\n\\n        if (status == 'add') {\\n          this.$button.addClass(buttonClass);\\n        } else if (status == 'remove') {\\n          this.$button.removeClass(buttonClass);\\n        } else {\\n          this.$button.removeClass(this.options.style);\\n          this.$button.addClass(buttonClass);\\n        }\\n      },\\n\\n      liHeight: function liHeight(refresh) {\\n        if (!refresh && (this.options.size === false || this.sizeInfo)) return;\\n\\n        if (!this.sizeInfo) this.sizeInfo = {};\\n\\n        var newElement = document.createElement('div'),\\n            menu = document.createElement('div'),\\n            menuInner = document.createElement('div'),\\n            menuInnerInner = document.createElement('ul'),\\n            divider = document.createElement('li'),\\n            dropdownHeader = document.createElement('li'),\\n            li = document.createElement('li'),\\n            a = document.createElement('a'),\\n            text = document.createElement('span'),\\n            header = this.options.header && this.$menu.find('.popover-title').length > 0 ? this.$menu.find('.popover-title')[0].cloneNode(true) : null,\\n            search = this.options.liveSearch ? document.createElement('div') : null,\\n            actions = this.options.actionsBox && this.multiple && this.$menu.find('.bs-actionsbox').length > 0 ? this.$menu.find('.bs-actionsbox')[0].cloneNode(true) : null,\\n            doneButton = this.options.doneButton && this.multiple && this.$menu.find('.bs-donebutton').length > 0 ? this.$menu.find('.bs-donebutton')[0].cloneNode(true) : null;\\n\\n        this.sizeInfo.selectWidth = this.$newElement[0].offsetWidth;\\n\\n        text.className = 'text';\\n        a.className = 'dropdown-item';\\n        newElement.className = this.$menu[0].parentNode.className + ' ' + classNames.SHOW;\\n        newElement.style.width = this.sizeInfo.selectWidth + 'px';\\n        menu.className = 'dropdown-menu ' + classNames.SHOW;\\n        menuInner.className = 'inner ' + classNames.SHOW;\\n        menuInnerInner.className = 'dropdown-menu inner ' + (version.major === '4' ? classNames.SHOW : '');\\n        divider.className = classNames.DIVIDER;\\n        dropdownHeader.className = 'dropdown-header';\\n\\n        text.appendChild(document.createTextNode('Inner text'));\\n        a.appendChild(text);\\n        li.appendChild(a);\\n        dropdownHeader.appendChild(text.cloneNode(true));\\n\\n        if (this.selectpicker.view.widestOption) {\\n          menuInnerInner.appendChild(this.selectpicker.view.widestOption.cloneNode(true));\\n        }\\n\\n        menuInnerInner.appendChild(li);\\n        menuInnerInner.appendChild(divider);\\n        menuInnerInner.appendChild(dropdownHeader);\\n        if (header) menu.appendChild(header);\\n        if (search) {\\n          var input = document.createElement('input');\\n          search.className = 'bs-searchbox';\\n          input.className = 'form-control';\\n          search.appendChild(input);\\n          menu.appendChild(search);\\n        }\\n        if (actions) menu.appendChild(actions);\\n        menuInner.appendChild(menuInnerInner);\\n        menu.appendChild(menuInner);\\n        if (doneButton) menu.appendChild(doneButton);\\n        newElement.appendChild(menu);\\n\\n        document.body.appendChild(newElement);\\n\\n        var liHeight = a.offsetHeight,\\n            dropdownHeaderHeight = dropdownHeader ? dropdownHeader.offsetHeight : 0,\\n            headerHeight = header ? header.offsetHeight : 0,\\n            searchHeight = search ? search.offsetHeight : 0,\\n            actionsHeight = actions ? actions.offsetHeight : 0,\\n            doneButtonHeight = doneButton ? doneButton.offsetHeight : 0,\\n            dividerHeight = $(divider).outerHeight(true),\\n\\n        // fall back to jQuery if getComputedStyle is not supported\\n        menuStyle = window.getComputedStyle ? window.getComputedStyle(menu) : false,\\n            menuWidth = menu.offsetWidth,\\n            $menu = menuStyle ? null : $(menu),\\n            menuPadding = {\\n          vert: toInteger(menuStyle ? menuStyle.paddingTop : $menu.css('paddingTop')) + toInteger(menuStyle ? menuStyle.paddingBottom : $menu.css('paddingBottom')) + toInteger(menuStyle ? menuStyle.borderTopWidth : $menu.css('borderTopWidth')) + toInteger(menuStyle ? menuStyle.borderBottomWidth : $menu.css('borderBottomWidth')),\\n          horiz: toInteger(menuStyle ? menuStyle.paddingLeft : $menu.css('paddingLeft')) + toInteger(menuStyle ? menuStyle.paddingRight : $menu.css('paddingRight')) + toInteger(menuStyle ? menuStyle.borderLeftWidth : $menu.css('borderLeftWidth')) + toInteger(menuStyle ? menuStyle.borderRightWidth : $menu.css('borderRightWidth'))\\n        },\\n            menuExtras = {\\n          vert: menuPadding.vert + toInteger(menuStyle ? menuStyle.marginTop : $menu.css('marginTop')) + toInteger(menuStyle ? menuStyle.marginBottom : $menu.css('marginBottom')) + 2,\\n          horiz: menuPadding.horiz + toInteger(menuStyle ? menuStyle.marginLeft : $menu.css('marginLeft')) + toInteger(menuStyle ? menuStyle.marginRight : $menu.css('marginRight')) + 2\\n        },\\n            scrollBarWidth;\\n\\n        menuInner.style.overflowY = 'scroll';\\n\\n        scrollBarWidth = menu.offsetWidth - menuWidth;\\n\\n        document.body.removeChild(newElement);\\n\\n        this.sizeInfo.liHeight = liHeight;\\n        this.sizeInfo.dropdownHeaderHeight = dropdownHeaderHeight;\\n        this.sizeInfo.headerHeight = headerHeight;\\n        this.sizeInfo.searchHeight = searchHeight;\\n        this.sizeInfo.actionsHeight = actionsHeight;\\n        this.sizeInfo.doneButtonHeight = doneButtonHeight;\\n        this.sizeInfo.dividerHeight = dividerHeight;\\n        this.sizeInfo.menuPadding = menuPadding;\\n        this.sizeInfo.menuExtras = menuExtras;\\n        this.sizeInfo.menuWidth = menuWidth;\\n        this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth;\\n        this.sizeInfo.scrollBarWidth = scrollBarWidth;\\n        this.sizeInfo.selectHeight = this.$newElement[0].offsetHeight;\\n\\n        this.setPositionData();\\n      },\\n\\n      getSelectPosition: function getSelectPosition() {\\n        var that = this,\\n            $window = $(window),\\n            pos = that.$newElement.offset(),\\n            $container = $(that.options.container),\\n            containerPos;\\n\\n        if (that.options.container && !$container.is('body')) {\\n          containerPos = $container.offset();\\n          containerPos.top += parseInt($container.css('borderTopWidth'));\\n          containerPos.left += parseInt($container.css('borderLeftWidth'));\\n        } else {\\n          containerPos = { top: 0, left: 0 };\\n        }\\n\\n        var winPad = that.options.windowPadding;\\n\\n        this.sizeInfo.selectOffsetTop = pos.top - containerPos.top - $window.scrollTop();\\n        this.sizeInfo.selectOffsetBot = $window.height() - this.sizeInfo.selectOffsetTop - this.sizeInfo['selectHeight'] - containerPos.top - winPad[2];\\n        this.sizeInfo.selectOffsetLeft = pos.left - containerPos.left - $window.scrollLeft();\\n        this.sizeInfo.selectOffsetRight = $window.width() - this.sizeInfo.selectOffsetLeft - this.sizeInfo['selectWidth'] - containerPos.left - winPad[1];\\n        this.sizeInfo.selectOffsetTop -= winPad[0];\\n        this.sizeInfo.selectOffsetLeft -= winPad[3];\\n      },\\n\\n      setMenuSize: function setMenuSize(isAuto) {\\n        this.getSelectPosition();\\n\\n        var selectWidth = this.sizeInfo['selectWidth'],\\n            liHeight = this.sizeInfo['liHeight'],\\n            headerHeight = this.sizeInfo['headerHeight'],\\n            searchHeight = this.sizeInfo['searchHeight'],\\n            actionsHeight = this.sizeInfo['actionsHeight'],\\n            doneButtonHeight = this.sizeInfo['doneButtonHeight'],\\n            divHeight = this.sizeInfo['dividerHeight'],\\n            menuPadding = this.sizeInfo['menuPadding'],\\n            menuInnerHeight,\\n            menuHeight,\\n            divLength = 0,\\n            minHeight,\\n            _minHeight,\\n            maxHeight,\\n            menuInnerMinHeight,\\n            estimate;\\n\\n        if (this.options.dropupAuto) {\\n          // Get the estimated height of the menu without scrollbars.\\n          // This is useful for smaller menus, where there might be plenty of room\\n          // below the button without setting dropup, but we can't know\\n          // the exact height of the menu until createView is called later\\n          estimate = liHeight * this.selectpicker.current.elements.length + menuPadding.vert;\\n          this.$newElement.toggleClass(classNames.DROPUP, this.sizeInfo.selectOffsetTop - this.sizeInfo.selectOffsetBot > this.sizeInfo.menuExtras.vert && estimate + this.sizeInfo.menuExtras.vert + 50 > this.sizeInfo.selectOffsetBot);\\n        }\\n\\n        if (this.options.size === 'auto') {\\n          _minHeight = this.selectpicker.current.elements.length > 3 ? this.sizeInfo.liHeight * 3 + this.sizeInfo.menuExtras.vert - 2 : 0;\\n          menuHeight = this.sizeInfo.selectOffsetBot - this.sizeInfo.menuExtras.vert;\\n          minHeight = _minHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight;\\n          menuInnerMinHeight = Math.max(_minHeight - menuPadding.vert, 0);\\n\\n          if (this.$newElement.hasClass(classNames.DROPUP)) {\\n            menuHeight = this.sizeInfo.selectOffsetTop - this.sizeInfo.menuExtras.vert;\\n          }\\n\\n          maxHeight = menuHeight;\\n          menuInnerHeight = menuHeight - headerHeight - searchHeight - actionsHeight - doneButtonHeight - menuPadding.vert;\\n        } else if (this.options.size && this.options.size != 'auto' && this.selectpicker.current.elements.length > this.options.size) {\\n          for (var i = 0; i < this.options.size; i++) {\\n            if (this.selectpicker.current.data[i].type === 'divider') divLength++;\\n          }\\n\\n          menuHeight = liHeight * this.options.size + divLength * divHeight + menuPadding.vert;\\n          menuInnerHeight = menuHeight - menuPadding.vert;\\n          maxHeight = menuHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight;\\n          minHeight = menuInnerMinHeight = '';\\n        }\\n\\n        if (this.options.dropdownAlignRight === 'auto') {\\n          this.$menu.toggleClass(classNames.MENURIGHT, this.sizeInfo.selectOffsetLeft > this.sizeInfo.selectOffsetRight && this.sizeInfo.selectOffsetRight < this.$menu[0].offsetWidth - selectWidth);\\n        }\\n\\n        this.$menu.css({\\n          'max-height': maxHeight + 'px',\\n          'overflow': 'hidden',\\n          'min-height': minHeight + 'px'\\n        });\\n\\n        this.$menuInner.css({\\n          'max-height': menuInnerHeight + 'px',\\n          'overflow-y': 'auto',\\n          'min-height': menuInnerMinHeight + 'px'\\n        });\\n\\n        this.sizeInfo['menuInnerHeight'] = menuInnerHeight;\\n\\n        if (this.selectpicker.current.data.length && this.selectpicker.current.data[this.selectpicker.current.data.length - 1].position > this.sizeInfo.menuInnerHeight) {\\n          this.sizeInfo.hasScrollBar = true;\\n          this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth + this.sizeInfo.scrollBarWidth;\\n\\n          this.$menu.css('min-width', this.sizeInfo.totalMenuWidth);\\n        }\\n\\n        if (this.dropdown) this.dropdown._popper.update();\\n      },\\n\\n      setSize: function setSize(refresh) {\\n        this.liHeight(refresh);\\n\\n        if (this.options.header) this.$menu.css('padding-top', 0);\\n        if (this.options.size === false) return;\\n\\n        var that = this,\\n            $window = $(window),\\n            selectedIndex,\\n            offset = 0;\\n\\n        this.setMenuSize();\\n\\n        if (this.options.size === 'auto') {\\n          this.$searchbox.off('input.setMenuSize propertychange.setMenuSize').on('input.setMenuSize propertychange.setMenuSize', function () {\\n            return that.setMenuSize();\\n          });\\n          $window.off('resize.setMenuSize scroll.setMenuSize').on('resize.setMenuSize scroll.setMenuSize', function () {\\n            return that.setMenuSize();\\n          });\\n        } else if (this.options.size && this.options.size != 'auto' && this.selectpicker.current.elements.length > this.options.size) {\\n          this.$searchbox.off('input.setMenuSize propertychange.setMenuSize');\\n          $window.off('resize.setMenuSize scroll.setMenuSize');\\n        }\\n\\n        if (refresh) {\\n          offset = this.$menuInner[0].scrollTop;\\n        } else if (!that.multiple) {\\n          selectedIndex = that.selectpicker.main.map.newIndex[that.$element[0].selectedIndex];\\n\\n          if (typeof selectedIndex === 'number' && that.options.size !== false) {\\n            offset = that.sizeInfo.liHeight * selectedIndex;\\n            offset = offset - that.sizeInfo.menuInnerHeight / 2 + that.sizeInfo.liHeight / 2;\\n          }\\n        }\\n\\n        that.createView(false, offset);\\n      },\\n\\n      setWidth: function setWidth() {\\n        var that = this;\\n\\n        if (this.options.width === 'auto') {\\n          requestAnimationFrame(function () {\\n            that.$menu.css('min-width', '0');\\n            that.liHeight();\\n            that.setMenuSize();\\n\\n            // Get correct width if element is hidden\\n            var $selectClone = that.$newElement.clone().appendTo('body'),\\n                btnWidth = $selectClone.css('width', 'auto').children('button').outerWidth();\\n\\n            $selectClone.remove();\\n\\n            // Set width to whatever's larger, button title or longest option\\n            that.sizeInfo.selectWidth = Math.max(that.sizeInfo.totalMenuWidth, btnWidth);\\n            that.$newElement.css('width', that.sizeInfo.selectWidth + 'px');\\n          });\\n        } else if (this.options.width === 'fit') {\\n          // Remove inline min-width so width can be changed from 'auto'\\n          this.$menu.css('min-width', '');\\n          this.$newElement.css('width', '').addClass('fit-width');\\n        } else if (this.options.width) {\\n          // Remove inline min-width so width can be changed from 'auto'\\n          this.$menu.css('min-width', '');\\n          this.$newElement.css('width', this.options.width);\\n        } else {\\n          // Remove inline min-width/width so width can be changed\\n          this.$menu.css('min-width', '');\\n          this.$newElement.css('width', '');\\n        }\\n        // Remove fit-width class if width is changed programmatically\\n        if (this.$newElement.hasClass('fit-width') && this.options.width !== 'fit') {\\n          this.$newElement.removeClass('fit-width');\\n        }\\n      },\\n\\n      selectPosition: function selectPosition() {\\n        this.$bsContainer = $('<div class=\\\"bs-container\\\" />');\\n\\n        var that = this,\\n            $container = $(this.options.container),\\n            pos,\\n            containerPos,\\n            actualHeight,\\n            getPlacement = function getPlacement($element) {\\n          var containerPosition = {};\\n\\n          that.$bsContainer.addClass($element.attr('class').replace(/form-control|fit-width/gi, '')).toggleClass(classNames.DROPUP, $element.hasClass(classNames.DROPUP));\\n          pos = $element.offset();\\n\\n          if (!$container.is('body')) {\\n            containerPos = $container.offset();\\n            containerPos.top += parseInt($container.css('borderTopWidth')) - $container.scrollTop();\\n            containerPos.left += parseInt($container.css('borderLeftWidth')) - $container.scrollLeft();\\n          } else {\\n            containerPos = { top: 0, left: 0 };\\n          }\\n\\n          actualHeight = $element.hasClass(classNames.DROPUP) ? 0 : $element[0].offsetHeight;\\n\\n          // Bootstrap 4+ uses Popper for menu positioning\\n          if (version.major < 4) {\\n            containerPosition['top'] = pos.top - containerPos.top + actualHeight;\\n            containerPosition['left'] = pos.left - containerPos.left;\\n          }\\n\\n          containerPosition['width'] = $element[0].offsetWidth;\\n\\n          that.$bsContainer.css(containerPosition);\\n        };\\n\\n        this.$button.on('click.bs.dropdown.data-api', function () {\\n          if (that.isDisabled()) {\\n            return;\\n          }\\n\\n          getPlacement(that.$newElement);\\n\\n          that.$bsContainer.appendTo(that.options.container).toggleClass(classNames.SHOW, !that.$button.hasClass(classNames.SHOW)).append(that.$menu);\\n        });\\n\\n        $(window).on('resize scroll', function () {\\n          getPlacement(that.$newElement);\\n        });\\n\\n        this.$element.on('hide.bs.select', function () {\\n          that.$menu.data('height', that.$menu.height());\\n          that.$bsContainer.detach();\\n        });\\n      },\\n\\n      setOptionStatus: function setOptionStatus() {\\n        var that = this,\\n            $selectOptions = this.$element.find('option');\\n\\n        that.noScroll = false;\\n\\n        if (that.selectpicker.view.visibleElements && that.selectpicker.view.visibleElements.length) {\\n          for (var i = 0; i < that.selectpicker.view.visibleElements.length; i++) {\\n            var index = that.selectpicker.current.map.originalIndex[i + that.selectpicker.view.position0],\\n                // faster than $(li).data('originalIndex')\\n            option = $selectOptions[index];\\n\\n            if (option) {\\n              var liIndex = this.selectpicker.main.map.newIndex[index],\\n                  li = this.selectpicker.main.elements[liIndex];\\n\\n              that.setDisabled(index, option.disabled || option.parentNode.tagName === 'OPTGROUP' && option.parentNode.disabled, liIndex, li);\\n\\n              that.setSelected(index, option.selected, liIndex, li);\\n            }\\n          }\\n        }\\n      },\\n\\n      /**\\r\\n       * @param {number} index - the index of the option that is being changed\\r\\n       * @param {boolean} selected - true if the option is being selected, false if being deselected\\r\\n       */\\n      setSelected: function setSelected(index, selected, liIndex, li) {\\n        var activeIndexIsSet = this.activeIndex !== undefined,\\n            thisIsActive = this.activeIndex === index,\\n            prevActiveIndex,\\n            prevActive,\\n            a,\\n            keepActive = thisIsActive || selected && !this.multiple && !activeIndexIsSet;\\n\\n        if (!liIndex) liIndex = this.selectpicker.main.map.newIndex[index];\\n        if (!li) li = this.selectpicker.main.elements[liIndex];\\n\\n        a = li.firstChild;\\n\\n        if (selected) {\\n          this.selectedIndex = index;\\n        }\\n\\n        li.classList.toggle('selected', selected);\\n        li.classList.toggle('active', keepActive);\\n\\n        if (keepActive) {\\n          this.selectpicker.view.currentActive = li;\\n          this.activeIndex = index;\\n        }\\n\\n        if (a) {\\n          a.classList.toggle('selected', selected);\\n          a.classList.toggle('active', keepActive);\\n          a.setAttribute('aria-selected', selected);\\n        }\\n\\n        if (!keepActive) {\\n          if (!activeIndexIsSet && selected && this.prevActiveIndex) {\\n            prevActiveIndex = this.selectpicker.main.map.newIndex[this.prevActiveIndex];\\n            prevActive = this.selectpicker.main.elements[prevActiveIndex];\\n\\n            prevActive.classList.remove('active');\\n            if (prevActive.firstChild) prevActive.firstChild.classList.remove('active');\\n          }\\n        }\\n      },\\n\\n      /**\\r\\n       * @param {number} index - the index of the option that is being disabled\\r\\n       * @param {boolean} disabled - true if the option is being disabled, false if being enabled\\r\\n       */\\n      setDisabled: function setDisabled(index, disabled, liIndex, li) {\\n        var a;\\n\\n        if (!liIndex) liIndex = this.selectpicker.main.map.newIndex[index];\\n        if (!li) li = this.selectpicker.main.elements[liIndex];\\n\\n        a = li.firstChild;\\n\\n        li.classList.toggle(classNames.DISABLED, disabled);\\n\\n        if (a) {\\n          if (version.major === '4') a.classList.toggle(classNames.DISABLED, disabled);\\n\\n          a.setAttribute('aria-disabled', disabled);\\n\\n          if (disabled) {\\n            a.setAttribute('tabindex', -1);\\n          } else {\\n            a.setAttribute('tabindex', 0);\\n          }\\n        }\\n      },\\n\\n      isDisabled: function isDisabled() {\\n        return this.$element[0].disabled;\\n      },\\n\\n      checkDisabled: function checkDisabled() {\\n        var that = this;\\n\\n        if (this.isDisabled()) {\\n          this.$newElement.addClass(classNames.DISABLED);\\n          this.$button.addClass(classNames.DISABLED).attr('tabindex', -1).attr('aria-disabled', true);\\n        } else {\\n          if (this.$button.hasClass(classNames.DISABLED)) {\\n            this.$newElement.removeClass(classNames.DISABLED);\\n            this.$button.removeClass(classNames.DISABLED).attr('aria-disabled', false);\\n          }\\n\\n          if (this.$button.attr('tabindex') == -1 && !this.$element.data('tabindex')) {\\n            this.$button.removeAttr('tabindex');\\n          }\\n        }\\n\\n        this.$button.click(function () {\\n          return !that.isDisabled();\\n        });\\n      },\\n\\n      togglePlaceholder: function togglePlaceholder() {\\n        // much faster than calling $.val()\\n        var element = this.$element[0],\\n            selectedIndex = element.selectedIndex,\\n            nothingSelected = selectedIndex === -1;\\n\\n        if (!nothingSelected && !element.options[selectedIndex].value) nothingSelected = true;\\n\\n        this.$button.toggleClass('bs-placeholder', nothingSelected);\\n      },\\n\\n      tabIndex: function tabIndex() {\\n        if (this.$element.data('tabindex') !== this.$element.attr('tabindex') && this.$element.attr('tabindex') !== -98 && this.$element.attr('tabindex') !== '-98') {\\n          this.$element.data('tabindex', this.$element.attr('tabindex'));\\n          this.$button.attr('tabindex', this.$element.data('tabindex'));\\n        }\\n\\n        this.$element.attr('tabindex', -98);\\n      },\\n\\n      clickListener: function clickListener() {\\n        var that = this,\\n            $document = $(document);\\n\\n        $document.data('spaceSelect', false);\\n\\n        this.$button.on('keyup', function (e) {\\n          if (/(32)/.test(e.keyCode.toString(10)) && $document.data('spaceSelect')) {\\n            e.preventDefault();\\n            $document.data('spaceSelect', false);\\n          }\\n        });\\n\\n        this.$newElement.on('show.bs.dropdown', function () {\\n          if (version.major > 3 && !that.dropdown) {\\n            that.dropdown = that.$button.data('bs.dropdown');\\n            that.dropdown._menu = that.$menu[0];\\n          }\\n        });\\n\\n        this.$button.on('click.bs.dropdown.data-api', function () {\\n          if (!that.$newElement.hasClass(classNames.SHOW)) {\\n            that.setSize();\\n          }\\n        });\\n\\n        this.$element.on('shown.bs.select', function () {\\n          if (that.$menuInner[0].scrollTop !== that.selectpicker.view.scrollTop) {\\n            that.$menuInner[0].scrollTop = that.selectpicker.view.scrollTop;\\n          }\\n\\n          if (that.options.liveSearch) {\\n            that.$searchbox.focus();\\n          } else {\\n            that.$menuInner.focus();\\n          }\\n        });\\n\\n        this.$menuInner.on('click', 'li a', function (e, retainActive) {\\n          var $this = $(this),\\n              position0 = that.isVirtual() ? that.selectpicker.view.position0 : 0,\\n              clickedIndex = that.selectpicker.current.map.originalIndex[$this.parent().index() + position0],\\n              prevValue = that.$element.val(),\\n              prevIndex = that.$element.prop('selectedIndex'),\\n              triggerChange = true;\\n\\n          // Don't close on multi choice menu\\n          if (that.multiple && that.options.maxOptions !== 1) {\\n            e.stopPropagation();\\n          }\\n\\n          e.preventDefault();\\n\\n          //Don't run if we have been disabled\\n          if (!that.isDisabled() && !$this.parent().hasClass(classNames.DISABLED)) {\\n            var $options = that.$element.find('option'),\\n                $option = $options.eq(clickedIndex),\\n                state = $option.prop('selected'),\\n                $optgroup = $option.parent('optgroup'),\\n                maxOptions = that.options.maxOptions,\\n                maxOptionsGrp = $optgroup.data('maxOptions') || false;\\n\\n            if (!that.multiple) {\\n              // Deselect all others if not multi select box\\n              $options.prop('selected', false);\\n              $option.prop('selected', true);\\n              that.setSelected(clickedIndex, true);\\n            } else {\\n              // Toggle the one we have chosen if we are multi select.\\n              $option.prop('selected', !state);\\n\\n              if (clickedIndex === that.activeIndex) retainActive = true;\\n\\n              if (!retainActive) {\\n                that.prevActiveIndex = that.activeIndex;\\n                that.activeIndex = undefined;\\n              }\\n\\n              that.setSelected(clickedIndex, !state);\\n              $this.blur();\\n\\n              if (maxOptions !== false || maxOptionsGrp !== false) {\\n                var maxReached = maxOptions < $options.filter(':selected').length,\\n                    maxReachedGrp = maxOptionsGrp < $optgroup.find('option:selected').length;\\n\\n                if (maxOptions && maxReached || maxOptionsGrp && maxReachedGrp) {\\n                  if (maxOptions && maxOptions == 1) {\\n                    $options.prop('selected', false);\\n                    $option.prop('selected', true);\\n                    that.$menuInner.find('.selected').removeClass('selected');\\n                    that.setSelected(clickedIndex, true);\\n                  } else if (maxOptionsGrp && maxOptionsGrp == 1) {\\n                    $optgroup.find('option:selected').prop('selected', false);\\n                    $option.prop('selected', true);\\n                    var optgroupID = that.selectpicker.current.data[$this.parent().index() + that.selectpicker.view.position0].optID;\\n                    that.$menuInner.find('.optgroup-' + optgroupID).removeClass('selected');\\n                    that.setSelected(clickedIndex, true);\\n                  } else {\\n                    var maxOptionsText = typeof that.options.maxOptionsText === 'string' ? [that.options.maxOptionsText, that.options.maxOptionsText] : that.options.maxOptionsText,\\n                        maxOptionsArr = typeof maxOptionsText === 'function' ? maxOptionsText(maxOptions, maxOptionsGrp) : maxOptionsText,\\n                        maxTxt = maxOptionsArr[0].replace('{n}', maxOptions),\\n                        maxTxtGrp = maxOptionsArr[1].replace('{n}', maxOptionsGrp),\\n                        $notify = $('<div class=\\\"notify\\\"></div>');\\n                    // If {var} is set in array, replace it\\n                    /** @deprecated */\\n                    if (maxOptionsArr[2]) {\\n                      maxTxt = maxTxt.replace('{var}', maxOptionsArr[2][maxOptions > 1 ? 0 : 1]);\\n                      maxTxtGrp = maxTxtGrp.replace('{var}', maxOptionsArr[2][maxOptionsGrp > 1 ? 0 : 1]);\\n                    }\\n\\n                    $option.prop('selected', false);\\n\\n                    that.$menu.append($notify);\\n\\n                    if (maxOptions && maxReached) {\\n                      $notify.append($('<div>' + maxTxt + '</div>'));\\n                      triggerChange = false;\\n                      that.$element.trigger('maxReached.bs.select');\\n                    }\\n\\n                    if (maxOptionsGrp && maxReachedGrp) {\\n                      $notify.append($('<div>' + maxTxtGrp + '</div>'));\\n                      triggerChange = false;\\n                      that.$element.trigger('maxReachedGrp.bs.select');\\n                    }\\n\\n                    setTimeout(function () {\\n                      that.setSelected(clickedIndex, false);\\n                    }, 10);\\n\\n                    $notify.delay(750).fadeOut(300, function () {\\n                      $(this).remove();\\n                    });\\n                  }\\n                }\\n              }\\n            }\\n\\n            if (!that.multiple || that.multiple && that.options.maxOptions === 1) {\\n              that.$button.focus();\\n            } else if (that.options.liveSearch) {\\n              that.$searchbox.focus();\\n            }\\n\\n            // Trigger select 'change'\\n            if (triggerChange) {\\n              if (prevValue != that.$element.val() && that.multiple || prevIndex != that.$element.prop('selectedIndex') && !that.multiple) {\\n                // $option.prop('selected') is current option state (selected/unselected). state is previous option state.\\n                changed_arguments = [clickedIndex, $option.prop('selected'), state];\\n                that.$element.triggerNative('change');\\n              }\\n            }\\n          }\\n        });\\n\\n        this.$menu.on('click', 'li.' + classNames.DISABLED + ' a, .popover-title, .popover-title :not(.close)', function (e) {\\n          if (e.currentTarget == this) {\\n            e.preventDefault();\\n            e.stopPropagation();\\n            if (that.options.liveSearch && !$(e.target).hasClass('close')) {\\n              that.$searchbox.focus();\\n            } else {\\n              that.$button.focus();\\n            }\\n          }\\n        });\\n\\n        this.$menuInner.on('click', '.divider, .dropdown-header', function (e) {\\n          e.preventDefault();\\n          e.stopPropagation();\\n          if (that.options.liveSearch) {\\n            that.$searchbox.focus();\\n          } else {\\n            that.$button.focus();\\n          }\\n        });\\n\\n        this.$menu.on('click', '.popover-title .close', function () {\\n          that.$button.click();\\n        });\\n\\n        this.$searchbox.on('click', function (e) {\\n          e.stopPropagation();\\n        });\\n\\n        this.$menu.on('click', '.actions-btn', function (e) {\\n          if (that.options.liveSearch) {\\n            that.$searchbox.focus();\\n          } else {\\n            that.$button.focus();\\n          }\\n\\n          e.preventDefault();\\n          e.stopPropagation();\\n\\n          if ($(this).hasClass('bs-select-all')) {\\n            that.selectAll();\\n          } else {\\n            that.deselectAll();\\n          }\\n        });\\n\\n        this.$element.on({\\n          'change': function change() {\\n            that.render();\\n            that.$element.trigger('changed.bs.select', changed_arguments);\\n            changed_arguments = null;\\n          },\\n          'focus': function focus() {\\n            that.$button.focus();\\n          }\\n        });\\n      },\\n\\n      liveSearchListener: function liveSearchListener() {\\n        var that = this,\\n            no_results = document.createElement('li');\\n\\n        this.$button.on('click.bs.dropdown.data-api', function () {\\n          if (!!that.$searchbox.val()) {\\n            that.$searchbox.val('');\\n          }\\n        });\\n\\n        this.$searchbox.on('click.bs.dropdown.data-api focus.bs.dropdown.data-api touchend.bs.dropdown.data-api', function (e) {\\n          e.stopPropagation();\\n        });\\n\\n        this.$searchbox.on('input propertychange', function () {\\n          var searchValue = that.$searchbox.val();\\n\\n          that.selectpicker.search.map.newIndex = {};\\n          that.selectpicker.search.map.originalIndex = {};\\n          that.selectpicker.search.elements = [];\\n          that.selectpicker.search.data = [];\\n\\n          if (searchValue) {\\n            var i,\\n                searchMatch = [],\\n                q = searchValue.toUpperCase(),\\n                cache = {},\\n                cacheArr = [],\\n                searchStyle = that._searchStyle(),\\n                normalizeSearch = that.options.liveSearchNormalize;\\n\\n            that._$lisSelected = that.$menuInner.find('.selected');\\n\\n            for (var i = 0; i < that.selectpicker.main.data.length; i++) {\\n              var li = that.selectpicker.main.data[i];\\n\\n              if (!cache[i]) {\\n                cache[i] = stringSearch(li, q, searchStyle, normalizeSearch);\\n              }\\n\\n              if (cache[i] && li.headerIndex !== undefined && cacheArr.indexOf(li.headerIndex) === -1) {\\n                if (li.headerIndex > 0) {\\n                  cache[li.headerIndex - 1] = true;\\n                  cacheArr.push(li.headerIndex - 1);\\n                }\\n\\n                cache[li.headerIndex] = true;\\n                cacheArr.push(li.headerIndex);\\n\\n                cache[li.lastIndex + 1] = true;\\n              }\\n\\n              if (cache[i] && li.type !== 'optgroup-label') cacheArr.push(i);\\n            }\\n\\n            for (var i = 0, cacheLen = cacheArr.length; i < cacheLen; i++) {\\n              var index = cacheArr[i],\\n                  prevIndex = cacheArr[i - 1],\\n                  li = that.selectpicker.main.data[index],\\n                  liPrev = that.selectpicker.main.data[prevIndex];\\n\\n              if (li.type !== 'divider' || li.type === 'divider' && liPrev && liPrev.type !== 'divider' && cacheLen - 1 !== i) {\\n                that.selectpicker.search.data.push(li);\\n                searchMatch.push(that.selectpicker.main.elements[index]);\\n                that.selectpicker.search.map.newIndex[li.originalIndex] = searchMatch.length - 1;\\n                that.selectpicker.search.map.originalIndex[searchMatch.length - 1] = li.originalIndex;\\n              }\\n            }\\n\\n            that.activeIndex = undefined;\\n            that.noScroll = true;\\n            that.$menuInner.scrollTop(0);\\n            that.selectpicker.search.elements = searchMatch;\\n            that.createView(true);\\n\\n            if (!searchMatch.length) {\\n              no_results.className = 'no-results';\\n              no_results.innerHTML = that.options.noneResultsText.replace('{0}', '\\\"' + htmlEscape(searchValue) + '\\\"');\\n              that.$menuInner[0].firstChild.appendChild(no_results);\\n            }\\n          } else {\\n            that.$menuInner.scrollTop(0);\\n            that.createView(false);\\n          }\\n        });\\n      },\\n\\n      _searchStyle: function _searchStyle() {\\n        return this.options.liveSearchStyle || 'contains';\\n      },\\n\\n      val: function val(value) {\\n        if (typeof value !== 'undefined') {\\n          this.$element.val(value).triggerNative('change');\\n\\n          return this.$element;\\n        } else {\\n          return this.$element.val();\\n        }\\n      },\\n\\n      changeAll: function changeAll(status) {\\n        if (!this.multiple) return;\\n        if (typeof status === 'undefined') status = true;\\n\\n        var $selectOptions = this.$element.find('option'),\\n            previousSelected = 0,\\n            currentSelected = 0;\\n\\n        for (var i = 0; i < this.selectpicker.current.elements.length; i++) {\\n          var index = this.selectpicker.current.map.originalIndex[i],\\n              // faster than $(li).data('originalIndex')\\n          option = $selectOptions[index];\\n\\n          if (option) {\\n            if (option.selected) previousSelected++;\\n            option.selected = status;\\n            if (option.selected) currentSelected++;\\n          }\\n        }\\n\\n        if (previousSelected === currentSelected) return;\\n\\n        this.setOptionStatus();\\n\\n        this.togglePlaceholder();\\n\\n        this.$element.triggerNative('change');\\n      },\\n\\n      selectAll: function selectAll() {\\n        return this.changeAll(true);\\n      },\\n\\n      deselectAll: function deselectAll() {\\n        return this.changeAll(false);\\n      },\\n\\n      toggle: function toggle(e) {\\n        e = e || window.event;\\n\\n        if (e) e.stopPropagation();\\n\\n        this.$button.trigger('click.bs.dropdown.data-api');\\n      },\\n\\n      keydown: function keydown(e) {\\n        var $this = $(this),\\n            $parent = $this.is('input') ? $this.parent().parent() : $this.parent(),\\n            that = $parent.data('this'),\\n            $items = that.findLis(),\\n            index,\\n            isActive,\\n            liActive,\\n            activeLi,\\n            offset,\\n            updateScroll = false,\\n            downOnTab = e.which === keyCodes.TAB && !$this.hasClass('dropdown-toggle') && !that.options.selectOnTab,\\n            isArrowKey = REGEXP_ARROW.test(e.which) || downOnTab,\\n            scrollTop = that.$menuInner[0].scrollTop,\\n            isVirtual = that.isVirtual(),\\n            position0 = isVirtual === true ? that.selectpicker.view.position0 : 0;\\n\\n        isActive = that.$newElement.hasClass(classNames.SHOW);\\n\\n        if (!isActive && (isArrowKey || e.which >= 48 && e.which <= 57 || e.which >= 96 && e.which <= 105 || e.which >= 65 && e.which <= 90)) {\\n          that.$button.trigger('click.bs.dropdown.data-api');\\n        }\\n\\n        if (e.which === keyCodes.ESCAPE && isActive) {\\n          e.preventDefault();\\n          that.$button.trigger('click.bs.dropdown.data-api').focus();\\n        }\\n\\n        if (isArrowKey) {\\n          // if up or down\\n          if (!$items.length) return;\\n\\n          // $items.index/.filter is too slow with a large list and no virtual scroll\\n          index = isVirtual === true ? $items.index($items.filter('.active')) : that.selectpicker.current.map.newIndex[that.activeIndex];\\n\\n          if (index === undefined) index = -1;\\n\\n          if (index !== -1) {\\n            liActive = that.selectpicker.current.elements[index + position0];\\n            liActive.classList.remove('active');\\n            if (liActive.firstChild) liActive.firstChild.classList.remove('active');\\n          }\\n\\n          if (e.which === keyCodes.ARROW_UP) {\\n            // up\\n            if (index !== -1) index--;\\n            if (index + position0 < 0) index += $items.length;\\n\\n            if (!that.selectpicker.view.canHighlight[index + position0]) {\\n              index = that.selectpicker.view.canHighlight.slice(0, index + position0).lastIndexOf(true) - position0;\\n              if (index === -1) index = $items.length - 1;\\n            }\\n          } else if (e.which === keyCodes.ARROW_DOWN || downOnTab) {\\n            // down\\n            index++;\\n            if (index + position0 >= that.selectpicker.view.canHighlight.length) index = 0;\\n\\n            if (!that.selectpicker.view.canHighlight[index + position0]) {\\n              index = index + 1 + that.selectpicker.view.canHighlight.slice(index + position0 + 1).indexOf(true);\\n            }\\n          }\\n\\n          e.preventDefault();\\n\\n          var liActiveIndex = position0 + index;\\n\\n          if (e.which === keyCodes.ARROW_UP) {\\n            // up\\n            // scroll to bottom and highlight last option\\n            if (position0 === 0 && index === $items.length - 1) {\\n              that.$menuInner[0].scrollTop = that.$menuInner[0].scrollHeight;\\n\\n              liActiveIndex = that.selectpicker.current.elements.length - 1;\\n            } else {\\n              activeLi = that.selectpicker.current.data[liActiveIndex];\\n              offset = activeLi.position - activeLi.height;\\n\\n              updateScroll = offset < scrollTop;\\n            }\\n          } else if (e.which === keyCodes.ARROW_DOWN || downOnTab) {\\n            // down\\n            // scroll to top and highlight first option\\n            if (position0 !== 0 && index === 0) {\\n              that.$menuInner[0].scrollTop = 0;\\n\\n              liActiveIndex = 0;\\n            } else {\\n              activeLi = that.selectpicker.current.data[liActiveIndex];\\n              offset = activeLi.position - that.sizeInfo.menuInnerHeight;\\n\\n              updateScroll = offset > scrollTop;\\n            }\\n          }\\n\\n          liActive = that.selectpicker.current.elements[liActiveIndex];\\n          liActive.classList.add('active');\\n          if (liActive.firstChild) liActive.firstChild.classList.add('active');\\n          that.activeIndex = that.selectpicker.current.map.originalIndex[liActiveIndex];\\n\\n          that.selectpicker.view.currentActive = liActive;\\n\\n          if (updateScroll) that.$menuInner[0].scrollTop = offset;\\n\\n          if (that.options.liveSearch) {\\n            that.$searchbox.focus();\\n          } else {\\n            $this.focus();\\n          }\\n        } else if (!$this.is('input') && !REGEXP_TAB_OR_ESCAPE.test(e.which) || e.which === keyCodes.SPACE && that.selectpicker.keydown.keyHistory) {\\n          var searchMatch,\\n              matches = [],\\n              keyHistory;\\n\\n          e.preventDefault();\\n\\n          that.selectpicker.keydown.keyHistory += keyCodeMap[e.which];\\n\\n          if (that.selectpicker.keydown.resetKeyHistory.cancel) clearTimeout(that.selectpicker.keydown.resetKeyHistory.cancel);\\n          that.selectpicker.keydown.resetKeyHistory.cancel = that.selectpicker.keydown.resetKeyHistory.start();\\n\\n          keyHistory = that.selectpicker.keydown.keyHistory;\\n\\n          // if all letters are the same, set keyHistory to just the first character when searching\\n          if (/^(.)\\\\1+$/.test(keyHistory)) {\\n            keyHistory = keyHistory.charAt(0);\\n          }\\n\\n          // find matches\\n          for (var i = 0; i < that.selectpicker.current.data.length; i++) {\\n            var li = that.selectpicker.current.data[i],\\n                hasMatch;\\n\\n            hasMatch = stringSearch(li, keyHistory, 'startsWith', true);\\n\\n            if (hasMatch && that.selectpicker.view.canHighlight[i]) {\\n              li.index = i;\\n              matches.push(li.originalIndex);\\n            }\\n          }\\n\\n          if (matches.length) {\\n            var matchIndex = 0;\\n\\n            $items.removeClass('active').find('a').removeClass('active');\\n\\n            // either only one key has been pressed or they are all the same key\\n            if (keyHistory.length === 1) {\\n              matchIndex = matches.indexOf(that.activeIndex);\\n\\n              if (matchIndex === -1 || matchIndex === matches.length - 1) {\\n                matchIndex = 0;\\n              } else {\\n                matchIndex++;\\n              }\\n            }\\n\\n            searchMatch = that.selectpicker.current.map.newIndex[matches[matchIndex]];\\n\\n            activeLi = that.selectpicker.current.data[searchMatch];\\n\\n            if (scrollTop - activeLi.position > 0) {\\n              offset = activeLi.position - activeLi.height;\\n              updateScroll = true;\\n            } else {\\n              offset = activeLi.position - that.sizeInfo.menuInnerHeight;\\n              // if the option is already visible at the current scroll position, just keep it the same\\n              updateScroll = activeLi.position > scrollTop + that.sizeInfo.menuInnerHeight;\\n            }\\n\\n            liActive = that.selectpicker.current.elements[searchMatch];\\n            liActive.classList.add('active');\\n            if (liActive.firstChild) liActive.firstChild.classList.add('active');\\n            that.activeIndex = matches[matchIndex];\\n\\n            liActive.firstChild.focus();\\n\\n            if (updateScroll) that.$menuInner[0].scrollTop = offset;\\n\\n            $this.focus();\\n          }\\n        }\\n\\n        // Select focused option if \\\"Enter\\\", \\\"Spacebar\\\" or \\\"Tab\\\" (when selectOnTab is true) are pressed inside the menu.\\n        if (isActive && (e.which === keyCodes.SPACE && !that.selectpicker.keydown.keyHistory || e.which === keyCodes.ENTER || e.which === keyCodes.TAB && that.options.selectOnTab)) {\\n          if (e.which !== keyCodes.SPACE) e.preventDefault();\\n\\n          if (!that.options.liveSearch || e.which !== keyCodes.SPACE) {\\n            that.$menuInner.find('.active a').trigger('click', true); // retain active class\\n            $this.focus();\\n\\n            if (!that.options.liveSearch) {\\n              // Prevent screen from scrolling if the user hits the spacebar\\n              e.preventDefault();\\n              // Fixes spacebar selection of dropdown items in FF & IE\\n              $(document).data('spaceSelect', true);\\n            }\\n          }\\n        }\\n      },\\n\\n      mobile: function mobile() {\\n        this.$element.addClass('mobile-device');\\n      },\\n\\n      refresh: function refresh() {\\n        // update options if data attributes have been changed\\n        var config = $.extend({}, this.options, this.$element.data());\\n        this.options = config;\\n\\n        this.selectpicker.main.map.newIndex = {};\\n        this.selectpicker.main.map.originalIndex = {};\\n        this.createLi();\\n        this.checkDisabled();\\n        this.render();\\n        this.setStyle();\\n        this.setWidth();\\n\\n        this.setSize(true);\\n\\n        this.$element.trigger('refreshed.bs.select');\\n      },\\n\\n      hide: function hide() {\\n        this.$newElement.hide();\\n      },\\n\\n      show: function show() {\\n        this.$newElement.show();\\n      },\\n\\n      remove: function remove() {\\n        this.$newElement.remove();\\n        this.$element.remove();\\n      },\\n\\n      destroy: function destroy() {\\n        this.$newElement.before(this.$element).remove();\\n\\n        if (this.$bsContainer) {\\n          this.$bsContainer.remove();\\n        } else {\\n          this.$menu.remove();\\n        }\\n\\n        this.$element.off('.bs.select').removeData('selectpicker').removeClass('bs-select-hidden selectpicker');\\n      }\\n    };\\n\\n    // SELECTPICKER PLUGIN DEFINITION\\n    // ==============================\\n    function Plugin(option) {\\n      // get the args of the outer function..\\n      var args = arguments;\\n      // The arguments of the function are explicitly re-defined from the argument list, because the shift causes them\\n      // to get lost/corrupted in android 2.3 and IE9 #715 #775\\n      var _option = option;\\n\\n      [].shift.apply(args);\\n\\n      var value;\\n      var chain = this.each(function () {\\n        var $this = $(this);\\n        if ($this.is('select')) {\\n          var data = $this.data('selectpicker'),\\n              options = (typeof _option === 'undefined' ? 'undefined' : _typeof(_option)) == 'object' && _option;\\n\\n          if (!data) {\\n            var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, $this.data(), options);\\n            config.template = $.extend({}, Selectpicker.DEFAULTS.template, $.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}, $this.data().template, options.template);\\n            $this.data('selectpicker', data = new Selectpicker(this, config));\\n          } else if (options) {\\n            for (var i in options) {\\n              if (options.hasOwnProperty(i)) {\\n                data.options[i] = options[i];\\n              }\\n            }\\n          }\\n\\n          if (typeof _option == 'string') {\\n            if (data[_option] instanceof Function) {\\n              value = data[_option].apply(data, args);\\n            } else {\\n              value = data.options[_option];\\n            }\\n          }\\n        }\\n      });\\n\\n      if (typeof value !== 'undefined') {\\n        //noinspection JSUnusedAssignment\\n        return value;\\n      } else {\\n        return chain;\\n      }\\n    }\\n\\n    var old = $.fn.selectpicker;\\n    $.fn.selectpicker = Plugin;\\n    $.fn.selectpicker.Constructor = Selectpicker;\\n\\n    // SELECTPICKER NO CONFLICT\\n    // ========================\\n    $.fn.selectpicker.noConflict = function () {\\n      $.fn.selectpicker = old;\\n      return this;\\n    };\\n\\n    $(document).off('keydown.bs.dropdown.data-api').on('keydown.bs.select', '.bootstrap-select [data-toggle=\\\"dropdown\\\"], .bootstrap-select [role=\\\"listbox\\\"], .bs-searchbox input', Selectpicker.prototype.keydown).on('focusin.modal', '.bootstrap-select [data-toggle=\\\"dropdown\\\"], .bootstrap-select [role=\\\"listbox\\\"], .bs-searchbox input', function (e) {\\n      e.stopPropagation();\\n    });\\n\\n    // SELECTPICKER DATA-API\\n    // =====================\\n    $(window).on('load.bs.select.data-api', function () {\\n      $('.selectpicker').each(function () {\\n        var $selectpicker = $(this);\\n        Plugin.call($selectpicker, $selectpicker.data());\\n      });\\n    });\\n  })(jQuery);\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./vendor/bootstrap-select-1.13.0-beta/js/bootstrap-select.js\\n\");\n\n//# sourceURL=webpack:///./vendor/bootstrap-select-1.13.0-beta/js/bootstrap-select.js?");

/***/ }),

/***/ "./vendor/slim/js/slim.kickstart.min.js":
/*!**********************************************!*\
  !*** ./vendor/slim/js/slim.kickstart.min.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("eval(\"\\n\\nvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\n/*\\n * Slim v4.17.1 - Image Cropping Made Easy\\n * Copyright (c) 2018 Rik Schennink - http://slimimagecropper.com\\n */\\n!function (t, e) {\\n  function i() {\\n    t.Slim.parse(document);\\n  }if (t) if (t.Slim = function () {\\n    function t(t, e) {\\n      if (!(t instanceof e)) throw new TypeError(\\\"Cannot call a class as a function\\\");\\n    }function i(t, e, i, n) {\\n      if (!(e >= 1)) {\\n        for (var o = t.width, a = t.height, r = Math.max(n.width, Math.min(i.width, Math.round(t.width * e))), s = Math.max(n.height, Math.min(i.height, Math.round(t.height * e))), h = st(t), u = void 0, l = void 0; o > r && a > s;) {\\n          u = document.createElement(\\\"canvas\\\"), o = Math.round(.5 * h.width), a = Math.round(.5 * h.height), o < r && (o = r), a < s && (a = s), u.width = o, u.height = a, l = u.getContext(\\\"2d\\\"), l.drawImage(h, 0, 0, o, a), h = st(u);\\n        }t.width = r, t.height = s, l = t.getContext(\\\"2d\\\"), l.drawImage(h, 0, 0, r, s);\\n      }\\n    }!function () {\\n      function t(t, i) {\\n        i = i || { bubbles: !1, cancelable: !1, detail: e };var n = document.createEvent(\\\"CustomEvent\\\");return n.initCustomEvent(t, i.bubbles, i.cancelable, i.detail), n;\\n      }return \\\"function\\\" != typeof window.CustomEvent && (t.prototype = window.Event.prototype, void (window.CustomEvent = t));\\n    }();var n = function n(t, e, i) {\\n      var o,\\n          a,\\n          r = document.createElement(\\\"img\\\");if (r.onerror = e, r.onload = function () {\\n        !a || i && i.noRevoke || n.revokeObjectURL(a), e && e(n.scale(r, i));\\n      }, n.isInstanceOf(\\\"Blob\\\", t) || n.isInstanceOf(\\\"File\\\", t)) o = a = n.createObjectURL(t), r._type = t.type;else {\\n        if (\\\"string\\\" != typeof t) return !1;o = t, i && i.crossOrigin && (r.crossOrigin = i.crossOrigin);\\n      }return o ? (r.src = o, r) : n.readFile(t, function (t) {\\n        var i = t.target;i && i.result ? r.src = i.result : e && e(t);\\n      });\\n    },\\n        o = window.createObjectURL && window || window.URL && URL.revokeObjectURL && URL || window.webkitURL && webkitURL;n.isInstanceOf = function (t, e) {\\n      return Object.prototype.toString.call(e) === \\\"[object \\\" + t + \\\"]\\\";\\n    }, n.transformCoordinates = function () {}, n.getTransformedOptions = function (t, e) {\\n      var i,\\n          n,\\n          o,\\n          a,\\n          r = e.aspectRatio;if (!r) return e;i = {};for (n in e) {\\n        e.hasOwnProperty(n) && (i[n] = e[n]);\\n      }return i.crop = !0, o = t.naturalWidth || t.width, a = t.naturalHeight || t.height, o / a > r ? (i.maxWidth = a * r, i.maxHeight = a) : (i.maxWidth = o, i.maxHeight = o / r), i;\\n    }, n.renderImageToCanvas = function (t, e, i, n, o, a, r, s, h, u) {\\n      return t.getContext(\\\"2d\\\").drawImage(e, i, n, o, a, r, s, h, u), t;\\n    }, n.hasCanvasOption = function (t) {\\n      return t.canvas || t.crop || !!t.aspectRatio;\\n    }, n.scale = function (t, i) {\\n      function o() {\\n        var t = Math.max((h || b) / b, (u || k) / k);t > 1 && (b *= t, k *= t);\\n      }function a() {\\n        var t = Math.min((r || b) / b, (s || k) / k);t < 1 && (b *= t, k *= t);\\n      }i = i || {};var r,\\n          s,\\n          h,\\n          u,\\n          l,\\n          p,\\n          c,\\n          d,\\n          f,\\n          _,\\n          m,\\n          g = document.createElement(\\\"canvas\\\"),\\n          v = t.getContext || n.hasCanvasOption(i) && g.getContext,\\n          y = t.naturalWidth || t.width,\\n          w = t.naturalHeight || t.height,\\n          b = y,\\n          k = w;if (v && (i = n.getTransformedOptions(t, i), c = i.left || 0, d = i.top || 0, i.sourceWidth ? (l = i.sourceWidth, i.right !== e && i.left === e && (c = y - l - i.right)) : l = y - c - (i.right || 0), i.sourceHeight ? (p = i.sourceHeight, i.bottom !== e && i.top === e && (d = w - p - i.bottom)) : p = w - d - (i.bottom || 0), b = l, k = p), r = i.maxWidth, s = i.maxHeight, h = i.minWidth, u = i.minHeight, v && r && s && i.crop ? (b = r, k = s, m = l / p - r / s, m < 0 ? (p = s * l / r, i.top === e && i.bottom === e && (d = (w - p) / 2)) : m > 0 && (l = r * p / s, i.left === e && i.right === e && (c = (y - l) / 2))) : ((i.contain || i.cover) && (h = r = r || h, u = s = s || u), i.cover ? (a(), o()) : (o(), a())), v) {\\n        if (f = i.pixelRatio, f > 1 && (g.style.width = b + \\\"px\\\", g.style.height = k + \\\"px\\\", b *= f, k *= f, g.getContext(\\\"2d\\\").scale(f, f)), _ = i.downsamplingRatio, _ > 0 && _ < 1 && b < l && k < p) for (; l * _ > b;) {\\n          g.width = l * _, g.height = p * _, n.renderImageToCanvas(g, t, c, d, l, p, 0, 0, g.width, g.height), l = g.width, p = g.height, t = document.createElement(\\\"canvas\\\"), t.width = l, t.height = p, n.renderImageToCanvas(t, g, 0, 0, l, p, 0, 0, l, p);\\n        }return g.width = b, g.height = k, n.transformCoordinates(g, i), n.renderImageToCanvas(g, t, c, d, l, p, 0, 0, b, k);\\n      }return t.width = b, t.height = k, t;\\n    }, n.createObjectURL = function (t) {\\n      return !!o && o.createObjectURL(t);\\n    }, n.revokeObjectURL = function (t) {\\n      return !!o && o.revokeObjectURL(t);\\n    }, n.readFile = function (t, e, i) {\\n      if (window.FileReader) {\\n        var n = new FileReader();if (n.onload = n.onerror = e, i = i || \\\"readAsDataURL\\\", n[i]) return n[i](t), n;\\n      }return !1;\\n    };var a = n.hasCanvasOption,\\n        r = n.transformCoordinates,\\n        s = n.getTransformedOptions;n.hasCanvasOption = function (t) {\\n      return !!t.orientation || a.call(n, t);\\n    }, n.transformCoordinates = function (t, e) {\\n      r.call(n, t, e);var i = t.getContext(\\\"2d\\\"),\\n          o = t.width,\\n          a = t.height,\\n          s = t.style.width,\\n          h = t.style.height,\\n          u = e.orientation;if (u && !(u > 8)) switch (u > 4 && (t.width = a, t.height = o, t.style.width = h, t.style.height = s), u) {case 2:\\n          i.translate(o, 0), i.scale(-1, 1);break;case 3:\\n          i.translate(o, a), i.rotate(Math.PI);break;case 4:\\n          i.translate(0, a), i.scale(1, -1);break;case 5:\\n          i.rotate(.5 * Math.PI), i.scale(1, -1);break;case 6:\\n          i.rotate(.5 * Math.PI), i.translate(0, -a);break;case 7:\\n          i.rotate(.5 * Math.PI), i.translate(o, -a), i.scale(-1, 1);break;case 8:\\n          i.rotate(-.5 * Math.PI), i.translate(-o, 0);}\\n    }, n.getTransformedOptions = function (t, e) {\\n      var i,\\n          o,\\n          a = s.call(n, t, e),\\n          r = a.orientation;if (!r || r > 8 || 1 === r) return a;i = {};for (o in a) {\\n        a.hasOwnProperty(o) && (i[o] = a[o]);\\n      }switch (a.orientation) {case 2:\\n          i.left = a.right, i.right = a.left;break;case 3:\\n          i.left = a.right, i.top = a.bottom, i.right = a.left, i.bottom = a.top;break;case 4:\\n          i.top = a.bottom, i.bottom = a.top;break;case 5:\\n          i.left = a.top, i.top = a.left, i.right = a.bottom, i.bottom = a.right;break;case 6:\\n          i.left = a.top, i.top = a.right, i.right = a.bottom, i.bottom = a.left;break;case 7:\\n          i.left = a.bottom, i.top = a.right, i.right = a.top, i.bottom = a.left;break;case 8:\\n          i.left = a.bottom, i.top = a.left, i.right = a.top, i.bottom = a.right;}return a.orientation > 4 && (i.maxWidth = a.maxHeight, i.maxHeight = a.maxWidth, i.minWidth = a.minHeight, i.minHeight = a.minWidth, i.sourceWidth = a.sourceHeight, i.sourceHeight = a.sourceWidth), i;\\n    };var h = window.Blob && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);n.blobSlice = h && function () {\\n      var t = this.slice || this.webkitSlice || this.mozSlice;return t.apply(this, arguments);\\n    }, n.metaDataParsers = { jpeg: { 65505: [] } }, n.parseMetaData = function (t, e, i) {\\n      i = i || {};var o = this,\\n          a = i.maxMetaDataSize || 262144,\\n          r = {},\\n          s = !(window.DataView && t && t.size >= 12 && \\\"image/jpeg\\\" === t.type && n.blobSlice);!s && n.readFile(n.blobSlice.call(t, 0, a), function (t) {\\n        if (t.target.error) return void e(r);var a,\\n            s,\\n            h,\\n            u,\\n            l = t.target.result,\\n            p = new DataView(l),\\n            c = 2,\\n            d = p.byteLength - 4,\\n            f = c;if (65496 === p.getUint16(0)) {\\n          for (; c < d && (a = p.getUint16(c), a >= 65504 && a <= 65519 || 65534 === a) && (s = p.getUint16(c + 2) + 2, !(c + s > p.byteLength));) {\\n            if (h = n.metaDataParsers.jpeg[a]) for (u = 0; u < h.length; u += 1) {\\n              h[u].call(o, p, c, s, r, i);\\n            }c += s, f = c;\\n          }!i.disableImageHead && f > 6 && (l.slice ? r.imageHead = l.slice(0, f) : r.imageHead = new Uint8Array(l).subarray(0, f));\\n        }e(r);\\n      }, \\\"readAsArrayBuffer\\\") || e(r);\\n    }, n.ExifMap = function () {\\n      return this;\\n    }, n.ExifMap.prototype.map = { Orientation: 274 }, n.ExifMap.prototype.get = function (t) {\\n      return this[t] || this[this.map[t]];\\n    }, n.getExifThumbnail = function (t, e, i) {\\n      var n, o, a;if (i && !(e + i > t.byteLength)) {\\n        for (n = [], o = 0; o < i; o += 1) {\\n          a = t.getUint8(e + o), n.push((a < 16 ? \\\"0\\\" : \\\"\\\") + a.toString(16));\\n        }return \\\"data:image/jpeg,%\\\" + n.join(\\\"%\\\");\\n      }\\n    }, n.exifTagTypes = { 1: { getValue: function getValue(t, e) {\\n          return t.getUint8(e);\\n        }, size: 1 }, 2: { getValue: function getValue(t, e) {\\n          return String.fromCharCode(t.getUint8(e));\\n        }, size: 1, ascii: !0 }, 3: { getValue: function getValue(t, e, i) {\\n          return t.getUint16(e, i);\\n        }, size: 2 }, 4: { getValue: function getValue(t, e, i) {\\n          return t.getUint32(e, i);\\n        }, size: 4 }, 5: { getValue: function getValue(t, e, i) {\\n          return t.getUint32(e, i) / t.getUint32(e + 4, i);\\n        }, size: 8 }, 9: { getValue: function getValue(t, e, i) {\\n          return t.getInt32(e, i);\\n        }, size: 4 }, 10: { getValue: function getValue(t, e, i) {\\n          return t.getInt32(e, i) / t.getInt32(e + 4, i);\\n        }, size: 8 } }, n.exifTagTypes[7] = n.exifTagTypes[1], n.getExifValue = function (t, e, i, o, a, r) {\\n      var s,\\n          h,\\n          u,\\n          l,\\n          p,\\n          c,\\n          d = n.exifTagTypes[o];if (d && (s = d.size * a, h = s > 4 ? e + t.getUint32(i + 8, r) : i + 8, !(h + s > t.byteLength))) {\\n        if (1 === a) return d.getValue(t, h, r);for (u = [], l = 0; l < a; l += 1) {\\n          u[l] = d.getValue(t, h + l * d.size, r);\\n        }if (d.ascii) {\\n          for (p = \\\"\\\", l = 0; l < u.length && (c = u[l], \\\"\\\\0\\\" !== c); l += 1) {\\n            p += c;\\n          }return p;\\n        }return u;\\n      }\\n    }, n.parseExifTag = function (t, e, i, o, a) {\\n      var r = t.getUint16(i, o);a.exif[r] = n.getExifValue(t, e, i, t.getUint16(i + 2, o), t.getUint32(i + 4, o), o);\\n    }, n.parseExifTags = function (t, e, i, n, o) {\\n      var a, r, s;if (!(i + 6 > t.byteLength || (a = t.getUint16(i, n), r = i + 2 + 12 * a, r + 4 > t.byteLength))) {\\n        for (s = 0; s < a; s += 1) {\\n          this.parseExifTag(t, e, i + 2 + 12 * s, n, o);\\n        }return t.getUint32(r, n);\\n      }\\n    }, n.parseExifData = function (t, e, i, o, a) {\\n      if (!a.disableExif) {\\n        var r,\\n            s,\\n            h,\\n            u = e + 10;if (1165519206 === t.getUint32(e + 4) && !(u + 8 > t.byteLength) && 0 === t.getUint16(e + 8)) {\\n          switch (t.getUint16(u)) {case 18761:\\n              r = !0;break;case 19789:\\n              r = !1;break;default:\\n              return;}42 === t.getUint16(u + 2, r) && (s = t.getUint32(u + 4, r), o.exif = new n.ExifMap(), s = n.parseExifTags(t, u, u + s, r, o), s && !a.disableExifThumbnail && (h = { exif: {} }, s = n.parseExifTags(t, u, u + s, r, h), h.exif[513] && (o.exif.Thumbnail = n.getExifThumbnail(t, u + h.exif[513], h.exif[514]))), o.exif[34665] && !a.disableExifSub && n.parseExifTags(t, u, u + o.exif[34665], r, o), o.exif[34853] && !a.disableExifGps && n.parseExifTags(t, u, u + o.exif[34853], r, o));\\n        }\\n      }\\n    }, n.metaDataParsers.jpeg[65505].push(n.parseExifData);var u = function () {\\n      var t = [],\\n          i = [],\\n          n = [],\\n          o = \\\"transform\\\",\\n          a = window.getComputedStyle(document.documentElement, \\\"\\\"),\\n          r = (Array.prototype.slice.call(a).join(\\\"\\\").match(/-(moz|webkit|ms)-/) || \\\"\\\" === a.OLink && [\\\"\\\", \\\"o\\\"])[1];\\\"webkit\\\" === r && (o = \\\"webkitTransform\\\");var s = function s(t, i, n) {\\n        var o = t;if (o.length !== e) {\\n          for (var a = { chainers: [], then: function then(t) {\\n              return this.snabbt(t);\\n            }, snabbt: function snabbt(t) {\\n              var e = this.chainers.length;return this.chainers.forEach(function (i, n) {\\n                i.snabbt(h(t, n, e));\\n              }), a;\\n            }, setValue: function setValue(t) {\\n              return this.chainers.forEach(function (e) {\\n                e.setValue(t);\\n              }), a;\\n            }, finish: function finish() {\\n              return this.chainers.forEach(function (t) {\\n                t.finish();\\n              }), a;\\n            }, rollback: function rollback() {\\n              return this.chainers.forEach(function (t) {\\n                t.rollback();\\n              }), a;\\n            } }, r = 0, s = o.length; r < s; ++r) {\\n            \\\"string\\\" == typeof i ? a.chainers.push(u(o[r], i, h(n, r, s))) : a.chainers.push(u(o[r], h(i, r, s), n));\\n          }return a;\\n        }return \\\"string\\\" == typeof i ? u(o, i, h(n, 0, 1)) : u(o, h(i, 0, 1), n);\\n      },\\n          h = function h(t, e, i) {\\n        if (!t) return t;var n = $(t);J(t.delay) && (n.delay = t.delay(e, i)), J(t.callback) && (n.complete = function () {\\n          t.callback.call(this, e, i);\\n        });var o = J(t.allDone),\\n            a = J(t.complete);(a || o) && (n.complete = function () {\\n          a && t.complete.call(this, e, i), o && e == i - 1 && t.allDone();\\n        }), J(t.valueFeeder) && (n.valueFeeder = function (n, o) {\\n          return t.valueFeeder(n, o, e, i);\\n        }), J(t.easing) && (n.easing = function (n) {\\n          return t.easing(n, e, i);\\n        });var r = [\\\"position\\\", \\\"rotation\\\", \\\"skew\\\", \\\"rotationPost\\\", \\\"scale\\\", \\\"width\\\", \\\"height\\\", \\\"opacity\\\", \\\"fromPosition\\\", \\\"fromRotation\\\", \\\"fromSkew\\\", \\\"fromRotationPost\\\", \\\"fromScale\\\", \\\"fromWidth\\\", \\\"fromHeight\\\", \\\"fromOpacity\\\", \\\"transformOrigin\\\", \\\"duration\\\", \\\"delay\\\"];return r.forEach(function (o) {\\n          J(t[o]) && (n[o] = t[o](e, i));\\n        }), n;\\n      },\\n          u = function u(t, e, n) {\\n        function o(e) {\\n          if (f.tick(e), f.updateElement(t), !f.isStopped()) return f.completed() ? void (a.loop > 1 && !f.isStopped() ? (a.loop -= 1, f.restart(), k(o)) : (a.complete && a.complete.call(t), _.length && (a = _.pop(), s = y(a, u, !0), u = y(a, $(u)), a = w(s, u, a), f = S(a), i.push([t, f]), f.tick(e), k(o)))) : k(o);\\n        }if (\\\"attention\\\" === e) return l(t, n);if (\\\"stop\\\" === e) return p(t);if (\\\"detach\\\" === e) return d(t);var a = e;m();var r = v(t),\\n            s = r;s = y(a, s, !0);var u = $(r);u = y(a, u);var c = w(s, u, a),\\n            f = S(c);i.push([t, f]), f.updateElement(t, !0);var _ = [],\\n            g = { snabbt: function snabbt(t) {\\n            return _.unshift(h(t, 0, 1)), g;\\n          }, then: function then(t) {\\n            return this.snabbt(t);\\n          } };return k(o), a.manual ? f : g;\\n      },\\n          l = function l(t, e) {\\n        function n(i) {\\n          a.tick(i), a.updateElement(t), a.completed() ? (e.callback && e.callback(t), e.loop && e.loop > 1 && (e.loop--, a.restart(), k(n))) : k(n);\\n        }var o = y(e, q({}));e.movement = o;var a = E(e);i.push([t, a]), k(n);\\n      },\\n          p = function p(t) {\\n        for (var e = 0, n = i.length; e < n; ++e) {\\n          var o = i[e],\\n              a = o[0],\\n              r = o[1];a === t && r.stop();\\n        }\\n      },\\n          c = function c(t, e) {\\n        for (var i = 0, n = t.length; i < n; ++i) {\\n          if (t[i][0] === e) return i;\\n        }return -1;\\n      },\\n          d = function d(t) {\\n        var e,\\n            o,\\n            a = [],\\n            r = i.concat(n),\\n            s = r.length;for (o = 0; o < s; ++o) {\\n          e = r[o][0], (t.contains(e) || t === e) && a.push(e);\\n        }for (s = a.length, o = 0; o < s; ++o) {\\n          f(a[o]);\\n        }\\n      },\\n          f = function f(t) {\\n        p(t);var e = c(i, t);e >= 0 && i.splice(e, 1), e = c(n, t), e >= 0 && n.splice(e, 1);\\n      },\\n          _ = function _(t, e) {\\n        for (var i = 0, n = t.length; i < n; ++i) {\\n          var o = t[i],\\n              a = o[0],\\n              r = o[1];if (a === e) {\\n            var s = r.getCurrentState();return r.stop(), s;\\n          }\\n        }\\n      },\\n          m = function m() {\\n        n = n.filter(function (t) {\\n          return g(t[0]).body;\\n        });\\n      },\\n          g = function g(t) {\\n        for (var e = t; e.parentNode;) {\\n          e = e.parentNode;\\n        }return e;\\n      },\\n          v = function v(t) {\\n        var e = _(i, t);return e ? e : _(n, t);\\n      },\\n          y = function y(t, e, i) {\\n        e || (e = q({ position: [0, 0, 0], rotation: [0, 0, 0], rotationPost: [0, 0, 0], scale: [1, 1], skew: [0, 0] }));var n = \\\"position\\\",\\n            o = \\\"rotation\\\",\\n            a = \\\"skew\\\",\\n            r = \\\"rotationPost\\\",\\n            s = \\\"scale\\\",\\n            h = \\\"scalePost\\\",\\n            u = \\\"width\\\",\\n            l = \\\"height\\\",\\n            p = \\\"opacity\\\";return i && (n = \\\"fromPosition\\\", o = \\\"fromRotation\\\", a = \\\"fromSkew\\\", r = \\\"fromRotationPost\\\", s = \\\"fromScale\\\", h = \\\"fromScalePost\\\", u = \\\"fromWidth\\\", l = \\\"fromHeight\\\", p = \\\"fromOpacity\\\"), e.position = G(t[n], e.position), e.rotation = G(t[o], e.rotation), e.rotationPost = G(t[r], e.rotationPost), e.skew = G(t[a], e.skew), e.scale = G(t[s], e.scale), e.scalePost = G(t[h], e.scalePost), e.opacity = t[p], e.width = t[u], e.height = t[l], e;\\n      },\\n          w = function w(t, e, i) {\\n        return i.startState = t, i.endState = e, i;\\n      },\\n          b = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (t) {\\n        return setTimeout(t, 1e3 / 60);\\n      },\\n          k = function k(e) {\\n        0 === t.length && b(x), t.push(e);\\n      },\\n          x = function x(e) {\\n        for (var o = t.length, a = 0; a < o; ++a) {\\n          t[a](e);\\n        }t.splice(0, o);var r = i.filter(function (t) {\\n          return t[1].completed();\\n        });n = n.filter(function (t) {\\n          for (var e = 0, i = r.length; e < i; ++e) {\\n            if (t[0] === r[e][0]) return !1;\\n          }return !0;\\n        }), n = n.concat(r), i = i.filter(function (t) {\\n          return !t[1].completed();\\n        }), 0 !== t.length && b(x);\\n      },\\n          S = function S(t) {\\n        var i = t.startState,\\n            n = t.endState,\\n            o = G(t.duration, 500),\\n            a = G(t.delay, 0),\\n            r = t.perspective,\\n            s = L(G(t.easing, \\\"linear\\\"), t),\\n            h = 0 === o ? n.clone() : i.clone();t.transformOrigin;h.transformOrigin = t.transformOrigin;var u,\\n            l,\\n            p = 0,\\n            c = 0,\\n            d = !1,\\n            f = !1,\\n            _ = t.manual,\\n            m = 0,\\n            g = a / o;return l = t.valueFeeder ? V(t.valueFeeder, i, n, h) : j(i, n, h), { stop: function stop() {\\n            d = !0;\\n          }, isStopped: function isStopped() {\\n            return d;\\n          }, finish: function finish(t) {\\n            _ = !1;var e = o * m;p = c - e, u = t, s.resetFrom = m;\\n          }, rollback: function rollback(t) {\\n            _ = !1, l.setReverse();var e = o * (1 - m);p = c - e, u = t, s.resetFrom = m;\\n          }, restart: function restart() {\\n            p = e, s.resetFrom(0);\\n          }, tick: function tick(t) {\\n            if (!d) {\\n              if (_) return c = t, void this.updateCurrentTransform();if (p || (p = t), t - p > a) {\\n                f = !0, c = t - a;var e = Math.min(Math.max(0, c - p), o);s.tick(e / o), this.updateCurrentTransform(), this.completed() && u && u();\\n              }\\n            }\\n          }, getCurrentState: function getCurrentState() {\\n            return h;\\n          }, setValue: function setValue(t) {\\n            f = !0, m = Math.min(Math.max(t, 1e-4), 1 + g);\\n          }, updateCurrentTransform: function updateCurrentTransform() {\\n            var t = s.getValue();if (_) {\\n              var e = Math.max(1e-5, m - g);s.tick(e), t = s.getValue();\\n            }l.tween(t);\\n          }, completed: function completed() {\\n            return !!d || 0 !== p && s.completed();\\n          }, updateElement: function updateElement(t, e) {\\n            if (f || e) {\\n              var i = l.asMatrix(),\\n                  n = l.getProperties();X(t, i, r), Y(t, n);\\n            }\\n          } };\\n      },\\n          E = function E(t) {\\n        var i = t.movement;t.initialVelocity = .1, t.equilibriumPosition = 0;var n = T(t),\\n            o = !1,\\n            a = i.position,\\n            r = i.rotation,\\n            s = i.rotationPost,\\n            h = i.scale,\\n            u = i.skew,\\n            l = q({ position: a ? [0, 0, 0] : e, rotation: r ? [0, 0, 0] : e, rotationPost: s ? [0, 0, 0] : e, scale: h ? [0, 0] : e, skew: u ? [0, 0] : e });return { stop: function stop() {\\n            o = !0;\\n          }, isStopped: function isStopped(t) {\\n            return o;\\n          }, tick: function tick(t) {\\n            o || n.equilibrium || (n.tick(), this.updateMovement());\\n          }, updateMovement: function updateMovement() {\\n            var t = n.getValue();a && (l.position[0] = i.position[0] * t, l.position[1] = i.position[1] * t, l.position[2] = i.position[2] * t), r && (l.rotation[0] = i.rotation[0] * t, l.rotation[1] = i.rotation[1] * t, l.rotation[2] = i.rotation[2] * t), s && (l.rotationPost[0] = i.rotationPost[0] * t, l.rotationPost[1] = i.rotationPost[1] * t, l.rotationPost[2] = i.rotationPost[2] * t), h && (l.scale[0] = 1 + i.scale[0] * t, l.scale[1] = 1 + i.scale[1] * t), u && (l.skew[0] = i.skew[0] * t, l.skew[1] = i.skew[1] * t);\\n          }, updateElement: function updateElement(t) {\\n            X(t, l.asMatrix()), Y(t, l.getProperties());\\n          }, getCurrentState: function getCurrentState() {\\n            return l;\\n          }, completed: function completed() {\\n            return n.equilibrium || o;\\n          }, restart: function restart() {\\n            n = T(t);\\n          } };\\n      },\\n          C = function C(t) {\\n        return t;\\n      },\\n          P = function P(t) {\\n        return (Math.cos(t * Math.PI + Math.PI) + 1) / 2;\\n      },\\n          M = function M(t) {\\n        return t * t;\\n      },\\n          R = function R(t) {\\n        return -Math.pow(t - 1, 2) + 1;\\n      },\\n          T = function T(t) {\\n        var e = G(t.startPosition, 0),\\n            i = G(t.equilibriumPosition, 1),\\n            n = G(t.initialVelocity, 0),\\n            o = G(t.springConstant, .8),\\n            a = G(t.springDeceleration, .9),\\n            r = G(t.springMass, 10),\\n            s = !1;return { tick: function tick(t) {\\n            if (0 !== t && !s) {\\n              var h = -(e - i) * o,\\n                  u = h / r;n += u, e += n, n *= a, Math.abs(e - i) < .001 && Math.abs(n) < .001 && (s = !0);\\n            }\\n          }, resetFrom: function resetFrom(t) {\\n            e = t, n = 0;\\n          }, getValue: function getValue() {\\n            return s ? i : e;\\n          }, completed: function completed() {\\n            return s;\\n          } };\\n      },\\n          I = { linear: C, ease: P, easeIn: M, easeOut: R },\\n          L = function L(t, e) {\\n        if (\\\"spring\\\" == t) return T(e);var i = t;J(t) || (i = I[t]);var n,\\n            o = i,\\n            a = 0;return { tick: function tick(t) {\\n            a = o(t), n = t;\\n          }, resetFrom: function resetFrom(t) {\\n            n = 0;\\n          }, getValue: function getValue() {\\n            return a;\\n          }, completed: function completed() {\\n            return n >= 1 && n;\\n          } };\\n      },\\n          O = function O(t, e, i, n) {\\n        t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 0, t[5] = 1, t[6] = 0, t[7] = 0, t[8] = 0, t[9] = 0, t[10] = 1, t[11] = 0, t[12] = e, t[13] = i, t[14] = n, t[15] = 1;\\n      },\\n          z = function z(t, e) {\\n        t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 0, t[5] = Math.cos(e), t[6] = -Math.sin(e), t[7] = 0, t[8] = 0, t[9] = Math.sin(e), t[10] = Math.cos(e), t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1;\\n      },\\n          D = function D(t, e) {\\n        t[0] = Math.cos(e), t[1] = 0, t[2] = Math.sin(e), t[3] = 0, t[4] = 0, t[5] = 1, t[6] = 0, t[7] = 0, t[8] = -Math.sin(e), t[9] = 0, t[10] = Math.cos(e), t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1;\\n      },\\n          A = function A(t, e) {\\n        t[0] = Math.cos(e), t[1] = -Math.sin(e), t[2] = 0, t[3] = 0, t[4] = Math.sin(e), t[5] = Math.cos(e), t[6] = 0, t[7] = 0, t[8] = 0, t[9] = 0, t[10] = 1, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1;\\n      },\\n          U = function U(t, e, i) {\\n        t[0] = 1, t[1] = Math.tan(e), t[2] = 0, t[3] = 0, t[4] = Math.tan(i), t[5] = 1, t[6] = 0, t[7] = 0, t[8] = 0, t[9] = 0, t[10] = 1, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1;\\n      },\\n          H = function H(t, e, i) {\\n        t[0] = e, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 0, t[5] = i, t[6] = 0, t[7] = 0, t[8] = 0, t[9] = 0, t[10] = 1, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1;\\n      },\\n          B = function B(t) {\\n        t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 0, t[5] = 1, t[6] = 0, t[7] = 0, t[8] = 0, t[9] = 0, t[10] = 1, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1;\\n      },\\n          N = function N(t, e) {\\n        e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[4] = t[4], e[5] = t[5], e[6] = t[6], e[7] = t[7], e[8] = t[8], e[9] = t[9], e[10] = t[10], e[11] = t[11], e[12] = t[12], e[13] = t[13], e[14] = t[14], e[15] = t[15];\\n      },\\n          F = function F() {\\n        var t = new Float32Array(16),\\n            e = new Float32Array(16),\\n            i = new Float32Array(16);return B(t), { data: t, asCSS: function asCSS() {\\n            for (var e = \\\"matrix3d(\\\", i = 0; i < 15; ++i) {\\n              e += Math.abs(t[i]) < 1e-4 ? \\\"0,\\\" : t[i].toFixed(10) + \\\",\\\";\\n            }return e += Math.abs(t[15]) < 1e-4 ? \\\"0)\\\" : t[15].toFixed(10) + \\\")\\\";\\n          }, clear: function clear() {\\n            B(t);\\n          }, translate: function translate(n, o, a) {\\n            return N(t, e), O(i, n, o, a), W(e, i, t), this;\\n          }, rotateX: function rotateX(n) {\\n            return N(t, e), z(i, n), W(e, i, t), this;\\n          }, rotateY: function rotateY(n) {\\n            return N(t, e), D(i, n), W(e, i, t), this;\\n          }, rotateZ: function rotateZ(n) {\\n            return N(t, e), A(i, n), W(e, i, t), this;\\n          }, scale: function scale(n, o) {\\n            return N(t, e), H(i, n, o), W(e, i, t), this;\\n          }, skew: function skew(n, o) {\\n            return N(t, e), U(i, n, o), W(e, i, t), this;\\n          } };\\n      },\\n          W = function W(t, e, i) {\\n        return i[0] = t[0] * e[0] + t[1] * e[4] + t[2] * e[8] + t[3] * e[12], i[1] = t[0] * e[1] + t[1] * e[5] + t[2] * e[9] + t[3] * e[13], i[2] = t[0] * e[2] + t[1] * e[6] + t[2] * e[10] + t[3] * e[14], i[3] = t[0] * e[3] + t[1] * e[7] + t[2] * e[11] + t[3] * e[15], i[4] = t[4] * e[0] + t[5] * e[4] + t[6] * e[8] + t[7] * e[12], i[5] = t[4] * e[1] + t[5] * e[5] + t[6] * e[9] + t[7] * e[13], i[6] = t[4] * e[2] + t[5] * e[6] + t[6] * e[10] + t[7] * e[14], i[7] = t[4] * e[3] + t[5] * e[7] + t[6] * e[11] + t[7] * e[15], i[8] = t[8] * e[0] + t[9] * e[4] + t[10] * e[8] + t[11] * e[12], i[9] = t[8] * e[1] + t[9] * e[5] + t[10] * e[9] + t[11] * e[13], i[10] = t[8] * e[2] + t[9] * e[6] + t[10] * e[10] + t[11] * e[14], i[11] = t[8] * e[3] + t[9] * e[7] + t[10] * e[11] + t[11] * e[15], i[12] = t[12] * e[0] + t[13] * e[4] + t[14] * e[8] + t[15] * e[12], i[13] = t[12] * e[1] + t[13] * e[5] + t[14] * e[9] + t[15] * e[13], i[14] = t[12] * e[2] + t[13] * e[6] + t[14] * e[10] + t[15] * e[14], i[15] = t[12] * e[3] + t[13] * e[7] + t[14] * e[11] + t[15] * e[15], i;\\n      },\\n          q = function q(t) {\\n        var i = F(),\\n            n = { opacity: e, width: e, height: e };return { position: t.position, rotation: t.rotation, rotationPost: t.rotationPost, skew: t.skew, scale: t.scale, scalePost: t.scalePost, opacity: t.opacity, width: t.width, height: t.height, clone: function clone() {\\n            return q({ position: this.position ? this.position.slice(0) : e, rotation: this.rotation ? this.rotation.slice(0) : e, rotationPost: this.rotationPost ? this.rotationPost.slice(0) : e, skew: this.skew ? this.skew.slice(0) : e, scale: this.scale ? this.scale.slice(0) : e, scalePost: this.scalePost ? this.scalePost.slice(0) : e, height: this.height, width: this.width, opacity: this.opacity });\\n          }, asMatrix: function asMatrix() {\\n            var t = i;return t.clear(), this.transformOrigin && t.translate(-this.transformOrigin[0], -this.transformOrigin[1], -this.transformOrigin[2]), this.scale && t.scale(this.scale[0], this.scale[1]), this.skew && t.skew(this.skew[0], this.skew[1]), this.rotation && (t.rotateX(this.rotation[0]), t.rotateY(this.rotation[1]), t.rotateZ(this.rotation[2])), this.position && t.translate(this.position[0], this.position[1], this.position[2]), this.rotationPost && (t.rotateX(this.rotationPost[0]), t.rotateY(this.rotationPost[1]), t.rotateZ(this.rotationPost[2])), this.scalePost && t.scale(this.scalePost[0], this.scalePost[1]), this.transformOrigin && t.translate(this.transformOrigin[0], this.transformOrigin[1], this.transformOrigin[2]), t;\\n          }, getProperties: function getProperties() {\\n            return n.opacity = this.opacity, n.width = this.width + \\\"px\\\", n.height = this.height + \\\"px\\\", n;\\n          } };\\n      },\\n          j = function j(t, i, n) {\\n        var o = t,\\n            a = i,\\n            r = n,\\n            s = a.position !== e,\\n            h = a.rotation !== e,\\n            u = a.rotationPost !== e,\\n            l = a.scale !== e,\\n            p = a.skew !== e,\\n            c = a.width !== e,\\n            d = a.height !== e,\\n            f = a.opacity !== e;return { tween: function tween(t) {\\n            if (s) {\\n              var e = a.position[0] - o.position[0],\\n                  i = a.position[1] - o.position[1],\\n                  n = a.position[2] - o.position[2];r.position[0] = o.position[0] + t * e, r.position[1] = o.position[1] + t * i, r.position[2] = o.position[2] + t * n;\\n            }if (h) {\\n              var _ = a.rotation[0] - o.rotation[0],\\n                  m = a.rotation[1] - o.rotation[1],\\n                  g = a.rotation[2] - o.rotation[2];r.rotation[0] = o.rotation[0] + t * _, r.rotation[1] = o.rotation[1] + t * m, r.rotation[2] = o.rotation[2] + t * g;\\n            }if (u) {\\n              var v = a.rotationPost[0] - o.rotationPost[0],\\n                  y = a.rotationPost[1] - o.rotationPost[1],\\n                  w = a.rotationPost[2] - o.rotationPost[2];r.rotationPost[0] = o.rotationPost[0] + t * v, r.rotationPost[1] = o.rotationPost[1] + t * y, r.rotationPost[2] = o.rotationPost[2] + t * w;\\n            }if (p) {\\n              var b = a.scale[0] - o.scale[0],\\n                  k = a.scale[1] - o.scale[1];r.scale[0] = o.scale[0] + t * b, r.scale[1] = o.scale[1] + t * k;\\n            }if (l) {\\n              var x = a.skew[0] - o.skew[0],\\n                  S = a.skew[1] - o.skew[1];r.skew[0] = o.skew[0] + t * x, r.skew[1] = o.skew[1] + t * S;\\n            }if (c) {\\n              var E = a.width - o.width;r.width = o.width + t * E;\\n            }if (d) {\\n              var C = a.height - o.height;r.height = o.height + t * C;\\n            }if (f) {\\n              var P = a.opacity - o.opacity;r.opacity = o.opacity + t * P;\\n            }\\n          }, asMatrix: function asMatrix() {\\n            return r.asMatrix();\\n          }, getProperties: function getProperties() {\\n            return r.getProperties();\\n          }, setReverse: function setReverse() {\\n            var t = o;o = a, a = t;\\n          } };\\n      },\\n          V = function V(t, i, n, o) {\\n        var a = t(0, F()),\\n            r = i,\\n            s = n,\\n            h = o,\\n            u = !1;return { tween: function tween(i) {\\n            u && (i = 1 - i), a.clear(), a = t(i, a);var n = s.width - r.width,\\n                o = s.height - r.height,\\n                l = s.opacity - r.opacity;s.width !== e && (h.width = r.width + i * n), s.height !== e && (h.height = r.height + i * o), s.opacity !== e && (h.opacity = r.opacity + i * l);\\n          }, asMatrix: function asMatrix() {\\n            return a;\\n          }, getProperties: function getProperties() {\\n            return h.getProperties();\\n          }, setReverse: function setReverse() {\\n            u = !0;\\n          } };\\n      },\\n          G = function G(t, e) {\\n        return \\\"undefined\\\" == typeof t ? e : t;\\n      },\\n          X = function X(t, e, i) {\\n        var n = \\\"\\\";i && (n = \\\"perspective(\\\" + i + \\\"px) \\\");var a = e.asCSS();t.style[o] = n + a;\\n      },\\n          Y = function Y(t, e) {\\n        for (var i in e) {\\n          t.style[i] = e[i];\\n        }\\n      },\\n          J = function J(t) {\\n        return \\\"function\\\" == typeof t;\\n      },\\n          $ = function $(t) {\\n        if (!t) return t;var e = {};for (var i in t) {\\n          e[i] = t[i];\\n        }return e;\\n      };return s.createMatrix = F, s.setElementTransform = X, s;\\n    }(),\\n        l = function () {\\n      function t(t, e, i, n, o) {\\n        if (\\\"string\\\" == typeof t) t = document.getElementById(t);else if (!t instanceof HTMLCanvasElement) return;var a,\\n            r = t.getContext(\\\"2d\\\");try {\\n          try {\\n            a = r.getImageData(e, i, n, o);\\n          } catch (s) {\\n            throw new Error(\\\"unable to access local image data: \\\" + s);\\n          }\\n        } catch (s) {\\n          throw new Error(\\\"unable to access image data: \\\" + s);\\n        }return a;\\n      }function e(e, n, o, a, r, s) {\\n        if (!(isNaN(s) || s < 1)) {\\n          s |= 0;var h = t(e, n, o, a, r);h = i(h, n, o, a, r, s), e.getContext(\\\"2d\\\").putImageData(h, n, o);\\n        }\\n      }function i(t, e, i, r, s, h) {\\n        var u,\\n            l,\\n            p,\\n            c,\\n            d,\\n            f,\\n            _,\\n            m,\\n            g,\\n            v,\\n            y,\\n            w,\\n            b,\\n            k,\\n            x,\\n            S,\\n            E,\\n            C,\\n            P,\\n            M,\\n            R,\\n            T,\\n            I,\\n            L,\\n            O = t.data,\\n            z = h + h + 1,\\n            D = r - 1,\\n            A = s - 1,\\n            U = h + 1,\\n            H = U * (U + 1) / 2,\\n            B = new n(),\\n            N = B;for (p = 1; p < z; p++) {\\n          if (N = N.next = new n(), p == U) var F = N;\\n        }N.next = B;var W = null,\\n            q = null;_ = f = 0;var j = o[h],\\n            V = a[h];for (l = 0; l < s; l++) {\\n          for (S = E = C = P = m = g = v = y = 0, w = U * (M = O[f]), b = U * (R = O[f + 1]), k = U * (T = O[f + 2]), x = U * (I = O[f + 3]), m += H * M, g += H * R, v += H * T, y += H * I, N = B, p = 0; p < U; p++) {\\n            N.r = M, N.g = R, N.b = T, N.a = I, N = N.next;\\n          }for (p = 1; p < U; p++) {\\n            c = f + ((D < p ? D : p) << 2), m += (N.r = M = O[c]) * (L = U - p), g += (N.g = R = O[c + 1]) * L, v += (N.b = T = O[c + 2]) * L, y += (N.a = I = O[c + 3]) * L, S += M, E += R, C += T, P += I, N = N.next;\\n          }for (W = B, q = F, u = 0; u < r; u++) {\\n            O[f + 3] = I = y * j >> V, 0 != I ? (I = 255 / I, O[f] = (m * j >> V) * I, O[f + 1] = (g * j >> V) * I, O[f + 2] = (v * j >> V) * I) : O[f] = O[f + 1] = O[f + 2] = 0, m -= w, g -= b, v -= k, y -= x, w -= W.r, b -= W.g, k -= W.b, x -= W.a, c = _ + ((c = u + h + 1) < D ? c : D) << 2, S += W.r = O[c], E += W.g = O[c + 1], C += W.b = O[c + 2], P += W.a = O[c + 3], m += S, g += E, v += C, y += P, W = W.next, w += M = q.r, b += R = q.g, k += T = q.b, x += I = q.a, S -= M, E -= R, C -= T, P -= I, q = q.next, f += 4;\\n          }_ += r;\\n        }for (u = 0; u < r; u++) {\\n          for (E = C = P = S = g = v = y = m = 0, f = u << 2, w = U * (M = O[f]), b = U * (R = O[f + 1]), k = U * (T = O[f + 2]), x = U * (I = O[f + 3]), m += H * M, g += H * R, v += H * T, y += H * I, N = B, p = 0; p < U; p++) {\\n            N.r = M, N.g = R, N.b = T, N.a = I, N = N.next;\\n          }for (d = r, p = 1; p <= h; p++) {\\n            f = d + u << 2, m += (N.r = M = O[f]) * (L = U - p), g += (N.g = R = O[f + 1]) * L, v += (N.b = T = O[f + 2]) * L, y += (N.a = I = O[f + 3]) * L, S += M, E += R, C += T, P += I, N = N.next, p < A && (d += r);\\n          }for (f = u, W = B, q = F, l = 0; l < s; l++) {\\n            c = f << 2, O[c + 3] = I = y * j >> V, I > 0 ? (I = 255 / I, O[c] = (m * j >> V) * I, O[c + 1] = (g * j >> V) * I, O[c + 2] = (v * j >> V) * I) : O[c] = O[c + 1] = O[c + 2] = 0, m -= w, g -= b, v -= k, y -= x, w -= W.r, b -= W.g, k -= W.b, x -= W.a, c = u + ((c = l + U) < A ? c : A) * r << 2, m += S += W.r = O[c], g += E += W.g = O[c + 1], v += C += W.b = O[c + 2], y += P += W.a = O[c + 3], W = W.next, w += M = q.r, b += R = q.g, k += T = q.b, x += I = q.a, S -= M, E -= R, C -= T, P -= I, q = q.next, f += r;\\n          }\\n        }return t;\\n      }function n() {\\n        this.r = 0, this.g = 0, this.b = 0, this.a = 0, this.next = null;\\n      }var o = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259],\\n          a = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];return e;\\n    }();HTMLCanvasElement.prototype.toBlob || Object.defineProperty(HTMLCanvasElement.prototype, \\\"toBlob\\\", { value: function value(t, e, i) {\\n        for (var n = atob(this.toDataURL(e, i).split(\\\",\\\")[1]), o = n.length, a = new Uint8Array(o), r = 0; r < o; r++) {\\n          a[r] = n.charCodeAt(r);\\n        }t(new Blob([a], { type: e || \\\"image/png\\\" }));\\n      } });var p = function () {\\n      function t(t, e) {\\n        for (var i = 0; i < e.length; i++) {\\n          var n = e[i];n.enumerable = n.enumerable || !1, n.configurable = !0, \\\"value\\\" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);\\n        }\\n      }return function (e, i, n) {\\n        return i && t(e.prototype, i), n && t(e, n), e;\\n      };\\n    }(),\\n        c = \\\"function\\\" == typeof Symbol && \\\"symbol\\\" == _typeof(Symbol.iterator) ? function (t) {\\n      return typeof t === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(t);\\n    } : function (t) {\\n      return t && \\\"function\\\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \\\"symbol\\\" : typeof t === \\\"undefined\\\" ? \\\"undefined\\\" : _typeof(t);\\n    },\\n        d = function d(t) {\\n      if (\\\"undefined\\\" == typeof t.dataset) {\\n        var e,\\n            i,\\n            n = {},\\n            o = t.attributes;for (e in o) {\\n          o.hasOwnProperty(e) && o[e].name && /^data-[a-z_\\\\-\\\\d]*$/i.test(o[e].name) && (i = f(o[e].name.substr(5)), n[i] = o[e].value);\\n        }return n;\\n      }return t.dataset;\\n    },\\n        f = function f(t) {\\n      return t.replace(/\\\\-./g, function (t) {\\n        return t.charAt(1).toUpperCase();\\n      });\\n    },\\n        _ = function _(t) {\\n      for (var e = [], i = Array.prototype.slice.call(t.attributes), n = i.length, o = 0; o < n; o++) {\\n        e.push({ name: i[o].name, value: i[o].value });\\n      }return e;\\n    },\\n        m = function m(t) {\\n      return { x: \\\"undefined\\\" == typeof t.offsetX ? t.layerX : t.offsetX, y: \\\"undefined\\\" == typeof t.offsetY ? t.layerY : t.offsetY };\\n    },\\n        g = function g(t, e) {\\n      var i,\\n          n = {},\\n          o = e || {};for (i in t) {\\n        t.hasOwnProperty(i) && (n[i] = \\\"undefined\\\" == typeof o[i] ? t[i] : o[i]);\\n      }return n;\\n    },\\n        v = { ESC: 27, RETURN: 13 },\\n        y = { DOWN: [\\\"touchstart\\\", \\\"pointerdown\\\", \\\"mousedown\\\"], MOVE: [\\\"touchmove\\\", \\\"pointermove\\\", \\\"mousemove\\\"], UP: [\\\"touchend\\\", \\\"touchcancel\\\", \\\"pointerup\\\", \\\"mouseup\\\"] },\\n        w = { jpeg: \\\"image/jpeg\\\", jpg: \\\"image/jpeg\\\", jpe: \\\"image/jpeg\\\", png: \\\"image/png\\\", gif: \\\"image/gif\\\", bmp: \\\"image/bmp\\\" },\\n        b = /(\\\\.png|\\\\.bmp|\\\\.gif|\\\\.jpg|\\\\.jpe|\\\\.jpg|\\\\.jpeg)$/,\\n        k = function k(t, e) {\\n      var i = document.createElement(t);return e && (i.className = e), i;\\n    },\\n        x = function x(t, e, i) {\\n      e.forEach(function (e) {\\n        t.addEventListener(e, i, !1);\\n      });\\n    },\\n        S = function S(t, e, i) {\\n      e.forEach(function (e) {\\n        t.removeEventListener(e, i, !1);\\n      });\\n    },\\n        E = function E(t) {\\n      var e = t.changedTouches ? t.changedTouches[0] : t;if (e) return { x: e.pageX, y: e.pageY };\\n    },\\n        C = function C(t, e) {\\n      var i = .5,\\n          n = .5,\\n          o = Math.PI / 180 * e,\\n          a = Math.cos(o),\\n          r = Math.sin(o),\\n          s = t.x,\\n          h = t.y,\\n          u = t.x + t.width,\\n          l = t.y + t.height,\\n          p = a * (s - i) + r * (h - n) + i,\\n          c = a * (h - n) - r * (s - i) + n,\\n          d = a * (u - i) + r * (l - n) + i,\\n          f = a * (l - n) - r * (u - i) + n;p <= d ? (t.x = p, t.width = d - p) : (t.x = d, t.width = p - d), c <= f ? (t.y = c, t.height = f - c) : (t.y = f, t.height = c - f);\\n    },\\n        P = function P(t) {\\n      var e = E(t);return e.x -= window.pageXOffset || document.documentElement.scrollLeft, e.y -= window.pageYOffset || document.documentElement.scrollTop, e;\\n    },\\n        M = function M(t) {\\n      return t.charAt(0).toLowerCase() + t.slice(1);\\n    },\\n        R = function R(t) {\\n      return t.charAt(0).toUpperCase() + t.slice(1);\\n    },\\n        T = function T(t) {\\n      return t[t.length - 1];\\n    },\\n        I = function I(t, e, i) {\\n      return Math.max(e, Math.min(i, t));\\n    },\\n        L = function L(t, e) {\\n      if (!e) return !1;for (var i = 0; i < e.length; i++) {\\n        if (e[i] === t) return !0;\\n      }return !1;\\n    },\\n        O = function O(t) {\\n      var i = arguments.length > 1 && arguments[1] !== e ? arguments[1] : \\\"POST\\\",\\n          n = arguments[2],\\n          o = arguments[3],\\n          a = arguments[4],\\n          r = arguments[5],\\n          s = arguments[6],\\n          h = new XMLHttpRequest();a && h.upload.addEventListener(\\\"progress\\\", function (t) {\\n        a(t.loaded, t.total);\\n      }), h.open(i, t, !0), o && o(h, n), h.onreadystatechange = function () {\\n        if (4 === h.readyState && h.status >= 200 && h.status < 300) {\\n          var t = h.responseText;if (!t.length) return void r();if (t.indexOf(\\\"Content-Length\\\") !== -1) return void s(\\\"file-too-big\\\");var e = void 0;try {\\n            e = JSON.parse(h.responseText);\\n          } catch (i) {}if (\\\"object\\\" === (\\\"undefined\\\" == typeof e ? \\\"undefined\\\" : c(e)) && \\\"failure\\\" === e.status) return void s(e.message);r(e || t);\\n        } else if (4 === h.readyState) {\\n          var n = void 0;try {\\n            n = JSON.parse(h.responseText);\\n          } catch (i) {}if (\\\"object\\\" === (\\\"undefined\\\" == typeof n ? \\\"undefined\\\" : c(n)) && \\\"failure\\\" === n.status) return void s(n.message);s(\\\"fail\\\");\\n        }\\n      }, h.send(n);\\n    },\\n        z = function z(t) {\\n      t && (t.style.webkitTransform = \\\"\\\", t.style.transform = \\\"\\\");\\n    },\\n        D = function D(t) {\\n      return t / 1e6;\\n    },\\n        A = function A() {\\n      var t = [],\\n          e = void 0,\\n          i = void 0;for (e in w) {\\n        w.hasOwnProperty(e) && (i = w[e], t.indexOf(i) == -1 && t.push(i));\\n      }return t;\\n    },\\n        U = function U(t) {\\n      return \\\"image/jpeg\\\" === t;\\n    },\\n        H = function H(t) {\\n      var e = void 0;for (e in w) {\\n        if (w.hasOwnProperty(e) && w[e] === t) return e;\\n      }return t;\\n    },\\n        B = function B(t) {\\n      var e = void 0;for (e in w) {\\n        if (w.hasOwnProperty(e) && t.indexOf(w[e]) !== -1) return w[e];\\n      }return null;\\n    },\\n        N = function N(t) {\\n      return t.split(\\\"/\\\").pop().split(\\\"?\\\").shift();\\n    },\\n        F = function F(t) {\\n      var i = arguments.length > 1 && arguments[1] !== e ? arguments[1] : \\\"\\\";return (i + t).slice(-i.length);\\n    },\\n        W = function W(t) {\\n      return t.getFullYear() + \\\"-\\\" + F(t.getMonth() + 1, \\\"00\\\") + \\\"-\\\" + F(t.getDate(), \\\"00\\\") + \\\"_\\\" + F(t.getHours(), \\\"00\\\") + \\\"-\\\" + F(t.getMinutes(), \\\"00\\\") + \\\"-\\\" + F(t.getSeconds(), \\\"00\\\");\\n    },\\n        q = function q(t) {\\n      return \\\"undefined\\\" == typeof t.name ? W(new Date()) + \\\".\\\" + H(j(t)) : t.name;\\n    },\\n        j = function j(t) {\\n      return t.type || \\\"image/jpeg\\\";\\n    },\\n        V = function V(t) {\\n      if (\\\"string\\\" != typeof t) return W(new Date());var e = N(t);return e.split(\\\".\\\").shift();\\n    },\\n        G = function G(t, e) {\\n      return \\\"lastModified\\\" in File.prototype ? t.lastModified = new Date() : t.lastModifiedDate = new Date(), t.name = e, t;\\n    },\\n        X = function X(t) {\\n      return (/^data:image/.test(t)\\n      );\\n    },\\n        Y = function Y(t, e, i, n, o, a) {\\n      t = \\\"\\\" + t + (t.indexOf(\\\"?\\\") !== -1 ? \\\"&\\\" : \\\"?\\\") + \\\"url=\\\" + n;var r = new XMLHttpRequest();r.open(\\\"GET\\\", t, !0), e(r), r.responseType = \\\"json\\\", r.onload = function () {\\n        return \\\"failure\\\" === this.response.status ? void o(this.response.message) : void J(this.response.body, i, a);\\n      }, r.send();\\n    },\\n        J = function J(t, e, i, n) {\\n      var o = new XMLHttpRequest();o.open(\\\"GET\\\", t, !0), e(o), o.responseType = \\\"blob\\\", o.onload = function (e) {\\n        if (o.status >= 200 && o.status < 300) {\\n          var a = N(t),\\n              r = B(this.response.type);b.test(a) || (a += \\\".\\\" + H(r));var s = G(this.response, a);i(gt(s, r));\\n        } else n(o.status + \\\": \\\" + o.statusText);\\n      }, o.onerror = function () {\\n        n();\\n      }, o.send();\\n    },\\n        $ = function $(t) {\\n      var e = t.split(\\\",\\\")[1],\\n          i = e.replace(/\\\\s/g, \\\"\\\");return atob(i);\\n    },\\n        Z = function Z(t, e) {\\n      for (var i = $(t), n = new ArrayBuffer(i.length), o = new Uint8Array(n), a = 0; a < i.length; a++) {\\n        o[a] = i.charCodeAt(a);\\n      }var r = wt(t);return \\\"undefined\\\" == typeof e && (e = W(new Date()) + \\\".\\\" + H(r)), G(K(n, r), e);\\n    },\\n        K = function K(t, e) {\\n      var i = window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;if (i) {\\n        var n = new i();return n.append(t), n.getBlob(e);\\n      }return new Blob([t], { type: e });\\n    },\\n        Q = function Q(t, e, i) {\\n      var o = \\\"string\\\" != typeof t || 0 !== t.indexOf(\\\"data:image\\\");n.parseMetaData(t, function (a) {\\n        var r = { canvas: !0, crossOrigin: o };e && (r.maxWidth = e.width, r.maxHeight = e.height), a.exif && (r.orientation = a.exif.get(\\\"Orientation\\\")), n(t, function (t) {\\n          return \\\"error\\\" === t.type ? void i() : void i(t, a);\\n        }, r);\\n      });\\n    },\\n        tt = function tt(t, e, i) {\\n      var n,\\n          o,\\n          a,\\n          r,\\n          s = e / t;return s < i ? (r = e, a = r / i, n = .5 * (t - a), o = 0) : (a = t, r = a * i, n = 0, o = .5 * (e - r)), { x: n, y: o, height: r, width: a };\\n    },\\n        et = function et(t) {\\n      var n = arguments.length > 1 && arguments[1] !== e ? arguments[1] : {},\\n          o = arguments[2],\\n          a = k(\\\"canvas\\\"),\\n          r = n.rotation,\\n          s = n.crop,\\n          h = n.size,\\n          u = n.filters,\\n          l = n.minSize;if (s) {\\n        var p = r % 180 !== 0,\\n            c = { width: p ? t.height : t.width, height: p ? t.width : t.height };s.x < 0 && (s.x = 0), s.y < 0 && (s.y = 0), s.width > c.width && (s.width = c.width), s.height > c.height && (s.height = c.height), s.y + s.height > c.height && (s.y = Math.max(0, c.height - s.height)), s.x + s.width > c.width && (s.x = Math.max(0, c.width - s.width));var d = s.x / c.width,\\n            f = s.y / c.height,\\n            _ = s.width / c.width,\\n            m = s.height / c.height;a.width = s.width, a.height = s.height;var g = a.getContext(\\\"2d\\\");90 === r ? (g.translate(.5 * a.width, .5 * a.height), g.rotate(-90 * Math.PI / 180), g.drawImage(t, (1 - f) * t.width - t.width * m, s.x, s.height, s.width, .5 * -a.height, .5 * -a.width, a.height, a.width)) : 180 === r ? (g.translate(.5 * a.width, .5 * a.height), g.rotate(-180 * Math.PI / 180), g.drawImage(t, (1 - (d + _)) * c.width, (1 - (f + m)) * c.height, _ * c.width, m * c.height, .5 * -a.width, .5 * -a.height, a.width, a.height)) : 270 === r ? (g.translate(.5 * a.width, .5 * a.height), g.rotate(-270 * Math.PI / 180), g.drawImage(t, s.y, (1 - d) * t.height - t.height * _, s.height, s.width, .5 * -a.height, .5 * -a.width, a.height, a.width)) : g.drawImage(t, s.x, s.y, s.width, s.height, 0, 0, a.width, a.height);\\n      }if (h) {\\n        var v = h.width / a.width,\\n            y = h.height / a.height,\\n            w = Math.min(v, y);i(a, w, h, l), u.sharpen > 0 && nt(a, at(u.sharpen));\\n      }o(a);\\n    },\\n        it = function it(t) {\\n      var e = t.getContext(\\\"2d\\\");return e.getImageData(0, 0, t.width, t.height);\\n    },\\n        nt = function nt(t, e) {\\n      var i = t.getContext(\\\"2d\\\");i.putImageData(e(it(t), t.width, t.height), 0, 0);\\n    },\\n        ot = function ot(t, e, i) {\\n      var n = document.createElement(\\\"canvas\\\");n.width = t, n.height = e;var o = n.getContext(\\\"2d\\\"),\\n          a = o.createImageData(n.width, n.height);return i && a.set(i.data), a;\\n    },\\n        at = function at(t) {\\n      return function (e, i, n) {\\n        for (var o = [0, -1, 0, -1, 5, -1, 0, -1, 0], a = Math.round(Math.sqrt(o.length)), r = .5 * a | 0, s = ot(i, n), h = s.data, u = e.data, l = n, p = void 0; l--;) {\\n          for (p = i; p--;) {\\n            for (var c = l, d = p, f = 4 * (l * i + p), _ = 0, m = 0, g = 0, v = 0, y = 0; y < a; y++) {\\n              for (var w = 0; w < a; w++) {\\n                var b = c + y - r,\\n                    k = d + w - r;if (b >= 0 && b < n && k >= 0 && k < i) {\\n                  var x = 4 * (b * i + k),\\n                      S = o[y * a + w];_ += u[x] * S, m += u[x + 1] * S, g += u[x + 2] * S, v += u[x + 3] * S;\\n                }\\n              }\\n            }h[f] = _ * t + u[f] * (1 - t), h[f + 1] = m * t + u[f + 1] * (1 - t), h[f + 2] = g * t + u[f + 2] * (1 - t), h[f + 3] = u[f + 3];\\n          }\\n        }return s;\\n      };\\n    },\\n        rt = function rt(t, e) {\\n      var i = Math.abs(t.width - e.width),\\n          n = Math.abs(t.height - e.height);return Math.max(i, n);\\n    },\\n        st = function st(t) {\\n      return ht(t, 1);\\n    },\\n        ht = function ht(t, e) {\\n      if (!t) return null;var n = document.createElement(\\\"canvas\\\"),\\n          o = n.getContext(\\\"2d\\\");return n.width = t.width, n.height = t.height, o.drawImage(t, 0, 0), e > 0 && 1 !== e && i(n, e, { width: Math.round(t.width * e), height: Math.round(t.height * e) }, { width: 0, height: 0 }), n;\\n    },\\n        ut = function ut(t) {\\n      return t.width && t.height;\\n    },\\n        lt = function lt(t, e) {\\n      var i = e.getContext(\\\"2d\\\");ut(e) ? i.drawImage(t, 0, 0, e.width, e.height) : (e.width = t.width, e.height = t.height, i.drawImage(t, 0, 0));\\n    },\\n        pt = function pt(t) {\\n      l(t, 0, 0, t.width, t.height, 3);\\n    },\\n        ct = function ct(t, e) {\\n      return parseInt(t.width, 10) >= e.width && parseInt(t.height, 10) >= e.height;\\n    },\\n        dt = function dt(t, e, i) {\\n      return { x: t.x * e, y: t.y * i, width: t.width * e, height: t.height * i };\\n    },\\n        ft = function ft(t, e, i) {\\n      return { x: t.x / e, y: t.y / i, width: t.width / e, height: t.height / i };\\n    },\\n        _t = function _t(t) {\\n      if (t && \\\"\\\" !== t.value) {\\n        try {\\n          t.value = \\\"\\\";\\n        } catch (e) {}if (t.value) {\\n          var i = document.createElement(\\\"form\\\"),\\n              n = t.parentNode,\\n              o = t.nextSibling;i.appendChild(t), i.reset(), o ? n.insertBefore(t, o) : n.appendChild(t);\\n        }\\n      }\\n    },\\n        mt = function mt(t) {\\n      return \\\"object\\\" === (\\\"undefined\\\" == typeof value ? \\\"undefined\\\" : c(value)) && null !== value ? JSON.parse(JSON.stringify(t)) : t;\\n    },\\n        gt = function gt(t) {\\n      var i = arguments.length > 1 && arguments[1] !== e ? arguments[1] : null;if (!t) return null;var n = t.slice(0, t.size, i || t.type);return n.name = t.name, \\\"lastModified\\\" in File.prototype && t.lastModified ? n.lastModified = new Date(t.lastModified) : t.lastModifiedDate && (n.lastModifiedDate = new Date(t.lastModifiedDate)), n;\\n    },\\n        vt = function vt(t) {\\n      var e = mt(t);return e.input.file = gt(t.input.file), e.output.image = st(t.output.image), e;\\n    },\\n        yt = function yt(t, i, n) {\\n      return t && i ? t.toDataURL(i, U(i) && \\\"number\\\" == typeof n ? n / 100 : e) : null;\\n    },\\n        wt = function wt(t) {\\n      if (!t) return null;var e = t.substr(0, 16).match(/^.+;/);return e.length ? e[0].substring(5, e[0].length - 1) : null;\\n    },\\n        bt = function bt(t) {\\n      var i = arguments.length > 1 && arguments[1] !== e ? arguments[1] : [],\\n          n = arguments[2],\\n          o = arguments[3],\\n          a = arguments[4],\\n          r = { server: mt(t.server), meta: mt(t.meta), input: { name: t.input.name, type: t.input.type, size: t.input.size, width: t.input.width, height: t.input.height, field: t.input.field } };return L(\\\"input\\\", i) && !a && (r.input.image = yt(t.input.image, t.input.type)), L(\\\"output\\\", i) && (r.output = { name: o ? V(t.input.name) + \\\".\\\" + o : t.input.name, type: w[o] || t.input.type, width: t.output.width, height: t.output.height }, r.output.image = yt(t.output.image, r.output.type, n), r.output.type = wt(r.output.image), \\\"image/png\\\" === r.output.type && (r.output.name = V(r.input.name) + \\\".png\\\")), L(\\\"actions\\\", i) && (r.actions = mt(t.actions)), r;\\n    },\\n        kt = function kt(t, i, n) {\\n      var o = t.output.image,\\n          a = n ? V(t.input.name) + \\\".\\\" + n : t.input.name,\\n          r = w[n] || t.input.type;\\\"image/png\\\" === r && (a = V(t.input.name) + \\\".png\\\"), o.toBlob(function (t) {\\n        if (\\\"msSaveBlob\\\" in window.navigator) return void window.navigator.msSaveBlob(t, a);var e = (window.URL || window.webkitURL).createObjectURL(t),\\n            i = k(\\\"a\\\");i.style.display = \\\"none\\\", i.download = a, i.href = e, document.body.appendChild(i), i.click(), setTimeout(function () {\\n          document.body.removeChild(i), (window.URL || window.webkitURL).revokeObjectURL(e);\\n        }, 0);\\n      }, r, \\\"number\\\" == typeof i ? i / 100 : e);\\n    },\\n        xt = function xt(t, e, i) {\\n      var n = i.querySelector(t);n && (n.style.display = e ? \\\"\\\" : \\\"none\\\");\\n    },\\n        St = function St(t) {\\n      return Array.prototype.slice.call(t);\\n    },\\n        Et = function Et(t) {\\n      t.parentNode.removeChild(t);\\n    },\\n        Ct = function Ct(t) {\\n      var e = k(\\\"div\\\");return t.parentNode && (t.nextSibling ? t.parentNode.insertBefore(e, t.nextSibling) : t.parentNode.appendChild(e)), e.appendChild(t), e;\\n    },\\n        Pt = function Pt(t, e, i, n) {\\n      var o = (n - 90) * Math.PI / 180;return { x: t + i * Math.cos(o), y: e + i * Math.sin(o) };\\n    },\\n        Mt = function Mt(t, e, i, n, o) {\\n      var a = Pt(t, e, i, o),\\n          r = Pt(t, e, i, n),\\n          s = o - n <= 180 ? \\\"0\\\" : \\\"1\\\",\\n          h = [\\\"M\\\", a.x, a.y, \\\"A\\\", i, i, 0, s, 0, r.x, r.y].join(\\\" \\\");return h;\\n    },\\n        Rt = function Rt(t, e, i, n) {\\n      return Mt(t, e, i, 0, 360 * n);\\n    },\\n        Tt = function () {\\n      var i = { n: function n(t, e, i, _n) {\\n          var o, a, r, s, h, u, l, p;return r = t.y + t.height, o = I(e.y, 0, r), r - o < i.min.height && (o = r - i.min.height), h = _n ? (r - o) / _n : t.width, h < i.min.width && (h = i.min.width, o = r - h * _n), l = .5 * (h - t.width), s = t.x - l, a = t.x + t.width + l, (s < 0 || Math.round(a) > Math.round(i.width)) && (p = Math.min(t.x, i.width - (t.x + t.width)), s = t.x - p, a = t.x + t.width + p, h = a - s, u = h * _n, o = r - u), { x: s, y: o, width: a - s, height: r - o };\\n        }, s: function s(t, e, i, n) {\\n          var o, a, r, s, h, u, l, p;return o = t.y, r = I(e.y, o, i.height), r - o < i.min.height && (r = o + i.min.height), h = n ? (r - o) / n : t.width, h < i.min.width && (h = i.min.width, r = o + h * n), l = .5 * (h - t.width), s = t.x - l, a = t.x + t.width + l, (s < 0 || Math.round(a) > Math.round(i.width)) && (p = Math.min(t.x, i.width - (t.x + t.width)), s = t.x - p, a = t.x + t.width + p, h = a - s, u = h * n, r = o + u), { x: s, y: o, width: a - s, height: r - o };\\n        }, e: function e(t, _e, i, n) {\\n          var o, a, r, s, h, u, l, p;return s = t.x, a = I(_e.x, s, i.width), a - s < i.min.width && (a = s + i.min.width), u = n ? (a - s) * n : t.height, u < i.min.height && (u = i.min.height, a = s + u / n), l = .5 * (u - t.height), o = t.y - l, r = t.y + t.height + l, (o < 0 || Math.round(r) > Math.round(i.height)) && (p = Math.min(t.y, i.height - (t.y + t.height)), o = t.y - p, r = t.y + t.height + p, u = r - o, h = u / n, a = s + h), { x: s, y: o, width: a - s, height: r - o };\\n        }, w: function n(t, e, i, o) {\\n          var a, r, s, h, n, u, l, p;return r = t.x + t.width, h = I(e.x, 0, r), r - h < i.min.width && (h = r - i.min.width), u = o ? (r - h) * o : t.height, u < i.min.height && (u = i.min.height, h = r - u / o), l = .5 * (u - t.height), a = t.y - l, s = t.y + t.height + l, (a < 0 || Math.round(s) > Math.round(i.height)) && (p = Math.min(t.y, i.height - (t.y + t.height)), a = t.y - p, s = t.y + t.height + p, u = s - a, n = u / o, h = r - n), { x: h, y: a, width: r - h, height: s - a };\\n        }, ne: function ne(t, e, i, n) {\\n          var o, a, r, s, h, u, l;return s = t.x, r = t.y + t.height, a = I(e.x, s, i.width), a - s < i.min.width && (a = s + i.min.width), u = n ? (a - s) * n : I(r - e.y, i.min.height, r), u < i.min.height && (u = i.min.height, a = s + u / n), o = t.y - (u - t.height), (o < 0 || Math.round(r) > Math.round(i.height)) && (l = Math.min(t.y, i.height - (t.y + t.height)), o = t.y - l, u = r - o, h = u / n, a = s + h), { x: s, y: o, width: a - s, height: r - o };\\n        }, se: function se(t, e, i, n) {\\n          var o, a, r, s, h, u, l;return s = t.x, o = t.y, a = I(e.x, s, i.width), a - s < i.min.width && (a = s + i.min.width), u = n ? (a - s) * n : I(e.y - t.y, i.min.height, i.height - o), u < i.min.height && (u = i.min.height, a = s + u / n), r = t.y + t.height + (u - t.height), (o < 0 || Math.round(r) > Math.round(i.height)) && (l = Math.min(t.y, i.height - (t.y + t.height)), r = t.y + t.height + l, u = r - o, h = u / n, a = s + h), { x: s, y: o, width: a - s, height: r - o };\\n        }, sw: function sw(t, e, i, n) {\\n          var o, a, r, s, h, u, l;return a = t.x + t.width, o = t.y, s = I(e.x, 0, a), a - s < i.min.width && (s = a - i.min.width), u = n ? (a - s) * n : I(e.y - t.y, i.min.height, i.height - o), u < i.min.height && (u = i.min.height, s = a - u / n), r = t.y + t.height + (u - t.height), (o < 0 || Math.round(r) > Math.round(i.height)) && (l = Math.min(t.y, i.height - (t.y + t.height)), r = t.y + t.height + l, u = r - o, h = u / n, s = a - h), { x: s, y: o, width: a - s, height: r - o };\\n        }, nw: function nw(t, e, i, n) {\\n          var o, a, r, s, h, u, l;return a = t.x + t.width, r = t.y + t.height, s = I(e.x, 0, a), a - s < i.min.width && (s = a - i.min.width), u = n ? (a - s) * n : I(r - e.y, i.min.height, r), u < i.min.height && (u = i.min.height, s = a - u / n), o = t.y - (u - t.height), (o < 0 || Math.round(r) > Math.round(i.height)) && (l = Math.min(t.y, i.height - (t.y + t.height)), o = t.y - l, u = r - o, h = u / n, s = a - h), { x: s, y: o, width: a - s, height: r - o };\\n        } };return function () {\\n        function n() {\\n          var i = arguments.length > 0 && arguments[0] !== e ? arguments[0] : document.createElement(\\\"div\\\");t(this, n), this._element = i, this._interaction = null, this._minWidth = 1, this._minHeight = 1, this._ratio = null, this._rect = { x: 0, y: 0, width: 0, height: 0 }, this._space = { width: 0, height: 0 }, this._rectChanged = !1, this._init();\\n        }return p(n, [{ key: \\\"_init\\\", value: function value() {\\n            this._element.className = \\\"slim-crop-area\\\";var t = k(\\\"div\\\", \\\"grid\\\");this._element.appendChild(t);for (var e in i) {\\n              if (i.hasOwnProperty(e)) {\\n                var n = k(\\\"button\\\", e);this._element.appendChild(n);\\n              }\\n            }var o = k(\\\"button\\\", \\\"c\\\");this._element.appendChild(o), x(document, y.DOWN, this);\\n          } }, { key: \\\"reset\\\", value: function value() {\\n            this._interaction = null, this._rect = { x: 0, y: 0, width: 0, height: 0 }, this._rectChanged = !0, this._redraw(), this._element.dispatchEvent(new CustomEvent(\\\"change\\\"));\\n          } }, { key: \\\"rescale\\\", value: function value(t) {\\n            1 !== t && (this._interaction = null, this._rectChanged = !0, this._rect.x *= t, this._rect.y *= t, this._rect.width *= t, this._rect.height *= t, this._redraw(), this._element.dispatchEvent(new CustomEvent(\\\"change\\\")));\\n          } }, { key: \\\"limit\\\", value: function value(t, e) {\\n            this._space.width = t, this._space.height = e;\\n          } }, { key: \\\"offset\\\", value: function value(t, e) {\\n            this._space.x = t, this._space.y = e;\\n          } }, { key: \\\"resize\\\", value: function value(t, e, i, n) {\\n            this._interaction = null, this._rect = { x: I(t, 0, this._space.width - this._minWidth), y: I(e, 0, this._space.height - this._minHeight), width: I(i, this._minWidth, this._space.width), height: I(n, this._minHeight, this._space.height) }, this._rectChanged = !0, this._redraw(), this._element.dispatchEvent(new CustomEvent(\\\"change\\\"));\\n          } }, { key: \\\"handleEvent\\\", value: function value(t) {\\n            switch (t.type) {case \\\"touchstart\\\":case \\\"pointerdown\\\":case \\\"mousedown\\\":\\n                this._onStartDrag(t);break;case \\\"touchmove\\\":case \\\"pointermove\\\":case \\\"mousemove\\\":\\n                this._onDrag(t);break;case \\\"touchend\\\":case \\\"touchcancel\\\":case \\\"pointerup\\\":case \\\"mouseup\\\":\\n                this._onStopDrag(t);}\\n          } }, { key: \\\"_onStartDrag\\\", value: function value(t) {\\n            this._element.contains(t.target) && (t.preventDefault(), x(document, y.MOVE, this), x(document, y.UP, this), this._interaction = { type: t.target.className, offset: P(t) }, this._interaction.offset.x -= this._rect.x, this._interaction.offset.y -= this._rect.y, this._element.setAttribute(\\\"data-dragging\\\", \\\"true\\\"), this._redraw());\\n          } }, { key: \\\"_onDrag\\\", value: function value(t) {\\n            t.preventDefault();var e = P(t),\\n                n = this._interaction.type;\\\"c\\\" === n ? (this._rect.x = I(e.x - this._interaction.offset.x, 0, this._space.width - this._rect.width), this._rect.y = I(e.y - this._interaction.offset.y, 0, this._space.height - this._rect.height)) : i[n] && (this._rect = i[n](this._rect, { x: e.x - this._space.x, y: e.y - this._space.y }, { x: 0, y: 0, width: this._space.width, height: this._space.height, min: { width: this._minWidth, height: this._minHeight } }, this._ratio)), this._rectChanged = !0, this._element.dispatchEvent(new CustomEvent(\\\"input\\\"));\\n          } }, { key: \\\"_onStopDrag\\\", value: function value(t) {\\n            t.preventDefault(), S(document, y.MOVE, this), S(document, y.UP, this), this._interaction = null, this._element.setAttribute(\\\"data-dragging\\\", \\\"false\\\"), this._element.dispatchEvent(new CustomEvent(\\\"change\\\"));\\n          } }, { key: \\\"_redraw\\\", value: function value() {\\n            var t = this;if (this._rectChanged) {\\n              var e = \\\"translate(\\\" + this._rect.x + \\\"px,\\\" + this._rect.y + \\\"px);\\\";this._element.style.cssText = \\\"\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t-webkit-transform: \\\" + e + \\\";\\\\n\\\\t\\\\t\\\\t\\\\t\\\\ttransform: \\\" + e + \\\";\\\\n\\\\t\\\\t\\\\t\\\\t\\\\twidth:\\\" + this._rect.width + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\theight:\\\" + this._rect.height + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\\t\\\", this._rectChanged = !1;\\n            }this._interaction && requestAnimationFrame(function () {\\n              return t._redraw();\\n            });\\n          } }, { key: \\\"destroy\\\", value: function value() {\\n            this._interaction = !1, this._rectChanged = !1, S(document, y.DOWN, this), S(document, y.MOVE, this), S(document, y.UP, this), Et(this._element);\\n          } }, { key: \\\"element\\\", get: function get() {\\n            return this._element;\\n          } }, { key: \\\"space\\\", get: function get() {\\n            return this._space;\\n          } }, { key: \\\"area\\\", get: function get() {\\n            var t = this._rect.x / this._space.width,\\n                e = this._rect.y / this._space.height,\\n                i = this._rect.width / this._space.width,\\n                n = this._rect.height / this._space.height;return { x: t, y: e, width: i, height: n };\\n          } }, { key: \\\"dirty\\\", get: function get() {\\n            return 0 !== this._rect.x || 0 !== this._rect.y || 0 !== this._rect.width || 0 !== this._rect.height;\\n          } }, { key: \\\"minWidth\\\", set: function set(t) {\\n            this._minWidth = Math.max(t, 1);\\n          } }, { key: \\\"minHeight\\\", set: function set(t) {\\n            this._minHeight = Math.max(t, 1);\\n          } }, { key: \\\"ratio\\\", set: function set(t) {\\n            this._ratio = t;\\n          } }]), n;\\n      }();\\n    }(),\\n        It = function () {\\n      var i = [\\\"input\\\", \\\"change\\\"],\\n          n = function () {\\n        function n() {\\n          var i = arguments.length > 0 && arguments[0] !== e ? arguments[0] : document.createElement(\\\"div\\\"),\\n              o = arguments.length > 1 && arguments[1] !== e ? arguments[1] : {};t(this, n), this._element = i, this._options = g(n.options(), o), this._ratio = null, this._output = null, this._rotating = !1, this._input = null, this._preview = null, this._previewBlurred = null, this._blurredPreview = !1, this._cropper = null, this._straightCrop = null, this._previewWrapper = null, this._currentWindowSize = {}, this._btnGroup = null, this._maskFrame = null, this._dirty = !1, this._wrapperRotation = 0, this._wrapperScale = 1, this._init();\\n        }return p(n, [{ key: \\\"_init\\\", value: function value() {\\n            var t = this;this._element.className = \\\"slim-image-editor\\\", this._container = k(\\\"div\\\", \\\"slim-container\\\"), this._wrapper = k(\\\"div\\\", \\\"slim-wrapper\\\"), this._stage = k(\\\"div\\\", \\\"slim-stage\\\"), this._container.appendChild(this._stage), this._cropper = new Tt(), i.forEach(function (e) {\\n              t._cropper.element.addEventListener(e, t);\\n            }), this._stage.appendChild(this._cropper.element), this._previewWrapper = k(\\\"div\\\", \\\"slim-image-editor-preview slim-crop-preview\\\"), this._previewBlurred = k(\\\"canvas\\\", \\\"slim-crop-blur\\\"), this._previewWrapper.appendChild(this._previewBlurred), this._wrapper.appendChild(this._previewWrapper), this._previewMask = k(\\\"div\\\", \\\"slim-crop-mask\\\"), this._preview = k(\\\"img\\\"), this._previewMask.appendChild(this._preview), this._cropper.element.appendChild(this._previewMask), this._btnGroup = k(\\\"div\\\", \\\"slim-editor-btn-group\\\"), n.Buttons.forEach(function (e) {\\n              var i = R(e),\\n                  n = t._options[\\\"button\\\" + i + \\\"Label\\\"],\\n                  o = t._options[\\\"button\\\" + i + \\\"Title\\\"],\\n                  a = t._options[\\\"button\\\" + i + \\\"ClassName\\\"],\\n                  r = k(\\\"button\\\", \\\"slim-editor-btn slim-btn-\\\" + e + (a ? \\\" \\\" + a : \\\"\\\"));r.innerHTML = n, r.title = o || n, r.type = \\\"button\\\", r.setAttribute(\\\"data-action\\\", e), r.addEventListener(\\\"click\\\", t), t._btnGroup.appendChild(r);\\n            }), this._utilsGroup = k(\\\"div\\\", \\\"slim-editor-utils-group\\\");var e = k(\\\"button\\\", \\\"slim-editor-utils-btn slim-btn-rotate\\\" + (this._options.buttonRotateClassName ? \\\" \\\" + this._options.buttonRotateClassName : \\\"\\\"));e.setAttribute(\\\"data-action\\\", \\\"rotate\\\"), e.addEventListener(\\\"click\\\", this), e.title = this._options.buttonRotateTitle, this._utilsGroup.appendChild(e), this._container.appendChild(this._wrapper), this._element.appendChild(this._container), this._element.appendChild(this._utilsGroup), this._element.appendChild(this._btnGroup);\\n          } }, { key: \\\"dirty\\\", value: function value() {\\n            this._dirty = !0;\\n          } }, { key: \\\"handleEvent\\\", value: function value(t) {\\n            switch (t.type) {case \\\"click\\\":\\n                this._onClick(t);break;case \\\"change\\\":\\n                this._onGridChange(t);break;case \\\"input\\\":\\n                this._onGridInput(t);break;case \\\"keydown\\\":\\n                this._onKeyDown(t);break;case \\\"resize\\\":\\n                this._onResize(t);}\\n          } }, { key: \\\"_onKeyDown\\\", value: function value(t) {\\n            switch (t.keyCode) {case v.RETURN:\\n                this._confirm();break;case v.ESC:\\n                this._cancel();}\\n          } }, { key: \\\"_onClick\\\", value: function value(t) {\\n            t.target.classList.contains(\\\"slim-btn-cancel\\\") && this._cancel(), t.target.classList.contains(\\\"slim-btn-confirm\\\") && this._confirm(), t.target.classList.contains(\\\"slim-btn-rotate\\\") && this._rotate();\\n          } }, { key: \\\"_onResize\\\", value: function value() {\\n            this._currentWindowSize = { width: window.innerWidth, height: window.innerHeight }, this._redraw(), this._redrawCropper(this._cropper.area), this._updateWrapperScale(), this._redrawWrapper();\\n          } }, { key: \\\"_redrawWrapper\\\", value: function value() {\\n            var t = u.createMatrix();t.scale(this._wrapperScale, this._wrapperScale), t.rotateZ(this._wrapperRotation * (Math.PI / 180)), u.setElementTransform(this._previewWrapper, t);\\n          } }, { key: \\\"_onGridInput\\\", value: function value() {\\n            this._redrawCropMask();\\n          } }, { key: \\\"_onGridChange\\\", value: function value() {\\n            this._redrawCropMask();\\n          } }, { key: \\\"_updateWrapperRotation\\\", value: function value() {\\n            this._options.minSize.width > this._input.height || this._options.minSize.height > this._input.width ? this._wrapperRotation += 180 : this._wrapperRotation += 90;\\n          } }, { key: \\\"_updateWrapperScale\\\", value: function value() {\\n            var t = this._wrapperRotation % 180 !== 0;if (t) {\\n              var e = this._container.offsetWidth,\\n                  i = this._container.offsetHeight,\\n                  n = this._wrapper.offsetHeight,\\n                  o = this._wrapper.offsetWidth,\\n                  a = e / n;a * o > i && (a = i / o), this._wrapperScale = a;\\n            } else this._wrapperScale = 1;\\n          } }, { key: \\\"_cancel\\\", value: function value() {\\n            this._rotating || this._element.dispatchEvent(new CustomEvent(\\\"cancel\\\"));\\n          } }, { key: \\\"_confirm\\\", value: function value() {\\n            if (!this._rotating) {\\n              var t = this._wrapperRotation % 180 !== 0,\\n                  e = this._cropper.area,\\n                  i = dt(e, t ? this._input.height : this._input.width, t ? this._input.width : this._input.height);this._element.dispatchEvent(new CustomEvent(\\\"confirm\\\", { detail: { rotation: this._wrapperRotation % 360, crop: i } }));\\n            }\\n          } }, { key: \\\"_rotate\\\", value: function value() {\\n            var t = this;if (!this._rotating) {\\n              this._rotating = !0, this._updateWrapperRotation();var e = 1 === this.ratio || null === this._ratio ? this._cropper.area : null;e && C(e, 90), this._updateWrapperScale(), this._hideCropper(), u(this._previewWrapper, { rotation: [0, 0, this._wrapperRotation * (Math.PI / 180)], scale: [this._wrapperScale, this._wrapperScale], easing: \\\"spring\\\", springConstant: .8, springDeceleration: .65, complete: function complete() {\\n                  t._redrawCropper(e), t._showCropper(), t._rotating = !1;\\n                } });\\n            }\\n          } }, { key: \\\"_showCropper\\\", value: function value() {\\n            u(this._stage, { easing: \\\"ease\\\", duration: 250, fromOpacity: 0, opacity: 1 });\\n          } }, { key: \\\"_hideCropper\\\", value: function value() {\\n            u(this._stage, { duration: 0, fromOpacity: 0, opacity: 0 });\\n          } }, { key: \\\"_redrawCropMask\\\", value: function value() {\\n            var t = this,\\n                e = this._wrapperRotation % 360,\\n                i = this._wrapperScale,\\n                n = { width: this._wrapper.offsetWidth, height: this._wrapper.offsetHeight },\\n                o = this._cropper.area,\\n                a = { x: 0, y: 0 };0 === e ? (a.x = -o.x, a.y = -o.y) : 90 === e ? (a.x = -(1 - o.y), a.y = -o.x) : 180 === e ? (a.x = -(1 - o.x), a.y = -(1 - o.y)) : 270 === e && (a.x = -o.y, a.y = -(1 - o.x)), a.x *= n.width, a.y *= n.height, cancelAnimationFrame(this._maskFrame), this._maskFrame = requestAnimationFrame(function () {\\n              var n = \\\"scale(\\\" + i + \\\") rotate(\\\" + -e + \\\"deg) translate(\\\" + a.x + \\\"px, \\\" + a.y + \\\"px);\\\";t._preview.style.cssText = \\\"\\\\n\\\\t\\\\t\\\\t\\\\t\\\\twidth: \\\" + t._previewSize.width + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\theight: \\\" + t._previewSize.height + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t-webkit-transform: \\\" + n + \\\";\\\\n\\\\t\\\\t\\\\t\\\\t\\\\ttransform: \\\" + n + \\\";\\\\n\\\\t\\\\t\\\\t\\\\t\\\";\\n            });\\n          } }, { key: \\\"open\\\", value: function value(t, e, i, n, o) {\\n            var a = this;if (this._input && !this._dirty && this._ratio === e) return void o();this._currentWindowSize = { width: window.innerWidth, height: window.innerHeight }, this._dirty = !1, this._wrapperRotation = n || 0, this._blurredPreview = !1, this._ratio = e, this._previewSize = null, this._element.style.opacity = \\\"0\\\", this._input = t;var r = n % 180 !== 0,\\n                s = ft(i, r ? t.height : t.width, r ? t.width : t.height);this._preview.onload = function () {\\n              a._preview.onload = null, a._cropper.ratio = a.ratio, a._redraw(), a._redrawCropper(s), o(), a._element.style.opacity = \\\"\\\";\\n            }, this._preview.src = \\\"\\\", this._preview.src = ht(this._input, Math.min(this._container.offsetWidth / this._input.width, this._container.offsetHeight / this._input.height) * this._options.devicePixelRatio).toDataURL();\\n          } }, { key: \\\"_redrawCropper\\\", value: function value(t) {\\n            var e = this._wrapperRotation % 180 !== 0,\\n                i = e ? this._input.height / this._input.width : this._input.width / this._input.height,\\n                n = this._wrapper.offsetWidth,\\n                o = this._wrapper.offsetHeight,\\n                a = this._container.offsetWidth,\\n                r = this._container.offsetHeight;this._updateWrapperScale();var s = this._wrapperScale * (e ? o : n),\\n                h = this._wrapperScale * (e ? n : o),\\n                u = e ? .5 * (a - s) : this._wrapper.offsetLeft,\\n                l = e ? .5 * (r - h) : this._wrapper.offsetTop;this._stage.style.cssText = \\\"\\\\n\\\\t\\\\t\\\\t\\\\tleft:\\\" + u + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\\ttop:\\\" + l + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\\twidth:\\\" + s + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\\theight:\\\" + h + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\", this._cropper.limit(s, s / i), this._cropper.offset(u + this._element.offsetLeft, l + this._element.offsetTop), this._cropper.minWidth = this._wrapperScale * this._options.minSize.width * this.scalar, this._cropper.minHeight = this._wrapperScale * this._options.minSize.height * this.scalar;var p = null;p = t ? { x: t.x * s, y: t.y * h, width: t.width * s, height: t.height * h } : tt(s, h, this._ratio || h / s), this._cropper.resize(p.x, p.y, p.width, p.height);\\n          } }, { key: \\\"_redraw\\\", value: function value() {\\n            var t = this._input.height / this._input.width,\\n                e = this._container.clientWidth,\\n                i = this._container.clientHeight,\\n                n = e,\\n                o = n * t;o > i && (o = i, n = o / t), n = Math.round(n), o = Math.round(o);var a = (e - n) / 2,\\n                r = (i - o) / 2;this._wrapper.style.cssText = \\\"\\\\n\\\\t\\\\t\\\\t\\\\tleft:\\\" + a + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\\ttop:\\\" + r + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\\twidth:\\\" + n + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\\theight:\\\" + o + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\", this._previewBlurred.style.cssText = \\\"\\\\n\\\\t\\\\t\\\\t\\\\twidth:\\\" + n + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\\theight:\\\" + o + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\", this._preview.style.cssText = \\\"\\\\n\\\\t\\\\t\\\\t\\\\twidth:\\\" + n + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\\theight:\\\" + o + \\\"px;\\\\n\\\\t\\\\t\\\\t\\\", this._previewSize = { width: n, height: o }, this._blurredPreview || (this._previewBlurred.width = 300, this._previewBlurred.height = this._previewBlurred.width * t, lt(this._input, this._previewBlurred), pt(this._previewBlurred, 3), this._blurredPreview = !0);\\n          } }, { key: \\\"show\\\", value: function value() {\\n            var t = arguments.length > 0 && arguments[0] !== e ? arguments[0] : function () {};this._currentWindowSize.width === window.innerWidth && this._currentWindowSize.height === window.innerHeight || (this._redraw(), this._redrawCropper(this._cropper.area)), document.addEventListener(\\\"keydown\\\", this), window.addEventListener(\\\"resize\\\", this);var i = this._wrapperRotation * (Math.PI / 180);u(this._previewWrapper, { fromRotation: [0, 0, i], rotation: [0, 0, i], fromPosition: [0, 0, 0], position: [0, 0, 0], fromOpacity: 0, opacity: 1, fromScale: [this._wrapperScale - .02, this._wrapperScale - .02], scale: [this._wrapperScale, this._wrapperScale], easing: \\\"spring\\\", springConstant: .3, springDeceleration: .85, delay: 450, complete: function complete() {} }), this._cropper.dirty ? u(this._stage, { fromPosition: [0, 0, 0], position: [0, 0, 0], fromOpacity: 0, opacity: 1, duration: 250, delay: 850, complete: function complete() {\\n                z(this), t();\\n              } }) : u(this._stage, { fromPosition: [0, 0, 0], position: [0, 0, 0], fromOpacity: 0, opacity: 1, duration: 250, delay: 1e3, complete: function complete() {\\n                z(this);\\n              } }), u(this._btnGroup.childNodes, { fromScale: [.9, .9], scale: [1, 1], fromOpacity: 0, opacity: 1, delay: function delay(t) {\\n                return 1e3 + 100 * t;\\n              }, easing: \\\"spring\\\", springConstant: .3, springDeceleration: .85, complete: function complete() {\\n                z(this);\\n              } }), u(this._utilsGroup.childNodes, { fromScale: [.9, .9], scale: [1, 1], fromOpacity: 0, opacity: 1, easing: \\\"spring\\\", springConstant: .3, springDeceleration: .85, delay: 1250, complete: function complete() {\\n                z(this);\\n              } });\\n          } }, { key: \\\"hide\\\", value: function value() {\\n            var t = arguments.length > 0 && arguments[0] !== e ? arguments[0] : function () {};document.removeEventListener(\\\"keydown\\\", this), window.removeEventListener(\\\"resize\\\", this), u(this._utilsGroup.childNodes, { fromOpacity: 1, opacity: 0, duration: 250 }), u(this._btnGroup.childNodes, { fromOpacity: 1, opacity: 0, delay: 200, duration: 350 }), u([this._stage, this._previewWrapper], { fromPosition: [0, 0, 0], position: [0, -250, 0], fromOpacity: 1, opacity: 0, easing: \\\"spring\\\", springConstant: .3, springDeceleration: .75, delay: 250, allDone: function allDone() {\\n                t();\\n              } });\\n          } }, { key: \\\"destroy\\\", value: function value() {\\n            var t = this;St(this._btnGroup.children).forEach(function (e) {\\n              e.removeEventListener(\\\"click\\\", t);\\n            }), i.forEach(function (e) {\\n              t._cropper.element.removeEventListener(e, t);\\n            }), this._cropper.destroy(), this._element.parentNode && Et(this._element);\\n          } }, { key: \\\"showRotateButton\\\", set: function set(t) {\\n            t ? this._element.classList.remove(\\\"slim-rotation-disabled\\\") : this._element.classList.add(\\\"slim-rotation-disabled\\\");\\n          } }, { key: \\\"element\\\", get: function get() {\\n            return this._element;\\n          } }, { key: \\\"ratio\\\", get: function get() {\\n            return \\\"input\\\" === this._ratio ? this._input.height / this._input.width : this._ratio;\\n          } }, { key: \\\"offset\\\", get: function get() {\\n            return this._element.getBoundingClientRect();\\n          } }, { key: \\\"original\\\", get: function get() {\\n            return this._input;\\n          } }, { key: \\\"scalar\\\", get: function get() {\\n            return this._previewSize.width / this._input.width;\\n          } }], [{ key: \\\"options\\\", value: function value() {\\n            return { buttonCancelClassName: null, buttonConfirmClassName: null, buttonCancelLabel: \\\"Cancel\\\", buttonConfirmLabel: \\\"Confirm\\\", buttonCancelTitle: null, buttonConfirmTitle: null, buttonRotateTitle: \\\"Rotate\\\", buttonRotateClassName: null, devicePixelRatio: null, minSize: { width: 0, height: 0 } };\\n          } }]), n;\\n      }();return n.Buttons = [\\\"cancel\\\", \\\"confirm\\\"], n;\\n    }(Tt),\\n        Lt = function () {\\n      var i = [\\\"dragenter\\\", \\\"dragover\\\", \\\"dragleave\\\", \\\"drop\\\"];return function () {\\n        function n() {\\n          var i = arguments.length > 0 && arguments[0] !== e ? arguments[0] : document.createElement(\\\"div\\\");t(this, n), this._element = i, this._accept = [], this._allowURLs = !1, this._dragPath = null, this._init();\\n        }return p(n, [{ key: \\\"isValidDataTransfer\\\", value: function value(t) {\\n            return t.files && t.files.length ? this.areValidDataTransferFiles(t.files) : t.items && t.items.length ? this.areValidDataTransferItems(t.items) : null;\\n          } }, { key: \\\"areValidDataTransferFiles\\\", value: function value(t) {\\n            return !this._accept.length || !t || this._accept.indexOf(t[0].type) !== -1;\\n          } }, { key: \\\"areValidDataTransferItems\\\", value: function value(t) {\\n            return !this._accept.length || !t || (this._allowURLs && \\\"string\\\" === t[0].kind ? null : t[0].type && 0 === t[0].type.indexOf(\\\"application\\\") ? null : this._accept.indexOf(t[0].type) !== -1);\\n          } }, { key: \\\"reset\\\", value: function value() {\\n            this._element.files = null;\\n          } }, { key: \\\"_init\\\", value: function value() {\\n            var t = this;this._element.className = \\\"slim-file-hopper\\\", i.forEach(function (e) {\\n              t._element.addEventListener(e, t);\\n            });\\n          } }, { key: \\\"handleEvent\\\", value: function value(t) {\\n            switch (t.type) {case \\\"dragenter\\\":case \\\"dragover\\\":\\n                this._onDragOver(t);break;case \\\"dragleave\\\":\\n                this._onDragLeave(t);break;case \\\"drop\\\":\\n                this._onDrop(t);}\\n          } }, { key: \\\"_onDrop\\\", value: function value(t) {\\n            t.preventDefault();var e = null;if (this._allowURLs) {\\n              var i = void 0,\\n                  n = void 0;try {\\n                i = t.dataTransfer.getData(\\\"url\\\"), n = t.dataTransfer.getData(\\\"text/html\\\");\\n              } catch (t) {}if (n && n.length) {\\n                var o = n.match(/src\\\\s*=\\\\s*\\\"(.+?)\\\"/);o && (e = o[1]);\\n              } else i && i.length && (e = i);\\n            }if (e) this._element.files = [{ remote: e }];else {\\n              var a = this.isValidDataTransfer(t.dataTransfer);if (!a) return this._element.dispatchEvent(new CustomEvent(\\\"file-invalid-drop\\\")), void (this._dragPath = null);this._element.files = t.dataTransfer.files;\\n            }this._element.dispatchEvent(new CustomEvent(\\\"file-drop\\\", { detail: m(t) })), this._element.dispatchEvent(new CustomEvent(\\\"change\\\")), this._dragPath = null;\\n          } }, { key: \\\"_onDragOver\\\", value: function value(t) {\\n            t.preventDefault(), t.dataTransfer.dropEffect = \\\"copy\\\";var e = this.isValidDataTransfer(t.dataTransfer);return null === e || e ? (this._dragPath || (this._dragPath = []), this._dragPath.push(m(t)), void this._element.dispatchEvent(new CustomEvent(\\\"file-over\\\", { detail: { x: T(this._dragPath).x, y: T(this._dragPath).y } }))) : (t.dataTransfer.dropEffect = \\\"none\\\", void this._element.dispatchEvent(new CustomEvent(\\\"file-invalid\\\")));\\n          } }, { key: \\\"_onDragLeave\\\", value: function value(t) {\\n            this._element.dispatchEvent(new CustomEvent(\\\"file-out\\\", { detail: m(t) })), this._dragPath = null;\\n          } }, { key: \\\"destroy\\\", value: function value() {\\n            var t = this;i.forEach(function (e) {\\n              t._element.removeEventListener(e, t);\\n            }), Et(this._element), this._element = null, this._dragPath = null, this._accept = null;\\n          } }, { key: \\\"element\\\", get: function get() {\\n            return this._element;\\n          } }, { key: \\\"dragPath\\\", get: function get() {\\n            return this._dragPath;\\n          } }, { key: \\\"enabled\\\", get: function get() {\\n            return \\\"\\\" === this._element.style.display;\\n          }, set: function set(t) {\\n            this._element.style.display = t ? \\\"\\\" : \\\"none\\\";\\n          } }, { key: \\\"allowURLs\\\", set: function set(t) {\\n            this._allowURLs = t;\\n          } }, { key: \\\"accept\\\", set: function set(t) {\\n            this._accept = t;\\n          }, get: function get() {\\n            return this._accept;\\n          } }]), n;\\n      }();\\n    }(),\\n        Ot = function () {\\n      return function () {\\n        function i() {\\n          t(this, i), this._element = null, this._inner = null, this._init();\\n        }return p(i, [{ key: \\\"_init\\\", value: function value() {\\n            this._element = k(\\\"div\\\", \\\"slim-popover\\\"), this._element.setAttribute(\\\"data-state\\\", \\\"off\\\"), document.body.appendChild(this._element), this._element.addEventListener(\\\"touchmove\\\", function (t) {\\n              t.preventDefault();\\n            }, !0);\\n          } }, { key: \\\"show\\\", value: function value() {\\n            var t = this,\\n                i = arguments.length > 0 && arguments[0] !== e ? arguments[0] : function () {};this._element.setAttribute(\\\"data-state\\\", \\\"on\\\"), u(this._element, { fromOpacity: 0, opacity: 1, duration: 350, complete: function complete() {\\n                z(t._element), i();\\n              } });\\n          } }, { key: \\\"hide\\\", value: function value() {\\n            var t = this,\\n                i = arguments.length > 0 && arguments[0] !== e ? arguments[0] : function () {};u(this._element, { fromOpacity: 1, opacity: 0, duration: 500, complete: function complete() {\\n                z(t._element), t._element.setAttribute(\\\"data-state\\\", \\\"off\\\"), i();\\n              } });\\n          } }, { key: \\\"destroy\\\", value: function value() {\\n            this._element.parentNode && (this._element.parentNode.removeChild(this._element), this._element = null, this._inner = null);\\n          } }, { key: \\\"inner\\\", set: function set(t) {\\n            this._inner = t, this._element.firstChild && this._element.removeChild(this._element.firstChild), this._element.appendChild(this._inner);\\n          } }, { key: \\\"className\\\", set: function set(t) {\\n            this._element.className = \\\"slim-popover\\\" + (null === t ? \\\"\\\" : \\\" \\\" + t);\\n          } }]), i;\\n      }();\\n    }(),\\n        zt = function zt(t, e) {\\n      return t.split(e).map(function (t) {\\n        return parseInt(t, 10);\\n      });\\n    },\\n        Dt = function Dt(t) {\\n      return \\\"DIV\\\" === t.nodeName || \\\"SPAN\\\" === t.nodeName;\\n    },\\n        At = { AUTO: \\\"auto\\\", INITIAL: \\\"initial\\\", MANUAL: \\\"manual\\\" },\\n        Ut = [\\\"x\\\", \\\"y\\\", \\\"width\\\", \\\"height\\\"],\\n        Ht = [\\\"file-invalid-drop\\\", \\\"file-invalid\\\", \\\"file-drop\\\", \\\"file-over\\\", \\\"file-out\\\", \\\"click\\\"],\\n        Bt = [\\\"cancel\\\", \\\"confirm\\\"],\\n        Nt = [\\\"remove\\\", \\\"edit\\\", \\\"download\\\", \\\"upload\\\"],\\n        Ft = null,\\n        Wt = 0,\\n        qt = '\\\\n<div class=\\\"slim-loader\\\">\\\\n\\\\t<svg>\\\\n\\\\t\\\\t<path class=\\\"slim-loader-background\\\" fill=\\\"none\\\" stroke-width=\\\"3\\\" />\\\\n\\\\t\\\\t<path class=\\\"slim-loader-foreground\\\" fill=\\\"none\\\" stroke-width=\\\"3\\\" />\\\\n\\\\t</svg>\\\\n</div>\\\\n',\\n        jt = '\\\\n<div class=\\\"slim-upload-status\\\"></div>\\\\n',\\n        Vt = function Vt(t) {\\n      var e = t.split(\\\",\\\");return { width: parseInt(e[0], 10), height: parseInt(e[1], 10) };\\n    },\\n        Gt = function () {\\n      function i(n) {\\n        var o = arguments.length > 1 && arguments[1] !== e ? arguments[1] : {};t(this, i), Ft || (Ft = new Ot()), this._uid = Wt++, this._options = g(i.options(), o), this._options.forceSize && (\\\"string\\\" == typeof this._options.forceSize && (this._options.forceSize = Vt(this._options.forceSize)), this._options.ratio = this._options.forceSize.width + \\\":\\\" + this._options.forceSize.height, this._options.size = mt(this._options.forceSize)), \\\"string\\\" == typeof this._options.size && (this._options.size = Vt(this._options.size)), \\\"string\\\" == typeof this._options.minSize && (this._options.minSize = Vt(this._options.minSize)), this._originalElement = n, this._originalElementInner = n.innerHTML, this._originalElementAttributes = _(n), Dt(n) ? this._element = n : (this._element = Ct(n), this._element.className = n.className, n.className = \\\"\\\", this._element.setAttribute(\\\"data-ratio\\\", this._options.ratio)), this._element.classList.add(\\\"slim\\\"), this._element.setAttribute(\\\"data-state\\\", \\\"init\\\"), this._state = [], this._timers = [], this._input = null, this._inputReference = null, this._output = null, this._ratio = null, this._isRequired = !1, this._imageHopper = null, this._imageEditor = null, this._progressEnabled = !0, this._data = {}, this._resetData(), this._drip = null, this._hasInitialImage = !1, this._initialCrop = this._options.crop, this._initialRotation = this._options.rotation && this._options.rotation % 90 === 0 ? this._options.rotation : null, this._isBeingDestroyed = !1, i.supported ? this._init() : this._fallback();\\n      }return p(i, [{ key: \\\"setRotation\\\", value: function value(t, e) {\\n          if (\\\"number\\\" == typeof t || t % 90 === 0) {\\n            this._data.actions.rotation = t;var i = this._data.actions.rotation % 180 !== 0;if (this._data.input.image) {\\n              var n = i ? this._data.input.image.height : this._data.input.image.width,\\n                  o = i ? this._data.input.image.width : this._data.input.image.height;this._data.actions.crop = tt(n, o, this._ratio), this._data.actions.crop.type = At.AUTO;\\n            }this._data.input.image && e && this._manualTransform(e);\\n          }\\n        } }, { key: \\\"setSize\\\", value: function value(t, e) {\\n          \\\"string\\\" == typeof t && (t = Vt(t)), t && t.width && t.height && (this._options.size = mt(t), this._data.actions.size = mt(t), this._data.input.image && e && this._manualTransform(e));\\n        } }, { key: \\\"setForceSize\\\", value: function value(t, e) {\\n          \\\"string\\\" == typeof t && (t = Vt(t)), t && t.width && t.height && (this._options.size = mt(t), this._options.forceSize = mt(t), this._data.actions.size = mt(t), this.setRatio(this._options.forceSize.width + \\\":\\\" + this._options.forceSize.height, e));\\n        } }, { key: \\\"setRatio\\\", value: function value(t, e) {\\n          var i = this;if (t && \\\"string\\\" == typeof t && (this._options.ratio = t, this._isFixedRatio())) {\\n            var n = zt(this._options.ratio, \\\":\\\");this._ratio = n[1] / n[0], this._data.input.image && e ? this._cropAuto(function (t) {\\n              i._scaleDropArea(i._ratio), e && e(t);\\n            }) : (this._data.input.image && (this._data.actions.crop = tt(this._data.input.image.width, this._data.input.image.height, this._ratio), this._data.actions.crop.type = At.AUTO), this._scaleDropArea(this._ratio), e && e(null));\\n          }\\n        } }, { key: \\\"isAttachedTo\\\", value: function value(t) {\\n          return this._element === t || this._originalElement === t;\\n        } }, { key: \\\"isDetached\\\", value: function value() {\\n          return null === this._element.parentNode;\\n        } }, { key: \\\"load\\\", value: function value(t) {\\n          var i = arguments.length > 1 && arguments[1] !== e ? arguments[1] : {},\\n              n = arguments[2];\\\"function\\\" == typeof i ? n = i : (this._options.crop = i.crop, this._options.rotation = i.rotation, this._initialRotation = i.rotation && i.rotation % 90 === 0 ? i.rotation : null, this._initialCrop = this._options.crop), this._load(t, n, { blockPush: i.blockPush });\\n        } }, { key: \\\"upload\\\", value: function value(t) {\\n          this._doUpload(t);\\n        } }, { key: \\\"download\\\", value: function value() {\\n          this._doDownload();\\n        } }, { key: \\\"remove\\\", value: function value() {\\n          return this._doRemove();\\n        } }, { key: \\\"destroy\\\", value: function value() {\\n          this._doDestroy();\\n        } }, { key: \\\"edit\\\", value: function value() {\\n          this._doEdit();\\n        } }, { key: \\\"crop\\\", value: function value(t, e) {\\n          this._crop(t.x, t.y, t.width, t.height, e);\\n        } }, { key: \\\"containsImage\\\", value: function value() {\\n          return null !== this._data.input.name;\\n        } }, { key: \\\"_canInstantEdit\\\", value: function value() {\\n          return this._options.instantEdit && !this._isInitialising;\\n        } }, { key: \\\"_getFileInput\\\", value: function value() {\\n          return this._element.querySelector(\\\"input[type=file]\\\");\\n        } }, { key: \\\"_getInitialImage\\\", value: function value() {\\n          return this._element.querySelector(\\\"img\\\");\\n        } }, { key: \\\"_getInputElement\\\", value: function value() {\\n          return this._getFileInput() || this._getInitialImage();\\n        } }, { key: \\\"_getRatioSpacerElement\\\", value: function value() {\\n          return this._element.children[0];\\n        } }, { key: \\\"_isImageOnly\\\", value: function value() {\\n          return \\\"INPUT\\\" !== this._input.nodeName;\\n        } }, { key: \\\"_isFixedRatio\\\", value: function value() {\\n          return this._options.ratio.indexOf(\\\":\\\") !== -1;\\n        } }, { key: \\\"_isAutoCrop\\\", value: function value() {\\n          return this._data.actions.crop.type === At.AUTO;\\n        } }, { key: \\\"_toggleButton\\\", value: function value(t, e) {\\n          xt('.slim-btn[data-action=\\\"' + t + '\\\"]', e, this._element);\\n        } }, { key: \\\"_clearState\\\", value: function value() {\\n          this._state = [], this._updateState();\\n        } }, { key: \\\"_removeState\\\", value: function value(t) {\\n          this._state = this._state.filter(function (e) {\\n            return e !== t;\\n          }), this._updateState();\\n        } }, { key: \\\"_addState\\\", value: function value(t) {\\n          L(t, this._state) || (this._state.push(t), this._updateState());\\n        } }, { key: \\\"_updateState\\\", value: function value() {\\n          this._element && this._element.setAttribute(\\\"data-state\\\", this._state.join(\\\",\\\"));\\n        } }, { key: \\\"_resetData\\\", value: function value() {\\n          this._data = { server: null, meta: mt(this._options.meta), input: { field: this._inputReference, name: null, type: null, width: 0, height: 0, file: null }, output: { image: null, width: 0, height: 0 }, actions: { rotation: null, crop: null, size: null } }, this._output && (this._output.value = \\\"\\\"), _t(this._getFileInput());\\n        } }, { key: \\\"_init\\\", value: function value() {\\n          var t = this;if (this._isInitialising = !0, this._addState(\\\"empty\\\"), L(\\\"input\\\", this._options.post) && (this._inputReference = \\\"slim_input_\\\" + this._uid), this._input = this._getInputElement(), this._input || (this._input = k(\\\"input\\\"), this._input.type = \\\"file\\\", this._element.appendChild(this._input)), this._isRequired = this._input.required === !0, this._output = this._element.querySelector(\\\"input[type=hidden]\\\"), this._output) {\\n            var e = null;try {\\n              e = JSON.parse(this._output.value);\\n            } catch (i) {}if (e) {\\n              var n = new Image();n.src = e.output.image, n.setAttribute(\\\"data-filename\\\", e.output.name), this._element.insertBefore(n, this._element.firstChild);\\n            }\\n          } else this._output = k(\\\"input\\\"), this._output.type = \\\"hidden\\\", this._output.name = this._input.name || this._options.defaultInputName, this._element.appendChild(this._output);this._input.removeAttribute(\\\"name\\\");var o = k(\\\"div\\\", \\\"slim-area\\\"),\\n              a = this._getInitialImage(),\\n              r = (a || {}).src,\\n              s = a ? a.getAttribute(\\\"data-filename\\\") : null;r ? this._hasInitialImage = !0 : (this._initialCrop = null, this._initialRotation = null);var h = '\\\\n\\\\t\\\\t<div class=\\\"slim-result\\\">\\\\n\\\\t\\\\t\\\\t<img class=\\\"in\\\" style=\\\"opacity:0\\\" ' + (r ? 'src=\\\"' + r + '\\\"' : \\\"\\\") + '><img><img style=\\\"opacity:0\\\">\\\\n\\\\t\\\\t</div>';if (this._isImageOnly()) o.innerHTML = \\\"\\\\n\\\\t\\\\t\\\\t\\\\t\\\" + qt + \\\"\\\\n\\\\t\\\\t\\\\t\\\\t\\\" + jt + \\\"\\\\n\\\\t\\\\t\\\\t\\\\t\\\" + h + '\\\\n\\\\t\\\\t\\\\t\\\\t<div class=\\\"slim-status\\\"><div class=\\\"slim-label-loading\\\">' + (this._options.labelLoading || \\\"\\\") + \\\"</div></div>\\\\n\\\\t\\\\t\\\\t\\\";else {\\n            L(\\\"input\\\", this._options.post) && (this._data.input.field = this._inputReference, this._options.service || (this._input.name = this._inputReference));var u = void 0;this._input.hasAttribute(\\\"accept\\\") && \\\"image/*\\\" !== this._input.getAttribute(\\\"accept\\\") ? u = this._input.accept.split(\\\",\\\").map(function (t) {\\n              return t.trim();\\n            }).filter(function (t) {\\n              return t.length > 0;\\n            }) : (u = A(), this._input.setAttribute(\\\"accept\\\", u.join(\\\",\\\"))), this._imageHopper = new Lt(), this._imageHopper.accept = u, this._imageHopper.allowURLs = \\\"string\\\" == typeof this._options.fetcher, this._element.appendChild(this._imageHopper.element), Ht.forEach(function (e) {\\n              t._imageHopper.element.addEventListener(e, t);\\n            }), o.innerHTML = \\\"\\\\n\\\\t\\\\t\\\\t\\\\t\\\" + qt + \\\"\\\\n\\\\t\\\\t\\\\t\\\\t\\\" + jt + '\\\\n\\\\t\\\\t\\\\t\\\\t<div class=\\\"slim-drip\\\"><span><span></span></span></div>\\\\n\\\\t\\\\t\\\\t\\\\t<div class=\\\"slim-status\\\"><div class=\\\"slim-label\\\">' + (this._options.label || \\\"\\\") + '</div><div class=\\\"slim-label-loading\\\">' + (this._options.labelLoading || \\\"\\\") + \\\"</div></div>\\\\n\\\\t\\\\t\\\\t\\\\t\\\" + h + \\\"\\\\n\\\\t\\\\t\\\\t\\\", this._input.addEventListener(\\\"change\\\", this);\\n          }if (this._element.appendChild(o), this._btnGroup = k(\\\"div\\\", \\\"slim-btn-group\\\"), this._btnGroup.style.display = \\\"none\\\", this._element.appendChild(this._btnGroup), Nt.filter(function (e) {\\n            return t._isButtonAllowed(e);\\n          }).forEach(function (e) {\\n            var i = R(e),\\n                n = t._options[\\\"button\\\" + i + \\\"Label\\\"],\\n                o = t._options[\\\"button\\\" + i + \\\"Title\\\"] || n,\\n                a = t._options[\\\"button\\\" + i + \\\"ClassName\\\"],\\n                r = k(\\\"button\\\", \\\"slim-btn slim-btn-\\\" + e + (a ? \\\" \\\" + a : \\\"\\\"));r.innerHTML = n, r.title = o, r.type = \\\"button\\\", r.addEventListener(\\\"click\\\", t), r.setAttribute(\\\"data-action\\\", e), t._btnGroup.appendChild(r);\\n          }), this._isFixedRatio()) {\\n            var l = zt(this._options.ratio, \\\":\\\");this._ratio = l[1] / l[0], this._scaleDropArea(this._ratio);\\n          }this._updateProgress(.5), r ? this._load(r, function () {\\n            t._onInit();\\n          }, { name: s }) : this._onInit();\\n        } }, { key: \\\"_onInit\\\", value: function value() {\\n          var t = this;this._isInitialising = !1;var e = function e() {\\n            var e = setTimeout(function () {\\n              t._options.didInit.apply(t, [t.data, t]);\\n            }, 0);t._timers.push(e);\\n          };this._options.saveInitialImage && this.containsImage() ? this._options.service || this._save(function () {\\n            e();\\n          }, !1) : (this._options.service && this.containsImage() && this._toggleButton(\\\"upload\\\", !1), e());\\n        } }, { key: \\\"_updateProgress\\\", value: function value(t) {\\n          if (t = Math.min(.99999, t), this._element && this._progressEnabled) {\\n            var e = this._element.querySelector(\\\".slim-loader\\\");if (e) {\\n              var i = e.offsetWidth,\\n                  n = e.querySelectorAll(\\\"path\\\"),\\n                  o = parseInt(n[0].getAttribute(\\\"stroke-width\\\"), 10);n[0].setAttribute(\\\"d\\\", Rt(.5 * i, .5 * i, .5 * i - o, .9999)), n[1].setAttribute(\\\"d\\\", Rt(.5 * i, .5 * i, .5 * i - o, t));\\n            }\\n          }\\n        } }, { key: \\\"_startProgress\\\", value: function value(t) {\\n          var e = this;if (this._element) {\\n            this._progressEnabled = !1;var i = this._element.querySelector(\\\".slim-loader\\\");if (i) {\\n              var n = i.children[0];this._stopProgressLoop(function () {\\n                i.removeAttribute(\\\"style\\\"), n.removeAttribute(\\\"style\\\"), e._progressEnabled = !0, e._updateProgress(0), e._progressEnabled = !1, u(n, { fromOpacity: 0, opacity: 1, duration: 250, complete: function complete() {\\n                    e._progressEnabled = !0, t && t();\\n                  } });\\n              });\\n            }\\n          }\\n        } }, { key: \\\"_stopProgress\\\", value: function value() {\\n          var t = this;if (this._element) {\\n            var e = this._element.querySelector(\\\".slim-loader\\\");if (e) {\\n              var i = e.children[0];this._updateProgress(1), u(i, { fromOpacity: 1, opacity: 0, duration: 250, complete: function complete() {\\n                  e.removeAttribute(\\\"style\\\"), i.removeAttribute(\\\"style\\\"), t._updateProgress(.5), t._progressEnabled = !1;\\n                } });\\n            }\\n          }\\n        } }, { key: \\\"_startProgressLoop\\\", value: function value() {\\n          if (this._element) {\\n            var t = this._element.querySelector(\\\".slim-loader\\\");if (t) {\\n              var e = t.children[0];t.removeAttribute(\\\"style\\\"), e.removeAttribute(\\\"style\\\"), this._updateProgress(.5);var i = 1e3;u(t, \\\"stop\\\"), u(t, { rotation: [0, 0, -(2 * Math.PI) * i], easing: \\\"linear\\\", duration: 1e3 * i }), u(e, { fromOpacity: 0, opacity: 1, duration: 250 });\\n            }\\n          }\\n        } }, { key: \\\"_stopProgressLoop\\\", value: function value(t) {\\n          if (this._element) {\\n            var e = this._element.querySelector(\\\".slim-loader\\\");if (e) {\\n              var i = e.children[0];u(i, { fromOpacity: parseFloat(i.style.opacity), opacity: 0, duration: 250, complete: function complete() {\\n                  u(e, \\\"stop\\\"), e.removeAttribute(\\\"style\\\"), i.removeAttribute(\\\"style\\\"), t && t();\\n                } });\\n            }\\n          }\\n        } }, { key: \\\"_isButtonAllowed\\\", value: function value(t) {\\n          return \\\"edit\\\" === t ? this._options.edit : \\\"download\\\" === t ? this._options.download : \\\"upload\\\" === t ? !!this._options.service && !this._options.push : \\\"remove\\\" !== t || !this._isImageOnly();\\n        } }, { key: \\\"_fallback\\\", value: function value() {\\n          var t = k(\\\"div\\\", \\\"slim-area\\\");t.innerHTML = '\\\\n\\\\t\\\\t\\\\t<div class=\\\"slim-status\\\"><div class=\\\"slim-label\\\">' + (this._options.label || \\\"\\\") + \\\"</div></div>\\\\n\\\\t\\\\t\\\", this._element.appendChild(t), this._throwError(this._options.statusNoSupport);\\n        } }, { key: \\\"handleEvent\\\", value: function value(t) {\\n          switch (t.type) {case \\\"click\\\":\\n              this._onClick(t);break;case \\\"change\\\":\\n              this._onChange(t);break;case \\\"cancel\\\":\\n              this._onCancel(t);break;case \\\"confirm\\\":\\n              this._onConfirm(t);break;case \\\"file-over\\\":\\n              this._onFileOver(t);break;case \\\"file-out\\\":\\n              this._onFileOut(t);break;case \\\"file-drop\\\":\\n              this._onDropFile(t);break;case \\\"file-invalid\\\":\\n              this._onInvalidFile(t);break;case \\\"file-invalid-drop\\\":\\n              this._onInvalidFileDrop(t);}\\n        } }, { key: \\\"_getIntro\\\", value: function value() {\\n          return this._element.querySelector(\\\".slim-result .in\\\");\\n        } }, { key: \\\"_getOutro\\\", value: function value() {\\n          return this._element.querySelector(\\\".slim-result .out\\\");\\n        } }, { key: \\\"_getInOut\\\", value: function value() {\\n          return this._element.querySelectorAll(\\\".slim-result img\\\");\\n        } }, { key: \\\"_getDrip\\\", value: function value() {\\n          return this._drip || (this._drip = this._element.querySelector(\\\".slim-drip > span\\\")), this._drip;\\n        } }, { key: \\\"_throwError\\\", value: function value(t) {\\n          this._addState(\\\"error\\\"), this._element.querySelector(\\\".slim-label\\\").style.display = \\\"none\\\";var e = this._element.querySelector(\\\".slim-error\\\");e || (e = k(\\\"div\\\", \\\"slim-error\\\"), this._element.querySelector(\\\".slim-status\\\").appendChild(e)), e.innerHTML = t, this._options.didThrowError.apply(this, [t]);\\n        } }, { key: \\\"_removeError\\\", value: function value() {\\n          this._removeState(\\\"error\\\"), this._element.querySelector(\\\".slim-label\\\").style.display = \\\"\\\";var t = this._element.querySelector(\\\".slim-error\\\");t && t.parentNode.removeChild(t);\\n        } }, { key: \\\"_openFileDialog\\\", value: function value() {\\n          this._removeError(), this._input.click();\\n        } }, { key: \\\"_onClick\\\", value: function value(t) {\\n          var e = this,\\n              i = t.target.classList,\\n              n = t.target;if (i.contains(\\\"slim-file-hopper\\\")) return t.preventDefault(), void this._openFileDialog();switch (n.getAttribute(\\\"data-action\\\")) {case \\\"remove\\\":\\n              this._options.willRemove.apply(this, [this.data, function () {\\n                e._doRemove();\\n              }]);break;case \\\"edit\\\":\\n              this._doEdit();break;case \\\"download\\\":\\n              this._doDownload();break;case \\\"upload\\\":\\n              this._doUpload();}\\n        } }, { key: \\\"_onInvalidFileDrop\\\", value: function value() {\\n          this._onInvalidFile(), this._removeState(\\\"file-over\\\");var t = this._getDrip();u(t.firstChild, { fromScale: [.5, .5], scale: [0, 0], fromOpacity: .5, opacity: 0, duration: 150, complete: function complete() {\\n              z(t.firstChild);\\n            } });\\n        } }, { key: \\\"_onInvalidFile\\\", value: function value() {\\n          var t = this._imageHopper.accept.map(H),\\n              e = this._options.statusFileType.replace(\\\"$0\\\", t.join(\\\", \\\"));this._throwError(e);\\n        } }, { key: \\\"_onImageTooSmall\\\", value: function value() {\\n          var t = this._options.statusImageTooSmall.replace(\\\"$0\\\", this._options.minSize.width + \\\" × \\\" + this._options.minSize.height);this._throwError(t);\\n        } }, { key: \\\"_onOverWeightFile\\\", value: function value() {\\n          var t = this._options.statusFileSize.replace(\\\"$0\\\", this._options.maxFileSize);this._throwError(t);\\n        } }, { key: \\\"_onLocalURLProblem\\\", value: function value(t) {\\n          this._throwError(this._options.statusLocalUrlProblem || t);\\n        } }, { key: \\\"_onRemoteURLProblem\\\", value: function value(t) {\\n          this._throwError(t);\\n        } }, { key: \\\"_onFileOver\\\", value: function value(t) {\\n          this._addState(\\\"file-over\\\"), this._removeError();var e = this._getDrip(),\\n              i = u.createMatrix();i.translate(t.detail.x, t.detail.y, 0), u.setElementTransform(e, i), 1 == this._imageHopper.dragPath.length && (e.style.opacity = 1, u(e.firstChild, { fromOpacity: 0, opacity: .5, fromScale: [0, 0], scale: [.5, .5], duration: 150 }));\\n        } }, { key: \\\"_onFileOut\\\", value: function value(t) {\\n          this._removeState(\\\"file-over\\\"), this._removeState(\\\"file-invalid\\\"), this._removeError();var e = this._getDrip(),\\n              i = u.createMatrix();i.translate(t.detail.x, t.detail.y, 0), u.setElementTransform(e, i), u(e.firstChild, { fromScale: [.5, .5], scale: [0, 0], fromOpacity: .5, opacity: 0, duration: 150, complete: function complete() {\\n              z(e.firstChild);\\n            } });\\n        } }, { key: \\\"_onDropFile\\\", value: function value(t) {\\n          var e = this;this._removeState(\\\"file-over\\\");var i = this._getDrip(),\\n              n = u.createMatrix();n.translate(t.detail.x, t.detail.y, 0), u.setElementTransform(i, n);var o = this._imageHopper.dragPath.length,\\n              a = this._imageHopper.dragPath[o - Math.min(10, o)],\\n              r = t.detail.x - a.x,\\n              s = t.detail.y - a.y;u(i, { fromPosition: [t.detail.x, t.detail.y, 0], position: [t.detail.x + r, t.detail.y + s, 0], duration: 200 }), u(i.firstChild, { fromScale: [.5, .5], scale: [2, 2], fromOpacity: 1, opacity: 0, duration: 200, complete: function complete() {\\n              z(i.firstChild), e._load(t.target.files[0]);\\n            } });\\n        } }, { key: \\\"_onChange\\\", value: function value(t) {\\n          t.target.files.length && this._load(t.target.files[0]);\\n        } }, { key: \\\"_load\\\", value: function value(t, i) {\\n          var n = this,\\n              o = arguments.length > 2 && arguments[2] !== e ? arguments[2] : {};if (!this._isBeingDestroyed) {\\n            if (this.containsImage()) return clearTimeout(this._replaceTimeout), void this._doRemove(function () {\\n              n._replaceTimeout = setTimeout(function () {\\n                n._load(t, i, o);\\n              }, 100);\\n            });this._removeState(\\\"empty\\\"), this._addState(\\\"busy\\\"), this._startProgressLoop(), this._imageHopper && (this._imageHopper.enabled = !1), clearTimeout(this._loadTimeout);var a = function a() {\\n              clearTimeout(n._loadTimeout), n._loadTimeout = setTimeout(function () {\\n                n._isBeingDestroyed || (n._addState(\\\"loading\\\"), u(n._element.querySelector(\\\".slim-label-loading\\\"), { fromOpacity: 0, opacity: 1, duration: 250 }));\\n              }, 500);\\n            },\\n                r = function r() {\\n              n._imageHopper && (n._imageHopper.enabled = !0), n._removeState(\\\"loading\\\"), n._removeState(\\\"busy\\\"), n._addState(\\\"empty\\\"), n._stopProgressLoop();\\n            };if (\\\"string\\\" == typeof t) return void (X(t) ? this._load(Z(t), i, o) : (a(), J(t, this._options.willLoad, function (t) {\\n              n._load(t, i, o);\\n            }, function (t) {\\n              setTimeout(function () {\\n                r(), n._onLocalURLProblem(\\\"<p>\\\" + t + \\\"</p>\\\"), i && i.apply(n, [\\\"local-url-problem\\\"]);\\n              }, 500);\\n            })));if (\\\"undefined\\\" != typeof t.remote) return X(t.remote) ? void this._load(Z(t.remote), i, o) : void (this._options.fetcher && Y(this._options.fetcher, this._options.willFetch, this._options.willLoad, t.remote, function (t) {\\n              r(), n._onRemoteURLProblem(\\\"<p>\\\" + t + \\\"</p>\\\"), i && i.apply(n, [\\\"remote-url-problem\\\"]);\\n            }, function (t) {\\n              n._load(t, i, o);\\n            }));var s = t;if (this._imageHopper && this._imageHopper.accept.indexOf(s.type) === -1) return r(), this._onInvalidFile(), void (i && i.apply(this, [\\\"file-invalid\\\"]));if (s.size && this._options.maxFileSize && D(s.size) > this._options.maxFileSize) return r(), this._onOverWeightFile(), void (i && i.apply(this, [\\\"file-too-big\\\"]));this._imageEditor && this._imageEditor.dirty(), this._data.input.name = o && o.name ? o.name : q(s), this._data.input.type = j(s), this._data.input.size = s.size, this._data.input.file = s, Q(s, this._options.internalCanvasSize, function (t, e) {\\n              var a = function a() {\\n                n._imageHopper && (n._imageHopper.enabled = !0), n._removeState(\\\"loading\\\"), n._removeState(\\\"busy\\\"), n._addState(\\\"empty\\\"), n._stopProgressLoop(), n._resetData();\\n              };if (!t) return a(), void (i && i.apply(n, [\\\"file-not-found\\\"]));if (!ct(t, n._options.minSize)) return a(), n._onImageTooSmall(), void (i && i.apply(n, [\\\"image-too-small\\\"]));var r = n._options.didLoad.apply(n, [s, t, e, n]);if (r !== !0) return a(), r !== !1 && n._throwError(r), void (i && i.apply(n, [r]));n._removeState(\\\"loading\\\");var h = function h(t) {\\n                n._imageHopper && n._options.dropReplace && (n._imageHopper.enabled = !0);var e = n._getIntro(),\\n                    i = { fromScale: [1.25, 1.25], scale: [1, 1], fromOpacity: 0, opacity: 1, complete: function complete() {\\n                    z(e), e.style.opacity = 1, t();\\n                  } };n.isDetached() ? i.duration = 1 : (i.easing = \\\"spring\\\", i.springConstant = .3, i.springDeceleration = .7), n._canInstantEdit() && (i.delay = 500, i.duration = 1, n._doEdit()), u(e, i);\\n              };n._loadCanvas(t, function (t) {\\n                n._addState(\\\"preview\\\"), h(function () {\\n                  n._canInstantEdit() || t || n._showButtons(), t || (n._stopProgressLoop(), n._removeState(\\\"busy\\\")), i && i.apply(n, [null, n.data]);\\n                });\\n              }, function () {\\n                n._canInstantEdit() || n._showButtons(), n._removeState(\\\"busy\\\");\\n              }, { blockPush: o.blockPush });\\n            });\\n          }\\n        } }, { key: \\\"_loadCanvas\\\", value: function value(t, e, i, n) {\\n          var o = this;if (n || (n = {}), !this._isBeingDestroyed) {\\n            this._data.input.image = t, this._data.input.width = t.width, this._data.input.height = t.height, this._initialRotation && (this._data.actions.rotation = this._initialRotation, this._initialRotation = null);var a = this._data.actions.rotation % 180 !== 0;this._isFixedRatio() || (this._initialCrop ? this._ratio = this._initialCrop.height / this._initialCrop.width : this._ratio = a ? t.width / t.height : t.height / t.width, this._scaleDropArea(this._ratio)), this._initialCrop ? (this._data.actions.crop = mt(this._initialCrop), this._data.actions.crop.type = At.INITIAL, this._initialCrop = null) : (this._data.actions.crop = tt(a ? t.height : t.width, a ? t.width : t.height, this._ratio), this._data.actions.crop.type = At.AUTO), this._options.size && (this._data.actions.size = { width: this._options.size.width, height: this._options.size.height }), this._applyTransforms(t, function (t) {\\n              var a = o._getIntro(),\\n                  r = a.offsetWidth / t.width,\\n                  s = !1;o._options.service && o._options.push && !n.blockPush && (o._hasInitialImage || o._canInstantEdit() || (s = !0, o._stopProgressLoop(function () {\\n                o._startProgress(function () {\\n                  o._updateProgress(.1);\\n                });\\n              }))), o._canInstantEdit() || o._save(function () {\\n                o._isBeingDestroyed || s && (o._stopProgress(), i());\\n              }, s);var h = \\\"auto\\\" === o._options.devicePixelRatio ? window.devicePixelRatio : o._options.devicePixelRatio;a.src = \\\"\\\", a.src = ht(t, r * h).toDataURL(), a.onload = function () {\\n                a.onload = null, o._isBeingDestroyed || e && e(s);\\n              };\\n            });\\n          }\\n        } }, { key: \\\"_applyTransforms\\\", value: function value(t, e) {\\n          var i = this,\\n              n = mt(this._data.actions);n.filters = { sharpen: this._options.filterSharpen / 100 }, this._options.forceMinSize ? n.minSize = this._options.minSize : n.minSize = { width: 0, height: 0 }, et(t, n, function (t) {\\n            var n = t;if (i._options.forceSize || i._options.size && 1 == rt(i._options.size, t)) {\\n              n = k(\\\"canvas\\\"), n.width = i._options.size.width, n.height = i._options.size.height;var o = n.getContext(\\\"2d\\\");o.drawImage(t, 0, 0, i._options.size.width, i._options.size.height);\\n            }if (i._options.forceMinSize && i._options.size && i._options.minSize.width === i._options.size.width && i._options.minSize.height === i._options.size.height && (n.width < i._options.minSize.width || n.height < i._options.minSize.height)) {\\n              var a = Math.max(n.width, i._options.minSize.width),\\n                  r = Math.max(n.height, i._options.minSize.height);n = k(\\\"canvas\\\"), n.width = a, n.height = r;var s = n.getContext(\\\"2d\\\");s.drawImage(t, 0, 0, a, r);\\n            }if (i._options.forceMinSize && 1 === i._ratio && (n.width < i._options.minSize.width || n.height < i._options.minSize.height)) {\\n              n = k(\\\"canvas\\\"), n.width = i._options.minSize.width, n.height = i._options.minSize.height;var h = n.getContext(\\\"2d\\\");h.drawImage(t, 0, 0, n.width, n.height);\\n            }i._data.output.width = n.width, i._data.output.height = n.height, i._data.output.image = n, i._onTransformCanvas(function (t) {\\n              i._data = t, i._options.didTransform.apply(i, [i.data, i]), e(i._data.output.image);\\n            });\\n          });\\n        } }, { key: \\\"_onTransformCanvas\\\", value: function value(t) {\\n          this._options.willTransform.apply(this, [this.data, t, this]);\\n        } }, { key: \\\"_appendEditor\\\", value: function value() {\\n          var t = this;this._imageEditor || (this._imageEditor = new It(k(\\\"div\\\"), { minSize: this._options.minSize, devicePixelRatio: this._options.devicePixelRatio, buttonConfirmClassName: this._options.buttonConfirmClassName, buttonCancelClassName: this._options.buttonCancelClassName, buttonRotateClassName: this._options.buttonRotateClassName, buttonConfirmLabel: this._options.buttonConfirmLabel, buttonCancelLabel: this._options.buttonCancelLabel, buttonRotateLabel: this._options.buttonRotateLabel, buttonConfirmTitle: this._options.buttonConfirmTitle, buttonCancelTitle: this._options.buttonCancelTitle, buttonRotateTitle: this._options.buttonRotateTitle }), Bt.forEach(function (e) {\\n            t._imageEditor.element.addEventListener(e, t);\\n          }));\\n        } }, { key: \\\"_scaleDropArea\\\", value: function value(t) {\\n          var e = this._getRatioSpacerElement();e && this._element && (e.style.marginBottom = 100 * t + \\\"%\\\", this._element.setAttribute(\\\"data-ratio\\\", \\\"1:\\\" + t));\\n        } }, { key: \\\"_onCancel\\\", value: function value(t) {\\n          this._removeState(\\\"editor\\\"), this._options.didCancel.apply(this, [this]), this._showButtons(), this._hideEditor(), this._options.instantEdit && !this._hasInitialImage && this._isAutoCrop() && this._doRemove();\\n        } }, { key: \\\"_onConfirm\\\", value: function value(t) {\\n          var e = this,\\n              i = this._options.service && this._options.push;i ? this._startProgress(function () {\\n            e._updateProgress(.1);\\n          }) : this._startProgressLoop(), this._removeState(\\\"editor\\\"), this._addState(\\\"busy\\\"), this._output.value = \\\"\\\", this._data.actions.rotation = t.detail.rotation, this._data.actions.crop = t.detail.crop, this._data.actions.crop.type = At.MANUAL, this._applyTransforms(this._data.input.image, function (t) {\\n            e._options.didConfirm.apply(e, [e.data, e]);var n = e._getInOut(),\\n                o = \\\"out\\\" === n[0].className ? n[0] : n[1],\\n                a = o === n[0] ? n[1] : n[0];o.className = \\\"in\\\", o.style.opacity = \\\"0\\\", o.style.zIndex = \\\"2\\\", a.className = \\\"out\\\", a.style.zIndex = \\\"1\\\";var r = \\\"auto\\\" === e._options.devicePixelRatio ? window.devicePixelRatio : e._options.devicePixelRatio;o.src = \\\"\\\", o.src = ht(t, o.offsetWidth / t.width * r).toDataURL(), o.onload = function () {\\n              o.onload = null, \\\"free\\\" === e._options.ratio && (e._ratio = o.naturalHeight / o.naturalWidth, e._scaleDropArea(e._ratio)), e._hideEditor();var t = setTimeout(function () {\\n                e._showPreview(o, function () {\\n                  e._save(function (t, n, o) {\\n                    e._toggleButton(\\\"upload\\\", !0), i ? e._stopProgress() : e._stopProgressLoop(), e._removeState(\\\"busy\\\"), e._showButtons();\\n                  }, i);\\n                });\\n              }, 250);e._timers.push(t);\\n            };\\n          });\\n        } }, { key: \\\"_cropAuto\\\", value: function value() {\\n          var t = arguments.length > 0 && arguments[0] !== e ? arguments[0] : function (t) {},\\n              i = this._data.actions.rotation % 180 !== 0,\\n              n = tt(i ? this._data.input.image.height : this._data.input.image.width, i ? this._data.input.image.width : this._data.input.image.height, this._ratio);this._crop(n.x, n.y, n.width, n.height, t, At.AUTO);\\n        } }, { key: \\\"_crop\\\", value: function value(t, i, n, o) {\\n          var a = arguments.length > 4 && arguments[4] !== e ? arguments[4] : function (t) {},\\n              r = arguments.length > 5 && arguments[5] !== e ? arguments[5] : At.MANUAL;this._output.value = \\\"\\\", this._data.actions.crop = { x: t, y: i, width: n, height: o }, this._data.actions.crop.type = r, this._manualTransform(a);\\n        } }, { key: \\\"_manualTransform\\\", value: function value(t) {\\n          var e = this;this._startProgressLoop(), this._addState(\\\"busy\\\"), this._applyTransforms(this._data.input.image, function (i) {\\n            var n = e._getInOut(),\\n                o = \\\"out\\\" === n[0].className ? n[0] : n[1],\\n                a = o === n[0] ? n[1] : n[0];o.className = \\\"in\\\", o.style.opacity = \\\"1\\\", o.style.zIndex = \\\"2\\\", a.className = \\\"out\\\", a.style.zIndex = \\\"0\\\";var r = \\\"auto\\\" === e._options.devicePixelRatio ? window.devicePixelRatio : e._options.devicePixelRatio;o.src = \\\"\\\", o.src = ht(i, o.offsetWidth / i.width * r).toDataURL(), o.onload = function () {\\n              o.onload = null, \\\"free\\\" === e._options.ratio && (e._ratio = o.naturalHeight / o.naturalWidth, e._scaleDropArea(e._ratio));var i = e._options.service && e._options.push,\\n                  n = function n() {\\n                e._save(function (n, o, a) {\\n                  i || e._stopProgressLoop(), e._removeState(\\\"busy\\\"), t.apply(e, [e.data]);\\n                }, i);\\n              };i ? e._startProgress(n) : n();\\n            };\\n          });\\n        } }, { key: \\\"_save\\\", value: function value() {\\n          var t = this,\\n              i = arguments.length > 0 && arguments[0] !== e ? arguments[0] : function () {},\\n              n = !(arguments.length > 1 && arguments[1] !== e) || arguments[1];if (!this._isBeingDestroyed) {\\n            var o = this.dataBase64;this._options.service || this._isInitialising && !this._isImageOnly() || this._options.willSave.apply(this, [o, function (e) {\\n              t._store(e), t._options.didSave.apply(t, [e, t]);\\n            }, this]), this._isBeingDestroyed || (this._options.service && n && this._options.willSave.apply(this, [o, function (e) {\\n              t._addState(\\\"upload\\\"), t._imageHopper && t._options.dropReplace && (t._imageHopper.enabled = !1), t._upload(e, function (n, o) {\\n                t._imageHopper && t._options.dropReplace && (t._imageHopper.enabled = !0), n || t._storeServerResponse(o), t._options.didUpload.apply(t, [n, e, o, t]), t._removeState(\\\"upload\\\"), i(n, e, o);\\n              });\\n            }, this]), this._options.service && n || i());\\n          }\\n        } }, { key: \\\"_storeServerResponse\\\", value: function value(t) {\\n          this._isRequired && (this._input.required = !1), this._data.server = t, this._output.value = \\\"object\\\" === (\\\"undefined\\\" == typeof t ? \\\"undefined\\\" : c(t)) ? JSON.stringify(this._data.server) : t;\\n        } }, { key: \\\"_store\\\", value: function value(t) {\\n          this._isRequired && (this._input.required = !1), this._output.value = JSON.stringify(t);\\n        } }, { key: \\\"_upload\\\", value: function value(t, e) {\\n          var i = this;this.requestOutput(function (t, n) {\\n            var o = i._element.querySelector(\\\".slim-upload-status\\\"),\\n                a = i._options.willRequest,\\n                r = function r(t, e) {\\n              i._updateProgress(Math.max(.1, t / e));\\n            },\\n                s = function s(t) {\\n              var n = setTimeout(function () {\\n                if (!i._isBeingDestroyed) {\\n                  o.innerHTML = i._options.statusUploadSuccess, o.setAttribute(\\\"data-state\\\", \\\"success\\\"), o.style.opacity = 1;var t = setTimeout(function () {\\n                    o.style.opacity = 0;\\n                  }, 2e3);i._timers.push(t);\\n                }\\n              }, 250);i._timers.push(n), e(null, t);\\n            },\\n                h = function h(t) {\\n              var n = \\\"\\\";n = \\\"file-too-big\\\" === t ? i._options.statusContentLength : i._options.didReceiveServerError.apply(i, [t, i._options.statusUnknownResponse, i]);var a = setTimeout(function () {\\n                o.innerHTML = n, o.setAttribute(\\\"data-state\\\", \\\"error\\\"), o.style.opacity = 1;\\n              }, 250);i._timers.push(a), e(t);\\n            };\\\"string\\\" == typeof i._options.service ? O(i._options.service, i._options.uploadMethod, n, a, r, s, h) : \\\"function\\\" == typeof i._options.service && i._options.service.apply(i, [\\\"file\\\" === i._options.serviceFormat ? t : n, r, s, h, i]);\\n          }, t);\\n        } }, { key: \\\"requestOutput\\\", value: function value(t, e) {\\n          var i = this;return this._data.input.file ? (e || (e = this.dataBase64), void n.parseMetaData(this._data.input.file, function (o) {\\n            var a = [],\\n                r = new FormData();if (L(\\\"input\\\", i._options.post) && (a.push(i._data.input.file), r.append(i._inputReference, i._data.input.file, i._data.input.file.name)), L(\\\"output\\\", i._options.post) && null !== i._data.output.image && i._options.uploadBase64 === !1) {\\n              var s = Z(e.output.image, e.output.name);if (o.imageHead && i._options.copyImageHead) try {\\n                s = new Blob([o.imageHead, n.blobSlice.call(s, 20)], { type: wt(e.output.image) }), s = G(s, e.output.name);\\n              } catch (h) {}a.push(s);var u = \\\"slim_output_\\\" + i._uid;e.output.image = null, e.output.field = u, r.append(u, s, e.output.name);\\n            }r.append(i._output.name, JSON.stringify(e)), t(a, r);\\n          }, { maxMetaDataSize: 262144, disableImageHead: !1 })) : void t(null, null);\\n        } }, { key: \\\"_showEditor\\\", value: function value() {\\n          Ft.className = this._options.popoverClassName, Ft.show(), this._imageEditor.show();\\n        } }, { key: \\\"_hideEditor\\\", value: function value() {\\n          this._imageEditor.hide();var t = setTimeout(function () {\\n            Ft.hide();\\n          }, 250);this._timers.push(t);\\n        } }, { key: \\\"_showPreview\\\", value: function value(t, e) {\\n          u(t, { fromPosition: [0, 50, 0], position: [0, 0, 0], fromScale: [1.5, 1.5], scale: [1, 1], fromOpacity: 0, opacity: 1, easing: \\\"spring\\\", springConstant: .3, springDeceleration: .7, complete: function complete() {\\n              z(t), e && e();\\n            } });\\n        } }, { key: \\\"_hideResult\\\", value: function value(t) {\\n          var e = this._getIntro();e && u(e, { fromScale: [1, 1], scale: [.5, .5], fromOpacity: 1, opacity: 0, easing: \\\"spring\\\", springConstant: .3, springDeceleration: .75, complete: function complete() {\\n              z(e), t && t();\\n            } });\\n        } }, { key: \\\"_showButtons\\\", value: function value(t) {\\n          if (this._btnGroup) {\\n            this._btnGroup.style.display = \\\"\\\";var e = { fromScale: [.5, .5], scale: [1, 1], fromPosition: [0, 10, 0], position: [0, 0, 0], fromOpacity: 0, opacity: 1, complete: function complete() {\\n                z(this);\\n              }, allDone: function allDone() {\\n                t && t();\\n              } };this.isDetached() ? e.duration = 1 : (e.delay = function (t) {\\n              return 250 + 50 * t;\\n            }, e.easing = \\\"spring\\\", e.springConstant = .3, e.springDeceleration = .85), u(this._btnGroup.childNodes, e);\\n          }\\n        } }, { key: \\\"_hideButtons\\\", value: function value(t) {\\n          var e = this;if (this._btnGroup) {\\n            var i = { fromScale: [1, 1], scale: [.85, .85], fromOpacity: 1, opacity: 0, allDone: function allDone() {\\n                e._btnGroup.style.display = \\\"none\\\", t && t();\\n              } };this.isDetached() ? i.duration = 1 : (i.easing = \\\"spring\\\", i.springConstant = .3, i.springDeceleration = .75), u(this._btnGroup.childNodes, i);\\n          }\\n        } }, { key: \\\"_hideStatus\\\", value: function value() {\\n          var t = this._element.querySelector(\\\".slim-upload-status\\\");t.style.opacity = 0;\\n        } }, { key: \\\"_doEdit\\\", value: function value() {\\n          var t = this;this._data.input.image && (this._addState(\\\"editor\\\"), this._imageEditor || this._appendEditor(), this._imageEditor.showRotateButton = this._options.rotateButton, Ft.inner = this._imageEditor.element, this._imageEditor.open(st(this._data.input.image), \\\"free\\\" === this._options.ratio ? null : this._ratio, this._data.actions.crop, this._data.actions.rotation, function () {\\n            t._showEditor(), t._hideButtons(), t._hideStatus();\\n          }));\\n        } }, { key: \\\"_doRemove\\\", value: function value(t) {\\n          var e = this;if (!this._isImageOnly()) {\\n            this._clearState(), this._addState(\\\"empty\\\"), this._hasInitialImage = !1, this._imageHopper && (this._imageHopper.enabled = !0), this._isRequired && (this._input.required = !0);var i = this._getOutro();i && (i.style.opacity = \\\"0\\\");var n = this.data;this._resetData();var o = setTimeout(function () {\\n              e._isBeingDestroyed || (e._hideButtons(function () {\\n                e._toggleButton(\\\"upload\\\", !0);\\n              }), e._hideStatus(), e._hideResult(), e._options.didRemove.apply(e, [n, e]), t && t());\\n            }, this.isDetached() ? 0 : 250);return this._timers.push(o), n;\\n          }\\n        } }, { key: \\\"_doUpload\\\", value: function value(t) {\\n          var e = this;this._data.input.image && (this._addState(\\\"upload\\\"), this._startProgress(), this._hideButtons(function () {\\n            e._toggleButton(\\\"upload\\\", !1), e._save(function (i, n, o) {\\n              e._removeState(\\\"upload\\\"), e._stopProgress(), t && t.apply(e, [i, n, o]), i && e._toggleButton(\\\"upload\\\", !0), e._showButtons();\\n            });\\n          }));\\n        } }, { key: \\\"_doDownload\\\", value: function value() {\\n          var t = this._data.output.image;t && kt(this._data, this._options.jpegCompression, this._options.forceType);\\n        } }, { key: \\\"_doDestroy\\\", value: function value() {\\n          function t(t, e) {\\n            return 0 !== e.filter(function (e) {\\n              return t.name === e.name && t.value === e.value;\\n            }).length;\\n          }var e = this;this._isBeingDestroyed = !0, this._timers.forEach(function (t) {\\n            clearTimeout(t);\\n          }), this._timers = [], u(this._element, \\\"detach\\\"), this._imageHopper && (Ht.forEach(function (t) {\\n            e._imageHopper.element.removeEventListener(t, e);\\n          }), this._imageHopper.destroy(), this._imageHopper = null), this._imageEditor && (Bt.forEach(function (t) {\\n            e._imageEditor.element.removeEventListener(t, e);\\n          }), this._imageEditor.destroy(), this._imageEditor = null), St(this._btnGroup.children).forEach(function (t) {\\n            t.removeEventListener(\\\"click\\\", e);\\n          }), this._input.removeEventListener(\\\"change\\\", this), this._element !== this._originalElement && this._element.parentNode && this._element.parentNode.replaceChild(this._originalElement, this._element), this._originalElement.innerHTML = this._originalElementInner;var i = _(this._originalElement);i.forEach(function (i) {\\n            t(i, e._originalElementAttributes) || e._originalElement.removeAttribute(i.name);\\n          }), this._originalElementAttributes.forEach(function (n) {\\n            t(n, i) || e._originalElement.setAttribute(n.name, n.value);\\n          }), Wt = Math.max(0, Wt - 1), Ft && 0 === Wt && (Ft.destroy(), Ft = null), this._originalElement = null, this._element = null, this._input = null, this._output = null, this._btnGroup = null, this._options = null;\\n        } }, { key: \\\"dataBase64\\\", get: function get() {\\n          return bt(this._data, this._options.post, this._options.jpegCompression, this._options.forceType, null !== this._options.service);\\n        } }, { key: \\\"data\\\", get: function get() {\\n          return vt(this._data);\\n        } }, { key: \\\"element\\\", get: function get() {\\n          return this._element;\\n        } }, { key: \\\"service\\\", set: function set(t) {\\n          this._options.service = t;\\n        } }, { key: \\\"size\\\", set: function set(t) {\\n          this.setSize(t, null);\\n        } }, { key: \\\"rotation\\\", set: function set(t) {\\n          this.setRotation(t, null);\\n        } }, { key: \\\"forceSize\\\", set: function set(t) {\\n          this.setForceSize(t, null);\\n        } }, { key: \\\"ratio\\\", set: function set(t) {\\n          this.setRatio(t, null);\\n        } }], [{ key: \\\"options\\\", value: function value() {\\n          var t = { edit: !0, instantEdit: !1, uploadBase64: !1, meta: {}, ratio: \\\"free\\\", devicePixelRatio: 1, size: null, rotation: null, crop: null, post: [\\\"output\\\", \\\"actions\\\"], service: null, serviceFormat: null, filterSharpen: 0, push: !1, defaultInputName: \\\"slim[]\\\", minSize: { width: 0, height: 0 }, maxFileSize: null, jpegCompression: null, uploadMethod: \\\"POST\\\", download: !1, saveInitialImage: !1, forceType: !1, forceSize: null, forceMinSize: !0, dropReplace: !0, fetcher: null, internalCanvasSize: { width: 4096, height: 4096 }, copyImageHead: !1, rotateButton: !0, popoverClassName: null, label: \\\"<p>Drop your image here</p>\\\", labelLoading: \\\"<p>Loading image...</p>\\\", statusFileType: \\\"<p>Invalid file type, expects: $0.</p>\\\", statusFileSize: \\\"<p>File is too big, maximum file size: $0 MB.</p>\\\", statusNoSupport: \\\"<p>Your browser does not support image cropping.</p>\\\", statusImageTooSmall: \\\"<p>Image is too small, minimum size is: $0 pixels.</p>\\\", statusContentLength: '<span class=\\\"slim-upload-status-icon\\\"></span> The file is probably too big', statusUnknownResponse: '<span class=\\\"slim-upload-status-icon\\\"></span> An unknown error occurred', statusUploadSuccess: '<span class=\\\"slim-upload-status-icon\\\"></span> Saved', statusLocalUrlProblem: null, didInit: function didInit(t) {}, didLoad: function didLoad(t, e, i) {\\n              return !0;\\n            }, didSave: function didSave(t) {}, didUpload: function didUpload(t, e, i) {}, didReceiveServerError: function didReceiveServerError(t, e) {\\n              return e;\\n            }, didRemove: function didRemove(t) {}, didTransform: function didTransform(t) {}, didConfirm: function didConfirm(t) {}, didCancel: function didCancel() {}, didThrowError: function didThrowError() {}, willTransform: function willTransform(t, e) {\\n              e(t);\\n            }, willSave: function willSave(t, e) {\\n              e(t);\\n            }, willRemove: function willRemove(t, e) {\\n              e();\\n            }, willRequest: function willRequest(t, e) {}, willFetch: function willFetch(t) {}, willLoad: function willLoad(t) {} };return Nt.concat(It.Buttons).concat(\\\"rotate\\\").forEach(function (e) {\\n            var i = R(e);t[\\\"button\\\" + i + \\\"ClassName\\\"] = null, t[\\\"button\\\" + i + \\\"Label\\\"] = i, t[\\\"button\\\" + i + \\\"Title\\\"] = i;\\n          }), t;\\n        } }]), i;\\n    }();return function () {\\n      function t(t) {\\n        return t ? \\\"<p>\\\" + t + \\\"</p>\\\" : null;\\n      }function e(t) {\\n        var e = window,\\n            i = t.split(\\\".\\\");return i.forEach(function (t, n) {\\n          e[i[n]] && (e = e[i[n]]);\\n        }), e !== window ? e : null;\\n      }var i = [],\\n          n = function n(t) {\\n        for (var e = 0, n = i.length; e < n; e++) {\\n          if (i[e].isAttachedTo(t)) return e;\\n        }return -1;\\n      },\\n          o = function o(t) {\\n        return t;\\n      },\\n          a = function a(t) {\\n        return \\\"true\\\" === t;\\n      },\\n          r = function r(t) {\\n        return !t || \\\"true\\\" === t;\\n      },\\n          s = function s(e) {\\n        return t(e);\\n      },\\n          h = function h(t) {\\n        return t ? e(t) : null;\\n      },\\n          u = function u(t) {\\n        if (!t) return null;var e = zt(t, \\\",\\\");return { width: e[0], height: e[1] };\\n      },\\n          l = function l(t) {\\n        return t ? parseFloat(t) : null;\\n      },\\n          p = function p(t) {\\n        return t ? parseInt(t, 10) : null;\\n      },\\n          c = function c(t) {\\n        if (!t) return null;var e = {};return t.split(\\\",\\\").map(function (t) {\\n          return parseInt(t, 10);\\n        }).forEach(function (t, i) {\\n          e[Ut[i]] = t;\\n        }), e;\\n      },\\n          f = { download: a, edit: r, instantEdit: a, minSize: u, size: u, forceSize: u, forceMinSize: r, internalCanvasSize: u, service: function service(t) {\\n          if (\\\"undefined\\\" == typeof t) return null;var i = e(t);return i ? i : t;\\n        }, serviceFormat: function serviceFormat(t) {\\n          return \\\"undefined\\\" == typeof t ? null : t;\\n        }, fetcher: function fetcher(t) {\\n          return \\\"undefined\\\" == typeof t ? null : t;\\n        }, push: a, rotation: function rotation(t) {\\n          return \\\"undefined\\\" == typeof t ? null : parseInt(t, 10);\\n        }, crop: c, post: function post(t) {\\n          return t ? t.split(\\\",\\\").map(function (t) {\\n            return t.trim();\\n          }) : null;\\n        }, defaultInputName: o, ratio: function ratio(t) {\\n          return t ? t : null;\\n        }, maxFileSize: l, filterSharpen: p, jpegCompression: p, uploadBase64: a, forceType: o, dropReplace: r, saveInitialImage: a, copyImageHead: a, rotateButton: r, label: s, labelLoading: s, popoverClassName: o, devicePixelRatio: o, uploadMethod: o };[\\\"FileSize\\\", \\\"FileType\\\", \\\"NoSupport\\\", \\\"ImageTooSmall\\\"].forEach(function (t) {\\n        f[\\\"status\\\" + t] = s;\\n      }), [\\\"ContentLength\\\", \\\"UnknownResponse\\\", \\\"UploadSuccess\\\", \\\"localUrlProblem\\\"].forEach(function (t) {\\n        f[\\\"status\\\" + t] = o;\\n      }), [\\\"Init\\\", \\\"Load\\\", \\\"Save\\\", \\\"Upload\\\", \\\"Remove\\\", \\\"Transform\\\", \\\"ReceiveServerError\\\", \\\"Confirm\\\", \\\"Cancel\\\", \\\"ThrowError\\\"].forEach(function (t) {\\n        f[\\\"did\\\" + t] = h;\\n      }), [\\\"Transform\\\", \\\"Save\\\", \\\"Remove\\\", \\\"Request\\\", \\\"Load\\\", \\\"Fetch\\\"].forEach(function (t) {\\n        f[\\\"will\\\" + t] = h;\\n      });var _ = [\\\"ClassName\\\", \\\"Label\\\", \\\"Title\\\"];Nt.concat(It.Buttons).concat(\\\"rotate\\\").forEach(function (t) {\\n        var e = R(t);_.forEach(function (t) {\\n          f[\\\"button\\\" + e + t] = o;\\n        });\\n      }), Gt.supported = function () {\\n        return !(\\\"[object OperaMini]\\\" === Object.prototype.toString.call(window.operamini) || \\\"undefined\\\" == typeof window.addEventListener || \\\"undefined\\\" == typeof window.FileReader || !(\\\"slice\\\" in Blob.prototype) || \\\"undefined\\\" == typeof window.URL || \\\"undefined\\\" == typeof window.URL.createObjectURL);\\n      }(), Gt.parse = function (t) {\\n        var e,\\n            i,\\n            n,\\n            o = [];for (e = t.querySelectorAll(\\\".slim:not([data-state])\\\"), n = e.length; n--;) {\\n          i = e[n], o.push(Gt.create(i, Gt.getOptionsFromAttributes(i)));\\n        }return o;\\n      }, Gt.getOptionsFromAttributes = function (t) {\\n        var e = d(t),\\n            i = { meta: {} };for (var n in e) {\\n          var o = f[n],\\n              a = e[n];o ? (a = o(a), a = null === a ? mt(Gt.options()[n]) : a, i[n] = a) : 0 === n.indexOf(\\\"meta\\\") && (i.meta[M(n.substr(4))] = a);\\n        }return i;\\n      }, Gt.find = function (t) {\\n        var e = i.filter(function (e) {\\n          return e.isAttachedTo(t);\\n        });return e ? e[0] : null;\\n      }, Gt.create = function (t, e) {\\n        if (!Gt.find(t)) {\\n          e || (e = Gt.getOptionsFromAttributes(t));var n = new Gt(t, e);return i.push(n), n;\\n        }\\n      }, Gt.destroy = function (t) {\\n        var e = n(t);return !(e < 0) && (i[e].destroy(), i.splice(e, 1), !0);\\n      };\\n    }(), Gt;\\n  }(), t.Slim.supported) \\\"loading\\\" !== document.readyState ? i() : document.addEventListener(\\\"DOMContentLoaded\\\", i);else {\\n    var n = t.getElementsByClassName(\\\"slim\\\"),\\n        o = 0,\\n        a = n.length;for (o = 0; o < a; o++) {\\n      n[o].className = \\\"\\\";\\n    }\\n  }\\n}(window);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./vendor/slim/js/slim.kickstart.min.js\\n\");\n\n//# sourceURL=webpack:///./vendor/slim/js/slim.kickstart.min.js?");

/***/ }),

/***/ 0:
/*!****************************************!*\
  !*** multi ./css/app.scss ./js/app.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! /Users/thib/Documents/Websites/Projects/Dev/boncoin/assets/css/app.scss */\"./css/app.scss\");\nmodule.exports = __webpack_require__(/*! /Users/thib/Documents/Websites/Projects/Dev/boncoin/assets/js/app.js */\"./js/app.js\");\n\n\n//# sourceURL=webpack:///multi_./css/app.scss_./js/app.js?");

/***/ })

/******/ });